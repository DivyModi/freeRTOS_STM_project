
mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08008010  08008010  00018010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081c0  080081c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c8  080081c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081cc  080081cc  000181cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080081d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144ac  20000078  08008248  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014524  08008248  00024524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a57a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f1  00000000  00000000  0003a622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0003db18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0003f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a0a1  00000000  00000000  00040810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a422  00000000  00000000  0006a8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001027e2  00000000  00000000  00084cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001874b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006864  00000000  00000000  00187508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ff8 	.word	0x08007ff8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007ff8 	.word	0x08007ff8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f3c 	.word	0x20012f3c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fbc7 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f861 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8e1 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f8af 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <main+0xac>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a24      	ldr	r2, [pc, #144]	; (8000614 <main+0xac>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800058a:	f005 fae3 	bl	8005b54 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800058e:	f006 fa11 	bl	80069b4 <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, NULL, 2, &task1_handle);
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <main+0xb0>)
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	491f      	ldr	r1, [pc, #124]	; (800061c <main+0xb4>)
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <main+0xb8>)
 80005a2:	f003 fe75 	bl	8004290 <xTaskCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <main+0xbc>)
 80005aa:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d00a      	beq.n	80005ca <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b8:	f383 8811 	msr	BASEPRI, r3
 80005bc:	f3bf 8f6f 	isb	sy
 80005c0:	f3bf 8f4f 	dsb	sy
 80005c4:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c6:	bf00      	nop
 80005c8:	e7fe      	b.n	80005c8 <main+0x60>
  status = xTaskCreate(task2_handler, "Task2", 200, NULL, 2, &task2_handle);
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <main+0xc0>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2302      	movs	r3, #2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	4915      	ldr	r1, [pc, #84]	; (800062c <main+0xc4>)
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0xc8>)
 80005da:	f003 fe59 	bl	8004290 <xTaskCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <main+0xbc>)
 80005e2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <main+0xbc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x9a>
        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	603b      	str	r3, [r7, #0]
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x98>

  xMutex = xSemaphoreCreateMutex();
 8000602:	2001      	movs	r0, #1
 8000604:	f003 faf8 	bl	8003bf8 <xQueueCreateMutex>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <main+0xcc>)
 800060c:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 800060e:	f003 ffdb 	bl	80045c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0xaa>
 8000614:	e0001000 	.word	0xe0001000
 8000618:	20000118 	.word	0x20000118
 800061c:	08008010 	.word	0x08008010
 8000620:	08000809 	.word	0x08000809
 8000624:	20000120 	.word	0x20000120
 8000628:	2000011c 	.word	0x2000011c
 800062c:	08008018 	.word	0x08008018
 8000630:	08000881 	.word	0x08000881
 8000634:	20000124 	.word	0x20000124

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 ffc2 	bl	80075d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f000 fe41 	bl	80012e4 <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f958 	bl	800091c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2310      	movs	r3, #16
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000686:	230a      	movs	r3, #10
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fe78 	bl	8001390 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a6:	f000 f939 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fa40 	bl	8001b48 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 f925 	bl	800091c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3758      	adds	r7, #88	; 0x58
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_USART2_UART_Init+0x5c>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x58>)
 8000720:	f002 fbf6 	bl	8002f10 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f8f7 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000094 	.word	0x20000094
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a24      	ldr	r2, [pc, #144]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xc4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0xc4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_GPIO_Init+0xc4>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0xc4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f000 fd6d 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0xc8>)
 80007d6:	f000 fbb5 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007da:	2320      	movs	r3, #32
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f000 fba6 	bl	8000f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	48000800 	.word	0x48000800

08000808 <task1_handler>:

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//////////////////XXXXXXXXXXX With Mutex XXXXXXXXXXXXX\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
void task1_handler(void *parameter)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	char msg1[9] = "Potatoes";
 8000810:	4a18      	ldr	r2, [pc, #96]	; (8000874 <task1_handler+0x6c>)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	ca07      	ldmia	r2, {r0, r1, r2}
 8000818:	c303      	stmia	r3!, {r0, r1}
 800081a:	701a      	strb	r2, [r3, #0]
	while(1){
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) == pdTRUE ){
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <task1_handler+0x70>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fb0d 	bl	8003e44 <xQueueSemaphoreTake>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d11c      	bne.n	800086a <task1_handler+0x62>
			int i;
			for(i = 0;i<9;i++){
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e00c      	b.n	8000850 <task1_handler+0x48>
				msg[i] = msg1[i];
 8000836:	f107 0208 	add.w	r2, r7, #8
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4413      	add	r3, r2
 800083e:	7819      	ldrb	r1, [r3, #0]
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <task1_handler+0x74>)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	4413      	add	r3, r2
 8000846:	460a      	mov	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
			for(i = 0;i<9;i++){
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3301      	adds	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	2b08      	cmp	r3, #8
 8000854:	ddef      	ble.n	8000836 <task1_handler+0x2e>
			}
			printf("%s\n",msg);
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <task1_handler+0x74>)
 8000858:	f006 ff30 	bl	80076bc <puts>

			xSemaphoreGive(xMutex);
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <task1_handler+0x70>)
 800085e:	6818      	ldr	r0, [r3, #0]
 8000860:	2300      	movs	r3, #0
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	f003 f9df 	bl	8003c28 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f003 fe74 	bl	8004558 <vTaskDelay>
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) == pdTRUE ){
 8000870:	e7d4      	b.n	800081c <task1_handler+0x14>
 8000872:	bf00      	nop
 8000874:	08008020 	.word	0x08008020
 8000878:	20000124 	.word	0x20000124
 800087c:	20000128 	.word	0x20000128

08000880 <task2_handler>:
	}
}

void task2_handler(void *parameter)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	char msg2[9] = "Tomatoes";
 8000888:	4a18      	ldr	r2, [pc, #96]	; (80008ec <task2_handler+0x6c>)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000890:	c303      	stmia	r3!, {r0, r1}
 8000892:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) == pdTRUE ){
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <task2_handler+0x70>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fad1 	bl	8003e44 <xQueueSemaphoreTake>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d11c      	bne.n	80008e2 <task2_handler+0x62>
			int i;
			for(i = 0;i<9;i++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00c      	b.n	80008c8 <task2_handler+0x48>
				msg[i] = msg2[i];
 80008ae:	f107 0208 	add.w	r2, r7, #8
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	7819      	ldrb	r1, [r3, #0]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <task2_handler+0x74>)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	4413      	add	r3, r2
 80008be:	460a      	mov	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
			for(i = 0;i<9;i++){
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	ddef      	ble.n	80008ae <task2_handler+0x2e>
			}
			printf("%s\n",msg);
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <task2_handler+0x74>)
 80008d0:	f006 fef4 	bl	80076bc <puts>

			xSemaphoreGive(xMutex);
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <task2_handler+0x70>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	f003 f9a3 	bl	8003c28 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f003 fe38 	bl	8004558 <vTaskDelay>
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) == pdTRUE ){
 80008e8:	e7d4      	b.n	8000894 <task2_handler+0x14>
 80008ea:	bf00      	nop
 80008ec:	0800802c 	.word	0x0800802c
 80008f0:	20000124 	.word	0x20000124
 80008f4:	20000128 	.word	0x20000128

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 fa19 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40001000 	.word	0x40001000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800095e:	f004 fd4b 	bl	80053f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0ac      	sub	sp, #176	; 0xb0
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2288      	movs	r2, #136	; 0x88
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f006 fe1d 	bl	80075d0 <memset>
  if(huart->Instance==USART2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_UART_MspInit+0xb0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13b      	bne.n	8000a18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fb21 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b8:	f7ff ffb0 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c6:	6593      	str	r3, [r2, #88]	; 0x58
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 80009ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ec:	230c      	movs	r3, #12
 80009ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a04:	2307      	movs	r3, #7
 8000a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f000 fa96 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	37b0      	adds	r7, #176	; 0xb0
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_InitTick+0xe0>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <HAL_InitTick+0xe0>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <HAL_InitTick+0xe0>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4e:	f107 0210 	add.w	r2, r7, #16
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fa39 	bl	8001ed0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d103      	bne.n	8000a70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a68:	f001 fa06 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8000a6c:	6378      	str	r0, [r7, #52]	; 0x34
 8000a6e:	e004      	b.n	8000a7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a70:	f001 fa02 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8000a74:	4603      	mov	r3, r0
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_InitTick+0xe4>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0c9b      	lsrs	r3, r3, #18
 8000a84:	3b01      	subs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <HAL_InitTick+0xe8>)
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <HAL_InitTick+0xec>)
 8000a8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <HAL_InitTick+0xe8>)
 8000a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <HAL_InitTick+0xe8>)
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_InitTick+0xe8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_InitTick+0xe8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_InitTick+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <HAL_InitTick+0xe8>)
 8000ab0:	f001 ff5c 	bl	800296c <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000aba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d11b      	bne.n	8000afa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <HAL_InitTick+0xe8>)
 8000ac4:	f001 ffb4 	bl	8002a30 <HAL_TIM_Base_Start_IT>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ace:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d111      	bne.n	8000afa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad6:	2036      	movs	r0, #54	; 0x36
 8000ad8:	f000 fa26 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d808      	bhi.n	8000af4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	2036      	movs	r0, #54	; 0x36
 8000ae8:	f000 fa02 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_InitTick+0xf0>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	e002      	b.n	8000afa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000afa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3738      	adds	r7, #56	; 0x38
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	20000134 	.word	0x20000134
 8000b14:	40001000 	.word	0x40001000
 8000b18:	20000004 	.word	0x20000004

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <TIM6_DAC_IRQHandler+0x10>)
 8000b4e:	f001 ffdf 	bl	8002b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000134 	.word	0x20000134

08000b5c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <ITM_SendChar+0x48>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <ITM_SendChar+0x48>)
 8000b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b70:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <ITM_SendChar+0x4c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <ITM_SendChar+0x4c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b7e:	bf00      	nop
 8000b80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f8      	beq.n	8000b80 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000edfc 	.word	0xe000edfc
 8000ba8:	e0000e00 	.word	0xe0000e00

08000bac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00a      	b.n	8000bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	b2ca      	uxtb	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf0      	blt.n	8000bbe <_read+0x12>
  }

  return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e009      	b.n	8000c0c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffab 	bl	8000b5c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbf1      	blt.n	8000bf8 <_write+0x12>
  }
  return len;
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_close>:

int _close(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c46:	605a      	str	r2, [r3, #4]
  return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_isatty>:

int _isatty(int file)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff ffea 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f006 fc37 	bl	800754c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fc43 	bl	8000568 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf0:	080081d0 	.word	0x080081d0
  ldr r2, =_sbss
 8000cf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cf8:	20014524 	.word	0x20014524

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_Init+0x3c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x3c>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f8df 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f7ff fe83 	bl	8000a28 <HAL_InitTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	e001      	b.n	8000d32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2e:	f7ff fdfb 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000180 	.word	0x20000180

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000180 	.word	0x20000180

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	e17f      	b.n	8001254 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8171 	beq.w	800124e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d118      	bne.n	8001024 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	08db      	lsrs	r3, r3, #3
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	6939      	ldr	r1, [r7, #16]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80ac 	beq.w	800124e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <HAL_GPIO_Init+0x330>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fa:	4a5e      	ldr	r2, [pc, #376]	; (8001274 <HAL_GPIO_Init+0x330>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6613      	str	r3, [r2, #96]	; 0x60
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800110e:	4a5a      	ldr	r2, [pc, #360]	; (8001278 <HAL_GPIO_Init+0x334>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001138:	d025      	beq.n	8001186 <HAL_GPIO_Init+0x242>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x338>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01f      	beq.n	8001182 <HAL_GPIO_Init+0x23e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_GPIO_Init+0x33c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d019      	beq.n	800117e <HAL_GPIO_Init+0x23a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_GPIO_Init+0x340>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0x236>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	; (8001288 <HAL_GPIO_Init+0x344>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d00d      	beq.n	8001176 <HAL_GPIO_Init+0x232>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4b      	ldr	r2, [pc, #300]	; (800128c <HAL_GPIO_Init+0x348>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d007      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <HAL_GPIO_Init+0x34c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_GPIO_Init+0x22a>
 800116a:	2306      	movs	r3, #6
 800116c:	e00c      	b.n	8001188 <HAL_GPIO_Init+0x244>
 800116e:	2307      	movs	r3, #7
 8001170:	e00a      	b.n	8001188 <HAL_GPIO_Init+0x244>
 8001172:	2305      	movs	r3, #5
 8001174:	e008      	b.n	8001188 <HAL_GPIO_Init+0x244>
 8001176:	2304      	movs	r3, #4
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x244>
 800117a:	2303      	movs	r3, #3
 800117c:	e004      	b.n	8001188 <HAL_GPIO_Init+0x244>
 800117e:	2302      	movs	r3, #2
 8001180:	e002      	b.n	8001188 <HAL_GPIO_Init+0x244>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x244>
 8001186:	2300      	movs	r3, #0
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	f002 0203 	and.w	r2, r2, #3
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4093      	lsls	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001198:	4937      	ldr	r1, [pc, #220]	; (8001278 <HAL_GPIO_Init+0x334>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_GPIO_Init+0x350>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ca:	4a32      	ldr	r2, [pc, #200]	; (8001294 <HAL_GPIO_Init+0x350>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_GPIO_Init+0x350>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011f4:	4a27      	ldr	r2, [pc, #156]	; (8001294 <HAL_GPIO_Init+0x350>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <HAL_GPIO_Init+0x350>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <HAL_GPIO_Init+0x350>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	f47f ae78 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000
 800127c:	48000400 	.word	0x48000400
 8001280:	48000800 	.word	0x48000800
 8001284:	48000c00 	.word	0x48000c00
 8001288:	48001000 	.word	0x48001000
 800128c:	48001400 	.word	0x48001400
 8001290:	48001800 	.word	0x48001800
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f2:	d130      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001300:	d038      	beq.n	8001374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800130a:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001310:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2232      	movs	r2, #50	; 0x32
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9b      	lsrs	r3, r3, #18
 8001324:	3301      	adds	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001328:	e002      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3b01      	subs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133c:	d102      	bne.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x60>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f2      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001350:	d110      	bne.n	8001374 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e00f      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001362:	d007      	beq.n	8001374 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001372:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000
 8001388:	20000000 	.word	0x20000000
 800138c:	431bde83 	.word	0x431bde83

08001390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e3ca      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a2:	4b97      	ldr	r3, [pc, #604]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ac:	4b94      	ldr	r3, [pc, #592]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80e4 	beq.w	800158c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_RCC_OscConfig+0x4a>
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b0c      	cmp	r3, #12
 80013ce:	f040 808b 	bne.w	80014e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 8087 	bne.w	80014e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013da:	4b89      	ldr	r3, [pc, #548]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x62>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e3a2      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1a      	ldr	r2, [r3, #32]
 80013f6:	4b82      	ldr	r3, [pc, #520]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_RCC_OscConfig+0x7c>
 8001402:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800140a:	e005      	b.n	8001418 <HAL_RCC_OscConfig+0x88>
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001418:	4293      	cmp	r3, r2
 800141a:	d223      	bcs.n	8001464 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fd87 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e383      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001430:	4b73      	ldr	r3, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a72      	ldr	r2, [pc, #456]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b70      	ldr	r3, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	496d      	ldr	r1, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144e:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	4968      	ldr	r1, [pc, #416]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e025      	b.n	80014b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001464:	4b66      	ldr	r3, [pc, #408]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a65      	ldr	r2, [pc, #404]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b63      	ldr	r3, [pc, #396]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4960      	ldr	r1, [pc, #384]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	495b      	ldr	r1, [pc, #364]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fd47 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e343      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b0:	f000 fc4a 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b52      	ldr	r3, [pc, #328]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	4950      	ldr	r1, [pc, #320]	; (8001604 <HAL_RCC_OscConfig+0x274>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <HAL_RCC_OscConfig+0x278>)
 80014ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014d0:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_RCC_OscConfig+0x27c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff faa7 	bl	8000a28 <HAL_InitTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d052      	beq.n	800158a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	e327      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d032      	beq.n	8001556 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f0:	4b43      	ldr	r3, [pc, #268]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a42      	ldr	r2, [pc, #264]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fc34 	bl	8000d68 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff fc30 	bl	8000d68 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e310      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a36      	ldr	r2, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4931      	ldr	r1, [pc, #196]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	492c      	ldr	r1, [pc, #176]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e01a      	b.n	800158c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001562:	f7ff fc01 	bl	8000d68 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156a:	f7ff fbfd 	bl	8000d68 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e2dd      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x1da>
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d074      	beq.n	8001682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2b08      	cmp	r3, #8
 800159c:	d005      	beq.n	80015aa <HAL_RCC_OscConfig+0x21a>
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d10e      	bne.n	80015c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d10b      	bne.n	80015c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d064      	beq.n	8001680 <HAL_RCC_OscConfig+0x2f0>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d160      	bne.n	8001680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e2ba      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x24a>
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e026      	b.n	8001628 <HAL_RCC_OscConfig+0x298>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e2:	d115      	bne.n	8001610 <HAL_RCC_OscConfig+0x280>
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a05      	ldr	r2, [pc, #20]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a02      	ldr	r2, [pc, #8]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x298>
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	08008100 	.word	0x08008100
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004
 8001610:	4ba0      	ldr	r3, [pc, #640]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a9f      	ldr	r2, [pc, #636]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b9d      	ldr	r3, [pc, #628]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a9c      	ldr	r2, [pc, #624]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb9a 	bl	8000d68 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fb96 	bl	8000d68 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e276      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	4b92      	ldr	r3, [pc, #584]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x2a8>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb86 	bl	8000d68 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb82 	bl	8000d68 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e262      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001672:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d0>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d060      	beq.n	8001750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x310>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d119      	bne.n	80016ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d116      	bne.n	80016ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x328>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e23f      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b76      	ldr	r3, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	4973      	ldr	r1, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016cc:	e040      	b.n	8001750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d023      	beq.n	800171e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6e      	ldr	r2, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb41 	bl	8000d68 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb3d 	bl	8000d68 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e21d      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b62      	ldr	r3, [pc, #392]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	495f      	ldr	r1, [pc, #380]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	e018      	b.n	8001750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a5c      	ldr	r2, [pc, #368]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fb1d 	bl	8000d68 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fb19 	bl	8000d68 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1f9      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01c      	beq.n	800179e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176a:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff faf8 	bl	8000d68 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff faf4 	bl	8000d68 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e1d4      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ef      	beq.n	800177c <HAL_RCC_OscConfig+0x3ec>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fadb 	bl	8000d68 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fad7 	bl	8000d68 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1b7      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c8:	4b32      	ldr	r3, [pc, #200]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ef      	bne.n	80017b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80a6 	beq.w	8001930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180c:	2301      	movs	r3, #1
 800180e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d118      	bne.n	800184e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001828:	f7ff fa9e 	bl	8000d68 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f7ff fa9a 	bl	8000d68 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e17a      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x4d8>
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001866:	e029      	b.n	80018bc <HAL_RCC_OscConfig+0x52c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d115      	bne.n	800189c <HAL_RCC_OscConfig+0x50c>
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x52c>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	40007000 	.word	0x40007000
 800189c:	4b9c      	ldr	r3, [pc, #624]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a9b      	ldr	r2, [pc, #620]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ac:	4b98      	ldr	r3, [pc, #608]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	4a97      	ldr	r2, [pc, #604]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d016      	beq.n	80018f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa50 	bl	8000d68 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fa4c 	bl	8000d68 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e12a      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ed      	beq.n	80018cc <HAL_RCC_OscConfig+0x53c>
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa39 	bl	8000d68 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fa35 	bl	8000d68 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e113      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001910:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ed      	bne.n	80018fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b7a      	ldr	r3, [pc, #488]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	4a79      	ldr	r2, [pc, #484]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80fe 	beq.w	8001b36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	2b02      	cmp	r3, #2
 8001940:	f040 80d0 	bne.w	8001ae4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001944:	4b72      	ldr	r3, [pc, #456]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	429a      	cmp	r2, r3
 8001956:	d130      	bne.n	80019ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	3b01      	subs	r3, #1
 8001964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d127      	bne.n	80019ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001974:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11f      	bne.n	80019ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001984:	2a07      	cmp	r2, #7
 8001986:	bf14      	ite	ne
 8001988:	2201      	movne	r2, #1
 800198a:	2200      	moveq	r2, #0
 800198c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198e:	4293      	cmp	r3, r2
 8001990:	d113      	bne.n	80019ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d06e      	beq.n	8001a98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d069      	beq.n	8001a94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0ad      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 80019e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e8:	f7ff f9be 	bl	8000d68 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f9ba 	bl	8000d68 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e09a      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a02:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a1e:	3a01      	subs	r2, #1
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a28:	0212      	lsls	r2, r2, #8
 8001a2a:	4311      	orrs	r1, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a30:	0852      	lsrs	r2, r2, #1
 8001a32:	3a01      	subs	r2, #1
 8001a34:	0552      	lsls	r2, r2, #21
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a3c:	0852      	lsrs	r2, r2, #1
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	0652      	lsls	r2, r2, #25
 8001a42:	4311      	orrs	r1, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a48:	0912      	lsrs	r2, r2, #4
 8001a4a:	0452      	lsls	r2, r2, #17
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	4930      	ldr	r1, [pc, #192]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2d      	ldr	r2, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a6c:	f7ff f97c 	bl	8000d68 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f978 	bl	8000d68 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e058      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a92:	e050      	b.n	8001b36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e04f      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d148      	bne.n	8001b36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001abc:	f7ff f954 	bl	8000d68 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f950 	bl	8000d68 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e030      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x734>
 8001ae2:	e028      	b.n	8001b36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d023      	beq.n	8001b32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_RCC_OscConfig+0x780>)
 8001af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f937 	bl	8000d68 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	e00c      	b.n	8001b18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f933 	bl	8000d68 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d905      	bls.n	8001b18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e013      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
 8001b10:	40021000 	.word	0x40021000
 8001b14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_OscConfig+0x7b0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ec      	bne.n	8001afe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_OscConfig+0x7b0>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4905      	ldr	r1, [pc, #20]	; (8001b40 <HAL_RCC_OscConfig+0x7b0>)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCC_OscConfig+0x7b4>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
 8001b30:	e001      	b.n	8001b36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	feeefffc 	.word	0xfeeefffc

08001b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0e7      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b72      	ldr	r3, [pc, #456]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4970      	ldr	r1, [pc, #448]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b6e      	ldr	r3, [pc, #440]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0cf      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d908      	bls.n	8001bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4960      	ldr	r1, [pc, #384]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04c      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bce:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d121      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0a6      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be6:	4b54      	ldr	r3, [pc, #336]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e09a      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e08e      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e086      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4943      	ldr	r1, [pc, #268]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c30:	f7ff f89a 	bl	8000d68 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f896 	bl	8000d68 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e06e      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d010      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d208      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	492b      	ldr	r1, [pc, #172]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d210      	bcs.n	8001cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 0207 	bic.w	r2, r3, #7
 8001ca4:	4923      	ldr	r1, [pc, #140]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_ClockConfig+0x1ec>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e036      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	4918      	ldr	r1, [pc, #96]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4910      	ldr	r1, [pc, #64]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfc:	f000 f824 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	490b      	ldr	r1, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1f4>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1fc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fe81 	bl	8000a28 <HAL_InitTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08008100 	.word	0x08008100
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d60:	4b3b      	ldr	r3, [pc, #236]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x34>
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d121      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d11e      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d7c:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e005      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001da4:	4a2b      	ldr	r2, [pc, #172]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dc0:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	e004      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d134      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0xa6>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d003      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0xac>
 8001dec:	e005      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001df0:	617b      	str	r3, [r7, #20]
      break;
 8001df2:	e005      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001df6:	617b      	str	r3, [r7, #20]
      break;
 8001df8:	e002      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	617b      	str	r3, [r7, #20]
      break;
 8001dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	fb03 f202 	mul.w	r2, r3, r2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	0e5b      	lsrs	r3, r3, #25
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	3301      	adds	r3, #1
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e40:	69bb      	ldr	r3, [r7, #24]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08008118 	.word	0x08008118
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4904      	ldr	r1, [pc, #16]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08008110 	.word	0x08008110

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ea8:	f7ff ffda 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	0adb      	lsrs	r3, r3, #11
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4904      	ldr	r1, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08008110 	.word	0x08008110

08001ed0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	220f      	movs	r2, #15
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCC_GetClockConfig+0x60>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0207 	and.w	r2, r3, #7
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40022000 	.word	0x40022000

08001f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f4c:	f7ff f9bc 	bl	80012c8 <HAL_PWREx_GetVoltageRange>
 8001f50:	6178      	str	r0, [r7, #20]
 8001f52:	e014      	b.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f9ac 	bl	80012c8 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f84:	d10b      	bne.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d919      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f90:	d902      	bls.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f92:	2302      	movs	r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e013      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e010      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d902      	bls.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e00a      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d102      	bne.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e004      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d101      	bne.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 0207 	bic.w	r2, r3, #7
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002000:	2300      	movs	r3, #0
 8002002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	2b00      	cmp	r3, #0
 800200e:	d041      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002018:	d02a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800201a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800201e:	d824      	bhi.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002024:	d008      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800202a:	d81e      	bhi.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002034:	d010      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002036:	e018      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002038:	4b86      	ldr	r3, [pc, #536]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a85      	ldr	r2, [pc, #532]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002044:	e015      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fabb 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 8002052:	4603      	mov	r3, r0
 8002054:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002056:	e00c      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3320      	adds	r3, #32
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fba6 	bl	80027b0 <RCCEx_PLLSAI2_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002068:	e003      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	74fb      	strb	r3, [r7, #19]
      break;
 800206e:	e000      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002078:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002086:	4973      	ldr	r1, [pc, #460]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800208e:	e001      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d041      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020a8:	d02a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020ae:	d824      	bhi.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020b4:	d008      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ba:	d81e      	bhi.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c4:	d010      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020c6:	e018      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a61      	ldr	r2, [pc, #388]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d4:	e015      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fa73 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 80020e2:	4603      	mov	r3, r0
 80020e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e6:	e00c      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3320      	adds	r3, #32
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fb5e 	bl	80027b0 <RCCEx_PLLSAI2_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f8:	e003      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	74fb      	strb	r3, [r7, #19]
      break;
 80020fe:	e000      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002102:	7cfb      	ldrb	r3, [r7, #19]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002108:	4b52      	ldr	r3, [pc, #328]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002116:	494f      	ldr	r1, [pc, #316]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800211e:	e001      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a0 	beq.w	8002272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	4a40      	ldr	r2, [pc, #256]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	; 0x58
 8002158:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002168:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002174:	f7fe fdf8 	bl	8000d68 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217a:	e009      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217c:	f7fe fdf4 	bl	8000d68 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d902      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	74fb      	strb	r3, [r7, #19]
        break;
 800218e:	e005      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d15c      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01f      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d019      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe fdb3 	bl	8000d68 <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002204:	e00b      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe fdaf 	bl	8000d68 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d902      	bls.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	74fb      	strb	r3, [r7, #19]
            break;
 800221c:	e006      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ec      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002242:	4904      	ldr	r1, [pc, #16]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800224a:	e009      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
 8002250:	e006      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002260:	7c7b      	ldrb	r3, [r7, #17]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b9e      	ldr	r3, [pc, #632]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	4a9d      	ldr	r2, [pc, #628]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227e:	4b98      	ldr	r3, [pc, #608]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f023 0203 	bic.w	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228c:	4994      	ldr	r1, [pc, #592]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022a0:	4b8f      	ldr	r3, [pc, #572]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 020c 	bic.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	498c      	ldr	r1, [pc, #560]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022c2:	4b87      	ldr	r3, [pc, #540]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4983      	ldr	r1, [pc, #524]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022e4:	4b7e      	ldr	r3, [pc, #504]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	497b      	ldr	r1, [pc, #492]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002314:	4972      	ldr	r1, [pc, #456]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002328:	4b6d      	ldr	r3, [pc, #436]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	496a      	ldr	r1, [pc, #424]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800234a:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	4961      	ldr	r1, [pc, #388]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800236c:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	4959      	ldr	r1, [pc, #356]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238e:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239c:	4950      	ldr	r1, [pc, #320]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b0:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	4948      	ldr	r1, [pc, #288]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	493f      	ldr	r1, [pc, #252]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d028      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023f4:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	4937      	ldr	r1, [pc, #220]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002412:	d106      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002414:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a31      	ldr	r2, [pc, #196]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241e:	60d3      	str	r3, [r2, #12]
 8002420:	e011      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800242a:	d10c      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	2101      	movs	r1, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f8c8 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d028      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	491f      	ldr	r1, [pc, #124]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002470:	d106      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247c:	60d3      	str	r3, [r2, #12]
 800247e:	e011      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3304      	adds	r3, #4
 800248e:	2101      	movs	r1, #1
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f899 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 8002496:	4603      	mov	r3, r0
 8002498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02b      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ce:	d109      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a02      	ldr	r2, [pc, #8]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024da:	60d3      	str	r3, [r2, #12]
 80024dc:	e014      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2101      	movs	r1, #1
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f867 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d02f      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002522:	4928      	ldr	r1, [pc, #160]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002532:	d10d      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	2102      	movs	r1, #2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f844 	bl	80025c8 <RCCEx_PLLSAI1_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d014      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	74bb      	strb	r3, [r7, #18]
 800254e:	e011      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3320      	adds	r3, #32
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f925 	bl	80027b0 <RCCEx_PLLSAI2_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258e:	490d      	ldr	r1, [pc, #52]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b2:	4904      	ldr	r1, [pc, #16]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000

080025c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025d6:	4b75      	ldr	r3, [pc, #468]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
       ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025fa:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
       ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d047      	beq.n	800269e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e044      	b.n	800269e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d018      	beq.n	800264e <RCCEx_PLLSAI1_Config+0x86>
 800261c:	2b03      	cmp	r3, #3
 800261e:	d825      	bhi.n	800266c <RCCEx_PLLSAI1_Config+0xa4>
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x62>
 8002624:	2b02      	cmp	r3, #2
 8002626:	d009      	beq.n	800263c <RCCEx_PLLSAI1_Config+0x74>
 8002628:	e020      	b.n	800266c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800262a:	4b60      	ldr	r3, [pc, #384]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11d      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263a:	e01a      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800263c:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d116      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e013      	b.n	8002676 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800264e:	4b57      	ldr	r3, [pc, #348]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800265a:	4b54      	ldr	r3, [pc, #336]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800266a:	e006      	b.n	800267a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e004      	b.n	800267c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800267a:	bf00      	nop
    }

    if(status == HAL_OK)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	430b      	orrs	r3, r1
 8002698:	4944      	ldr	r1, [pc, #272]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d17d      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a40      	ldr	r2, [pc, #256]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fb5a 	bl	8000d68 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026b6:	e009      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b8:	f7fe fb56 	bl	8000d68 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ca:	e005      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ef      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d160      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d111      	bne.n	8002708 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6892      	ldr	r2, [r2, #8]
 80026f4:	0211      	lsls	r1, r2, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	0912      	lsrs	r2, r2, #4
 80026fc:	0452      	lsls	r2, r2, #17
 80026fe:	430a      	orrs	r2, r1
 8002700:	492a      	ldr	r1, [pc, #168]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
 8002706:	e027      	b.n	8002758 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d112      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6892      	ldr	r2, [r2, #8]
 800271e:	0211      	lsls	r1, r2, #8
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6912      	ldr	r2, [r2, #16]
 8002724:	0852      	lsrs	r2, r2, #1
 8002726:	3a01      	subs	r2, #1
 8002728:	0552      	lsls	r2, r2, #21
 800272a:	430a      	orrs	r2, r1
 800272c:	491f      	ldr	r1, [pc, #124]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	610b      	str	r3, [r1, #16]
 8002732:	e011      	b.n	8002758 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002734:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800273c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6892      	ldr	r2, [r2, #8]
 8002744:	0211      	lsls	r1, r2, #8
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6952      	ldr	r2, [r2, #20]
 800274a:	0852      	lsrs	r2, r2, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	0652      	lsls	r2, r2, #25
 8002750:	430a      	orrs	r2, r1
 8002752:	4916      	ldr	r1, [pc, #88]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a13      	ldr	r2, [pc, #76]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fb00 	bl	8000d68 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800276a:	e009      	b.n	8002780 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800276c:	f7fe fafc 	bl	8000d68 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d902      	bls.n	8002780 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	73fb      	strb	r3, [r7, #15]
          break;
 800277e:	e005      	b.n	800278c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ef      	beq.n	800276c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	4904      	ldr	r1, [pc, #16]	; (80027ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000

080027b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d018      	beq.n	80027fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027ca:	4b67      	ldr	r3, [pc, #412]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0203 	and.w	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d10d      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
       ||
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
       ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d047      	beq.n	8002886 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e044      	b.n	8002886 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d018      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0x86>
 8002804:	2b03      	cmp	r3, #3
 8002806:	d825      	bhi.n	8002854 <RCCEx_PLLSAI2_Config+0xa4>
 8002808:	2b01      	cmp	r3, #1
 800280a:	d002      	beq.n	8002812 <RCCEx_PLLSAI2_Config+0x62>
 800280c:	2b02      	cmp	r3, #2
 800280e:	d009      	beq.n	8002824 <RCCEx_PLLSAI2_Config+0x74>
 8002810:	e020      	b.n	8002854 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002812:	4b55      	ldr	r3, [pc, #340]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11d      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002822:	e01a      	b.n	800285a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d116      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002834:	e013      	b.n	800285e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002852:	e006      	b.n	8002862 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e004      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285a:	bf00      	nop
 800285c:	e002      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002862:	bf00      	nop
    }

    if(status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	430b      	orrs	r3, r1
 8002880:	4939      	ldr	r1, [pc, #228]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d167      	bne.n	800295c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800288c:	4b36      	ldr	r3, [pc, #216]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a35      	ldr	r2, [pc, #212]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002898:	f7fe fa66 	bl	8000d68 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800289e:	e009      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028a0:	f7fe fa62 	bl	8000d68 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d902      	bls.n	80028b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	73fb      	strb	r3, [r7, #15]
        break;
 80028b2:	e005      	b.n	80028c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028b4:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ef      	bne.n	80028a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d14a      	bne.n	800295c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	0211      	lsls	r1, r2, #8
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d2      	ldr	r2, [r2, #12]
 80028e2:	0912      	lsrs	r2, r2, #4
 80028e4:	0452      	lsls	r2, r2, #17
 80028e6:	430a      	orrs	r2, r1
 80028e8:	491f      	ldr	r1, [pc, #124]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	614b      	str	r3, [r1, #20]
 80028ee:	e011      	b.n	8002914 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6892      	ldr	r2, [r2, #8]
 8002900:	0211      	lsls	r1, r2, #8
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6912      	ldr	r2, [r2, #16]
 8002906:	0852      	lsrs	r2, r2, #1
 8002908:	3a01      	subs	r2, #1
 800290a:	0652      	lsls	r2, r2, #25
 800290c:	430a      	orrs	r2, r1
 800290e:	4916      	ldr	r1, [pc, #88]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fa22 	bl	8000d68 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002926:	e009      	b.n	800293c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002928:	f7fe fa1e 	bl	8000d68 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	73fb      	strb	r3, [r7, #15]
          break;
 800293a:	e005      	b.n	8002948 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ef      	beq.n	8002928 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4904      	ldr	r1, [pc, #16]	; (8002968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002958:	4313      	orrs	r3, r2
 800295a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e049      	b.n	8002a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f841 	bl	8002a1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 f9f8 	bl	8002da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e04f      	b.n	8002ae8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x76>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d018      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x76>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x76>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d00e      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x76>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x76>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x76>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d115      	bne.n	8002ad2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d015      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0xb4>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	d011      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad0:	e008      	b.n	8002ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e000      	b.n	8002ae6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	40000c00 	.word	0x40000c00
 8002b04:	40013400 	.word	0x40013400
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	00010007 	.word	0x00010007

08002b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f905 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8f7 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f908 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0204 	mvn.w	r2, #4
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8db 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8cd 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8de 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0208 	mvn.w	r2, #8
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8b1 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8a3 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8b4 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0210 	mvn.w	r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f887 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f879 	bl	8002d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f88a 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0201 	mvn.w	r2, #1
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd fe32 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f914 	bl	8002ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d10e      	bne.n	8002cee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d107      	bne.n	8002cee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f907 	bl	8002efc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf8:	2b40      	cmp	r3, #64	; 0x40
 8002cfa:	d10e      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b40      	cmp	r3, #64	; 0x40
 8002d08:	d107      	bne.n	8002d1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f838 	bl	8002d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d10e      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0220 	mvn.w	r2, #32
 8002d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8c7 	bl	8002ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d00f      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3d      	ldr	r2, [pc, #244]	; (8002eb8 <TIM_Base_SetConfig+0x118>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00b      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3c      	ldr	r2, [pc, #240]	; (8002ebc <TIM_Base_SetConfig+0x11c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3b      	ldr	r2, [pc, #236]	; (8002ec0 <TIM_Base_SetConfig+0x120>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01f      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d01b      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <TIM_Base_SetConfig+0x118>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d017      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <TIM_Base_SetConfig+0x11c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <TIM_Base_SetConfig+0x120>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00f      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a28      	ldr	r2, [pc, #160]	; (8002ec8 <TIM_Base_SetConfig+0x128>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <TIM_Base_SetConfig+0x12c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_Base_SetConfig+0x9a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <TIM_Base_SetConfig+0x130>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <TIM_Base_SetConfig+0x114>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00f      	beq.n	8002e98 <TIM_Base_SetConfig+0xf8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <TIM_Base_SetConfig+0x124>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00b      	beq.n	8002e98 <TIM_Base_SetConfig+0xf8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <TIM_Base_SetConfig+0x128>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <TIM_Base_SetConfig+0xf8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <TIM_Base_SetConfig+0x12c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0xf8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <TIM_Base_SetConfig+0x130>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	615a      	str	r2, [r3, #20]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40013400 	.word	0x40013400
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40014800 	.word	0x40014800

08002ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e040      	b.n	8002fa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fd1c 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	; 0x24
 8002f3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f82c 	bl	8002fac <UART_SetConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e022      	b.n	8002fa4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fad8 	bl	800351c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb5f 	bl	8003660 <UART_CheckIdleState>
 8002fa2:	4603      	mov	r3, r0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b08a      	sub	sp, #40	; 0x28
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4ba4      	ldr	r3, [pc, #656]	; (800326c <UART_SetConfig+0x2c0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a99      	ldr	r2, [pc, #612]	; (8003270 <UART_SetConfig+0x2c4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4313      	orrs	r3, r2
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a90      	ldr	r2, [pc, #576]	; (8003274 <UART_SetConfig+0x2c8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d126      	bne.n	8003084 <UART_SetConfig+0xd8>
 8003036:	4b90      	ldr	r3, [pc, #576]	; (8003278 <UART_SetConfig+0x2cc>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b03      	cmp	r3, #3
 8003042:	d81b      	bhi.n	800307c <UART_SetConfig+0xd0>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0xa0>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306d 	.word	0x0800306d
 8003054:	08003065 	.word	0x08003065
 8003058:	08003075 	.word	0x08003075
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e116      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003064:	2302      	movs	r3, #2
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e112      	b.n	8003292 <UART_SetConfig+0x2e6>
 800306c:	2304      	movs	r3, #4
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e10e      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003074:	2308      	movs	r3, #8
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e10a      	b.n	8003292 <UART_SetConfig+0x2e6>
 800307c:	2310      	movs	r3, #16
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e106      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a7c      	ldr	r2, [pc, #496]	; (800327c <UART_SetConfig+0x2d0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d138      	bne.n	8003100 <UART_SetConfig+0x154>
 800308e:	4b7a      	ldr	r3, [pc, #488]	; (8003278 <UART_SetConfig+0x2cc>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d82d      	bhi.n	80030f8 <UART_SetConfig+0x14c>
 800309c:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <UART_SetConfig+0xf8>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080030f9 	.word	0x080030f9
 80030ac:	080030f9 	.word	0x080030f9
 80030b0:	080030f9 	.word	0x080030f9
 80030b4:	080030e9 	.word	0x080030e9
 80030b8:	080030f9 	.word	0x080030f9
 80030bc:	080030f9 	.word	0x080030f9
 80030c0:	080030f9 	.word	0x080030f9
 80030c4:	080030e1 	.word	0x080030e1
 80030c8:	080030f9 	.word	0x080030f9
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	080030f1 	.word	0x080030f1
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e0d8      	b.n	8003292 <UART_SetConfig+0x2e6>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e0d4      	b.n	8003292 <UART_SetConfig+0x2e6>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e0d0      	b.n	8003292 <UART_SetConfig+0x2e6>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e0cc      	b.n	8003292 <UART_SetConfig+0x2e6>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e0c8      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <UART_SetConfig+0x2d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d125      	bne.n	8003156 <UART_SetConfig+0x1aa>
 800310a:	4b5b      	ldr	r3, [pc, #364]	; (8003278 <UART_SetConfig+0x2cc>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d016      	beq.n	8003146 <UART_SetConfig+0x19a>
 8003118:	2b30      	cmp	r3, #48	; 0x30
 800311a:	d818      	bhi.n	800314e <UART_SetConfig+0x1a2>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d00a      	beq.n	8003136 <UART_SetConfig+0x18a>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d814      	bhi.n	800314e <UART_SetConfig+0x1a2>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <UART_SetConfig+0x182>
 8003128:	2b10      	cmp	r3, #16
 800312a:	d008      	beq.n	800313e <UART_SetConfig+0x192>
 800312c:	e00f      	b.n	800314e <UART_SetConfig+0x1a2>
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003134:	e0ad      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003136:	2302      	movs	r3, #2
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313c:	e0a9      	b.n	8003292 <UART_SetConfig+0x2e6>
 800313e:	2304      	movs	r3, #4
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003144:	e0a5      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003146:	2308      	movs	r3, #8
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314c:	e0a1      	b.n	8003292 <UART_SetConfig+0x2e6>
 800314e:	2310      	movs	r3, #16
 8003150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003154:	e09d      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <UART_SetConfig+0x2d8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d125      	bne.n	80031ac <UART_SetConfig+0x200>
 8003160:	4b45      	ldr	r3, [pc, #276]	; (8003278 <UART_SetConfig+0x2cc>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800316a:	2bc0      	cmp	r3, #192	; 0xc0
 800316c:	d016      	beq.n	800319c <UART_SetConfig+0x1f0>
 800316e:	2bc0      	cmp	r3, #192	; 0xc0
 8003170:	d818      	bhi.n	80031a4 <UART_SetConfig+0x1f8>
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d00a      	beq.n	800318c <UART_SetConfig+0x1e0>
 8003176:	2b80      	cmp	r3, #128	; 0x80
 8003178:	d814      	bhi.n	80031a4 <UART_SetConfig+0x1f8>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <UART_SetConfig+0x1d8>
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d008      	beq.n	8003194 <UART_SetConfig+0x1e8>
 8003182:	e00f      	b.n	80031a4 <UART_SetConfig+0x1f8>
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318a:	e082      	b.n	8003292 <UART_SetConfig+0x2e6>
 800318c:	2302      	movs	r3, #2
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e07e      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003194:	2304      	movs	r3, #4
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e07a      	b.n	8003292 <UART_SetConfig+0x2e6>
 800319c:	2308      	movs	r3, #8
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e076      	b.n	8003292 <UART_SetConfig+0x2e6>
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e072      	b.n	8003292 <UART_SetConfig+0x2e6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a35      	ldr	r2, [pc, #212]	; (8003288 <UART_SetConfig+0x2dc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d12a      	bne.n	800320c <UART_SetConfig+0x260>
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <UART_SetConfig+0x2cc>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c4:	d01a      	beq.n	80031fc <UART_SetConfig+0x250>
 80031c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ca:	d81b      	bhi.n	8003204 <UART_SetConfig+0x258>
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d0:	d00c      	beq.n	80031ec <UART_SetConfig+0x240>
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d6:	d815      	bhi.n	8003204 <UART_SetConfig+0x258>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <UART_SetConfig+0x238>
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e0:	d008      	beq.n	80031f4 <UART_SetConfig+0x248>
 80031e2:	e00f      	b.n	8003204 <UART_SetConfig+0x258>
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ea:	e052      	b.n	8003292 <UART_SetConfig+0x2e6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e04e      	b.n	8003292 <UART_SetConfig+0x2e6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e04a      	b.n	8003292 <UART_SetConfig+0x2e6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e046      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e042      	b.n	8003292 <UART_SetConfig+0x2e6>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a17      	ldr	r2, [pc, #92]	; (8003270 <UART_SetConfig+0x2c4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d13a      	bne.n	800328c <UART_SetConfig+0x2e0>
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <UART_SetConfig+0x2cc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003224:	d01a      	beq.n	800325c <UART_SetConfig+0x2b0>
 8003226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800322a:	d81b      	bhi.n	8003264 <UART_SetConfig+0x2b8>
 800322c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003230:	d00c      	beq.n	800324c <UART_SetConfig+0x2a0>
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003236:	d815      	bhi.n	8003264 <UART_SetConfig+0x2b8>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <UART_SetConfig+0x298>
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d008      	beq.n	8003254 <UART_SetConfig+0x2a8>
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x2b8>
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e022      	b.n	8003292 <UART_SetConfig+0x2e6>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003252:	e01e      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	e01a      	b.n	8003292 <UART_SetConfig+0x2e6>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e016      	b.n	8003292 <UART_SetConfig+0x2e6>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e012      	b.n	8003292 <UART_SetConfig+0x2e6>
 800326c:	efff69f3 	.word	0xefff69f3
 8003270:	40008000 	.word	0x40008000
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000
 800327c:	40004400 	.word	0x40004400
 8003280:	40004800 	.word	0x40004800
 8003284:	40004c00 	.word	0x40004c00
 8003288:	40005000 	.word	0x40005000
 800328c:	2310      	movs	r3, #16
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a9f      	ldr	r2, [pc, #636]	; (8003514 <UART_SetConfig+0x568>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d17a      	bne.n	8003392 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800329c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d824      	bhi.n	80032ee <UART_SetConfig+0x342>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <UART_SetConfig+0x300>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032df 	.word	0x080032df
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032ef 	.word	0x080032ef
 80032c8:	080032ef 	.word	0x080032ef
 80032cc:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7fe fdd2 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80032d4:	61f8      	str	r0, [r7, #28]
        break;
 80032d6:	e010      	b.n	80032fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <UART_SetConfig+0x56c>)
 80032da:	61fb      	str	r3, [r7, #28]
        break;
 80032dc:	e00d      	b.n	80032fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe fd33 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 80032e2:	61f8      	str	r0, [r7, #28]
        break;
 80032e4:	e009      	b.n	80032fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	61fb      	str	r3, [r7, #28]
        break;
 80032ec:	e005      	b.n	80032fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80fb 	beq.w	80034f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	d305      	bcc.n	800331e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	429a      	cmp	r2, r3
 800331c:	d903      	bls.n	8003326 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003324:	e0e8      	b.n	80034f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2200      	movs	r2, #0
 800332a:	461c      	mov	r4, r3
 800332c:	4615      	mov	r5, r2
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	022b      	lsls	r3, r5, #8
 8003338:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800333c:	0222      	lsls	r2, r4, #8
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6849      	ldr	r1, [r1, #4]
 8003342:	0849      	lsrs	r1, r1, #1
 8003344:	2000      	movs	r0, #0
 8003346:	4688      	mov	r8, r1
 8003348:	4681      	mov	r9, r0
 800334a:	eb12 0a08 	adds.w	sl, r2, r8
 800334e:	eb43 0b09 	adc.w	fp, r3, r9
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003360:	4650      	mov	r0, sl
 8003362:	4659      	mov	r1, fp
 8003364:	f7fc ff7e 	bl	8000264 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003376:	d308      	bcc.n	800338a <UART_SetConfig+0x3de>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337e:	d204      	bcs.n	800338a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	e0b6      	b.n	80034f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003390:	e0b2      	b.n	80034f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339a:	d15e      	bne.n	800345a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800339c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d828      	bhi.n	80033f6 <UART_SetConfig+0x44a>
 80033a4:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x400>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe fd52 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80033d4:	61f8      	str	r0, [r7, #28]
        break;
 80033d6:	e014      	b.n	8003402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe fd64 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 80033dc:	61f8      	str	r0, [r7, #28]
        break;
 80033de:	e010      	b.n	8003402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <UART_SetConfig+0x56c>)
 80033e2:	61fb      	str	r3, [r7, #28]
        break;
 80033e4:	e00d      	b.n	8003402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7fe fcaf 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 80033ea:	61f8      	str	r0, [r7, #28]
        break;
 80033ec:	e009      	b.n	8003402 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033f2:	61fb      	str	r3, [r7, #28]
        break;
 80033f4:	e005      	b.n	8003402 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d077      	beq.n	80034f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005a      	lsls	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	441a      	add	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d916      	bls.n	8003452 <UART_SetConfig+0x4a6>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d212      	bcs.n	8003452 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	b29b      	uxth	r3, r3
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	b29b      	uxth	r3, r3
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	b29a      	uxth	r2, r3
 8003442:	8afb      	ldrh	r3, [r7, #22]
 8003444:	4313      	orrs	r3, r2
 8003446:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	8afa      	ldrh	r2, [r7, #22]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	e052      	b.n	80034f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003458:	e04e      	b.n	80034f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800345a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800345e:	2b08      	cmp	r3, #8
 8003460:	d827      	bhi.n	80034b2 <UART_SetConfig+0x506>
 8003462:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <UART_SetConfig+0x4bc>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	0800348d 	.word	0x0800348d
 800346c:	08003495 	.word	0x08003495
 8003470:	0800349d 	.word	0x0800349d
 8003474:	080034b3 	.word	0x080034b3
 8003478:	080034a3 	.word	0x080034a3
 800347c:	080034b3 	.word	0x080034b3
 8003480:	080034b3 	.word	0x080034b3
 8003484:	080034b3 	.word	0x080034b3
 8003488:	080034ab 	.word	0x080034ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800348c:	f7fe fcf4 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 8003490:	61f8      	str	r0, [r7, #28]
        break;
 8003492:	e014      	b.n	80034be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7fe fd06 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 8003498:	61f8      	str	r0, [r7, #28]
        break;
 800349a:	e010      	b.n	80034be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800349c:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <UART_SetConfig+0x56c>)
 800349e:	61fb      	str	r3, [r7, #28]
        break;
 80034a0:	e00d      	b.n	80034be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a2:	f7fe fc51 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 80034a6:	61f8      	str	r0, [r7, #28]
        break;
 80034a8:	e009      	b.n	80034be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	61fb      	str	r3, [r7, #28]
        break;
 80034b0:	e005      	b.n	80034be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034bc:	bf00      	nop
    }

    if (pclk != 0U)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d019      	beq.n	80034f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	085a      	lsrs	r2, r3, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	441a      	add	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	d909      	bls.n	80034f2 <UART_SetConfig+0x546>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e4:	d205      	bcs.n	80034f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e002      	b.n	80034f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003504:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40008000 	.word	0x40008000
 8003518:	00f42400 	.word	0x00f42400

0800351c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01a      	beq.n	8003632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361a:	d10a      	bne.n	8003632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003670:	f7fd fb7a 	bl	8000d68 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b08      	cmp	r3, #8
 8003682:	d10e      	bne.n	80036a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f82d 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e023      	b.n	80036ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d10e      	bne.n	80036ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f817 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00d      	b.n	80036ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b09c      	sub	sp, #112	; 0x70
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	e0a5      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	f000 80a1 	beq.w	8003850 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fd fb2b 	bl	8000d68 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <UART_WaitOnFlagUntilTimeout+0x32>
 800371e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003720:	2b00      	cmp	r3, #0
 8003722:	d13e      	bne.n	80037a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003738:	667b      	str	r3, [r7, #100]	; 0x64
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003744:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e6      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	663b      	str	r3, [r7, #96]	; 0x60
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3308      	adds	r3, #8
 8003774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003776:	64ba      	str	r2, [r7, #72]	; 0x48
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800377c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e067      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d04f      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037be:	d147      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e6      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	613b      	str	r3, [r7, #16]
   return(result);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	66bb      	str	r3, [r7, #104]	; 0x68
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800381c:	623a      	str	r2, [r7, #32]
 800381e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	69f9      	ldr	r1, [r7, #28]
 8003822:	6a3a      	ldr	r2, [r7, #32]
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	61bb      	str	r3, [r7, #24]
   return(result);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e010      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	429a      	cmp	r2, r3
 800386c:	f43f af4a 	beq.w	8003704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3770      	adds	r7, #112	; 0x70
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f103 0208 	add.w	r2, r3, #8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f103 0208 	add.w	r2, r3, #8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f103 0208 	add.w	r2, r3, #8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d103      	bne.n	800393c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e00c      	b.n	8003956 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3308      	adds	r3, #8
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e002      	b.n	800394a <vListInsert+0x2e>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d2f6      	bcs.n	8003944 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6852      	ldr	r2, [r2, #4]
 80039ae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d103      	bne.n	80039c2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xQueueGenericReset+0x2a>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60bb      	str	r3, [r7, #8]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003a0e:	f001 fd71 	bl	80054f4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	441a      	add	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	441a      	add	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	22ff      	movs	r2, #255	; 0xff
 8003a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	22ff      	movs	r2, #255	; 0xff
 8003a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d114      	bne.n	8003a8e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01a      	beq.n	8003aa2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f80f 	bl	8004a94 <xTaskRemoveFromEventList>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <xQueueGenericReset+0xcc>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	e009      	b.n	8003aa2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3310      	adds	r3, #16
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fef1 	bl	800387a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff feec 	bl	800387a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003aa2:	f001 fd57 	bl	8005554 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003aa6:	2301      	movs	r3, #1
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xQueueGenericCreate+0x2a>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61bb      	str	r3, [r7, #24]
    }
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <xQueueGenericCreate+0x48>
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d101      	bne.n	8003b00 <xQueueGenericCreate+0x4c>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <xQueueGenericCreate+0x4e>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <xQueueGenericCreate+0x68>
        __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	617b      	str	r3, [r7, #20]
    }
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003b22:	d90a      	bls.n	8003b3a <xQueueGenericCreate+0x86>
        __asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	613b      	str	r3, [r7, #16]
    }
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	3350      	adds	r3, #80	; 0x50
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fdfc 	bl	800573c <pvPortMalloc>
 8003b44:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3350      	adds	r3, #80	; 0x50
 8003b54:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b56:	79fa      	ldrb	r2, [r7, #7]
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f805 	bl	8003b72 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003b68:	6a3b      	ldr	r3, [r7, #32]
    }
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e002      	b.n	8003b94 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	69b8      	ldr	r0, [r7, #24]
 8003ba4:	f7ff ff1e 	bl	80039e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	2073      	movs	r0, #115	; 0x73
 8003bb8:	f002 fdf4 	bl	80067a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00e      	beq.n	8003bf0 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003be4:	2300      	movs	r3, #0
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f81c 	bl	8003c28 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c02:	2301      	movs	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6939      	ldr	r1, [r7, #16]
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f7ff ff4f 	bl	8003ab4 <xQueueGenericCreate>
 8003c16:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ffd3 	bl	8003bc4 <prvInitialiseMutex>

        return xNewQueue;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08e      	sub	sp, #56	; 0x38
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <xQueueGenericSend+0x32>
        __asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	623b      	str	r3, [r7, #32]
    }
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <xQueueGenericSend+0x40>
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <xQueueGenericSend+0x44>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <xQueueGenericSend+0x46>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <xQueueGenericSend+0x60>
        __asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	61fb      	str	r3, [r7, #28]
    }
 8003c84:	bf00      	nop
 8003c86:	e7fe      	b.n	8003c86 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d103      	bne.n	8003c96 <xQueueGenericSend+0x6e>
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <xQueueGenericSend+0x72>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <xQueueGenericSend+0x74>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <xQueueGenericSend+0x8e>
        __asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61bb      	str	r3, [r7, #24]
    }
 8003cb2:	bf00      	nop
 8003cb4:	e7fe      	b.n	8003cb4 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003cb6:	f001 fc1d 	bl	80054f4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <xQueueGenericSend+0xa4>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d136      	bne.n	8003d3a <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 faf4 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4601      	mov	r1, r0
 8003ce0:	205a      	movs	r0, #90	; 0x5a
 8003ce2:	f002 fdd5 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cec:	f000 f9e6 	bl	80040bc <prvCopyDataToQueue>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fec8 	bl	8004a94 <xTaskRemoveFromEventList>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d013      	beq.n	8003d32 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003d0a:	4b4d      	ldr	r3, [pc, #308]	; (8003e40 <xQueueGenericSend+0x218>)
 8003d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	e00a      	b.n	8003d32 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003d22:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <xQueueGenericSend+0x218>)
 8003d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003d32:	f001 fc0f 	bl	8005554 <vPortExitCritical>
                return pdPASS;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07d      	b.n	8003e36 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d110      	bne.n	8003d62 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d40:	f001 fc08 	bl	8005554 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 fab8 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	460b      	mov	r3, r1
 8003d56:	4601      	mov	r1, r0
 8003d58:	205a      	movs	r0, #90	; 0x5a
 8003d5a:	f002 fd99 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e069      	b.n	8003e36 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fef7 	bl	8004b60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d72:	2301      	movs	r3, #1
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d76:	f001 fbed 	bl	8005554 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d7a:	f000 fc81 	bl	8004680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d7e:	f001 fbb9 	bl	80054f4 <vPortEnterCritical>
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d103      	bne.n	8003d98 <xQueueGenericSend+0x170>
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d103      	bne.n	8003dae <xQueueGenericSend+0x186>
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dae:	f001 fbd1 	bl	8005554 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db2:	1d3a      	adds	r2, r7, #4
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fee6 	bl	8004b8c <xTaskCheckForTimeOut>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d124      	bne.n	8003e10 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc8:	f000 fa4a 	bl	8004260 <prvIsQueueFull>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d018      	beq.n	8003e04 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	3310      	adds	r3, #16
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fe36 	bl	8004a4c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de2:	f000 f9d5 	bl	8004190 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003de6:	f000 fc59 	bl	800469c <xTaskResumeAll>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f af62 	bne.w	8003cb6 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <xQueueGenericSend+0x218>)
 8003df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	e758      	b.n	8003cb6 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e06:	f000 f9c3 	bl	8004190 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e0a:	f000 fc47 	bl	800469c <xTaskResumeAll>
 8003e0e:	e752      	b.n	8003cb6 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e12:	f000 f9bd 	bl	8004190 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e16:	f000 fc41 	bl	800469c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 fa4d 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	205a      	movs	r0, #90	; 0x5a
 8003e30:	f002 fd2e 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003e34:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3730      	adds	r7, #48	; 0x30
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b08f      	sub	sp, #60	; 0x3c
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61bb      	str	r3, [r7, #24]
    }
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	617b      	str	r3, [r7, #20]
    }
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e94:	f001 fb2e 	bl	80054f4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d034      	beq.n	8003f0e <xQueueSemaphoreTake+0xca>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 fa08 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003eac:	4604      	mov	r4, r0
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f003 fa04 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	9100      	str	r1, [sp, #0]
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	205c      	movs	r0, #92	; 0x5c
 8003ec0:	f002 fce6 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	1e5a      	subs	r2, r3, #1
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <xQueueSemaphoreTake+0x9a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ed4:	f001 f8d4 	bl	8005080 <pvTaskIncrementMutexHeldCount>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00f      	beq.n	8003f06 <xQueueSemaphoreTake+0xc2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	3310      	adds	r3, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fdd2 	bl	8004a94 <xTaskRemoveFromEventList>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <xQueueSemaphoreTake+0xc2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003ef6:	4b64      	ldr	r3, [pc, #400]	; (8004088 <xQueueSemaphoreTake+0x244>)
 8003ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003f06:	f001 fb25 	bl	8005554 <vPortExitCritical>
                return pdPASS;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0b7      	b.n	800407e <xQueueSemaphoreTake+0x23a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d121      	bne.n	8003f58 <xQueueSemaphoreTake+0x114>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <xQueueSemaphoreTake+0xec>
        __asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	613b      	str	r3, [r7, #16]
    }
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <xQueueSemaphoreTake+0xea>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003f30:	f001 fb10 	bl	8005554 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 f9c0 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f003 f9bc 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8003f44:	4602      	mov	r2, r0
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	9100      	str	r1, [sp, #0]
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	205c      	movs	r0, #92	; 0x5c
 8003f50:	f002 fc9e 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e092      	b.n	800407e <xQueueSemaphoreTake+0x23a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <xQueueSemaphoreTake+0x128>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f5e:	f107 0308 	add.w	r3, r7, #8
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fdfc 	bl	8004b60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003f6c:	f001 faf2 	bl	8005554 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003f70:	f000 fb86 	bl	8004680 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f74:	f001 fabe 	bl	80054f4 <vPortEnterCritical>
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d103      	bne.n	8003f8e <xQueueSemaphoreTake+0x14a>
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f94:	b25b      	sxtb	r3, r3
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d103      	bne.n	8003fa4 <xQueueSemaphoreTake+0x160>
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa4:	f001 fad6 	bl	8005554 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fa8:	463a      	mov	r2, r7
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fdeb 	bl	8004b8c <xTaskCheckForTimeOut>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d132      	bne.n	8004022 <xQueueSemaphoreTake+0x1de>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fbe:	f000 f939 	bl	8004234 <prvIsQueueEmpty>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d026      	beq.n	8004016 <xQueueSemaphoreTake+0x1d2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <xQueueSemaphoreTake+0x1a0>
                        {
                            taskENTER_CRITICAL();
 8003fd0:	f001 fa90 	bl	80054f4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 febf 	bl	8004d5c <xTaskPriorityInherit>
 8003fde:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 8003fe0:	f001 fab8 	bl	8005554 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	3324      	adds	r3, #36	; 0x24
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fd2d 	bl	8004a4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff4:	f000 f8cc 	bl	8004190 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ff8:	f000 fb50 	bl	800469c <xTaskResumeAll>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f47f af48 	bne.w	8003e94 <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8004004:	4b20      	ldr	r3, [pc, #128]	; (8004088 <xQueueSemaphoreTake+0x244>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	e73e      	b.n	8003e94 <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004018:	f000 f8ba 	bl	8004190 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800401c:	f000 fb3e 	bl	800469c <xTaskResumeAll>
 8004020:	e738      	b.n	8003e94 <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004024:	f000 f8b4 	bl	8004190 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004028:	f000 fb38 	bl	800469c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800402c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800402e:	f000 f901 	bl	8004234 <prvIsQueueEmpty>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f43f af2d 	beq.w	8003e94 <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <xQueueSemaphoreTake+0x218>
                        {
                            taskENTER_CRITICAL();
 8004040:	f001 fa58 	bl	80054f4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004046:	f000 f821 	bl	800408c <prvGetDisinheritPriorityAfterTimeout>
 800404a:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	69f9      	ldr	r1, [r7, #28]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ff7c 	bl	8004f50 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8004058:	f001 fa7c 	bl	8005554 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	4618      	mov	r0, r3
 8004060:	f003 f92c 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 8004064:	4604      	mov	r4, r0
 8004066:	2000      	movs	r0, #0
 8004068:	f003 f928 	bl	80072bc <SEGGER_SYSVIEW_ShrinkId>
 800406c:	4602      	mov	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	9100      	str	r1, [sp, #0]
 8004074:	4621      	mov	r1, r4
 8004076:	205c      	movs	r0, #92	; 0x5c
 8004078:	f002 fc0a 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800407c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800407e:	4618      	mov	r0, r3
 8004080:	3734      	adds	r7, #52	; 0x34
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}
 8004086:	bf00      	nop
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1c3 0305 	rsb	r3, r3, #5
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e001      	b.n	80040ae <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80040ae:	68fb      	ldr	r3, [r7, #12]
    }
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d14d      	bne.n	800417e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 feb2 	bl	8004e50 <xTaskPriorityDisinherit>
 80040ec:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	e043      	b.n	800417e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d119      	bne.n	8004130 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6858      	ldr	r0, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	461a      	mov	r2, r3
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	f003 fa54 	bl	80075b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d32b      	bcc.n	800417e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	e026      	b.n	800417e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68d8      	ldr	r0, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	461a      	mov	r2, r3
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	f003 fa3a 	bl	80075b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	425b      	negs	r3, r3
 800414a:	441a      	add	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	425b      	negs	r3, r3
 8004166:	441a      	add	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d105      	bne.n	800417e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3b01      	subs	r3, #1
 800417c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004186:	697b      	ldr	r3, [r7, #20]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004198:	f001 f9ac 	bl	80054f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a4:	e011      	b.n	80041ca <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fc6e 	bl	8004a94 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80041be:	f000 fd4b 	bl	8004c58 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dce9      	bgt.n	80041a6 <prvUnlockQueue+0x16>
 80041d2:	e000      	b.n	80041d6 <prvUnlockQueue+0x46>
                        break;
 80041d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	22ff      	movs	r2, #255	; 0xff
 80041da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80041de:	f001 f9b9 	bl	8005554 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80041e2:	f001 f987 	bl	80054f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ee:	e011      	b.n	8004214 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3310      	adds	r3, #16
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fc49 	bl	8004a94 <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004208:	f000 fd26 	bl	8004c58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	3b01      	subs	r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004218:	2b00      	cmp	r3, #0
 800421a:	dce9      	bgt.n	80041f0 <prvUnlockQueue+0x60>
 800421c:	e000      	b.n	8004220 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800421e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	22ff      	movs	r2, #255	; 0xff
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004228:	f001 f994 	bl	8005554 <vPortExitCritical>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800423c:	f001 f95a 	bl	80054f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e001      	b.n	8004252 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004252:	f001 f97f 	bl	8005554 <vPortExitCritical>

    return xReturn;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004268:	f001 f944 	bl	80054f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	429a      	cmp	r2, r3
 8004276:	d102      	bne.n	800427e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e001      	b.n	8004282 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004282:	f001 f967 	bl	8005554 <vPortExitCritical>

    return xReturn;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	; 0x30
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 fa49 	bl	800573c <pvPortMalloc>
 80042aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00e      	beq.n	80042d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042b2:	2058      	movs	r0, #88	; 0x58
 80042b4:	f001 fa42 	bl	800573c <pvPortMalloc>
 80042b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
 80042c6:	e005      	b.n	80042d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80042c8:	6978      	ldr	r0, [r7, #20]
 80042ca:	f001 fb17 	bl	80058fc <vPortFree>
 80042ce:	e001      	b.n	80042d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	2300      	movs	r3, #0
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f80e 	bl	8004312 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80042f6:	69f8      	ldr	r0, [r7, #28]
 80042f8:	f000 f8a2 	bl	8004440 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e002      	b.n	8004308 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004308:	69bb      	ldr	r3, [r7, #24]
    }
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b088      	sub	sp, #32
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	461a      	mov	r2, r3
 800432a:	21a5      	movs	r1, #165	; 0xa5
 800432c:	f003 f950 	bl	80075d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800433a:	3b01      	subs	r3, #1
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f023 0307 	bic.w	r3, r3, #7
 8004348:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <prvInitialiseNewTask+0x58>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	617b      	str	r3, [r7, #20]
    }
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01f      	beq.n	80043b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e012      	b.n	800439c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	7819      	ldrb	r1, [r3, #0]
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	3334      	adds	r3, #52	; 0x34
 8004386:	460a      	mov	r2, r1
 8004388:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3301      	adds	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b09      	cmp	r3, #9
 80043a0:	d9e9      	bls.n	8004376 <prvInitialiseNewTask+0x64>
 80043a2:	e000      	b.n	80043a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80043a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043ae:	e003      	b.n	80043b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d901      	bls.n	80043c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043be:	2304      	movs	r3, #4
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	2200      	movs	r2, #0
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	3304      	adds	r3, #4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fa6e 	bl	80038ba <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	3318      	adds	r3, #24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fa69 	bl	80038ba <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	f1c3 0205 	rsb	r2, r3, #5
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	3350      	adds	r3, #80	; 0x50
 8004402:	2204      	movs	r2, #4
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f003 f8e2 	bl	80075d0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	3354      	adds	r3, #84	; 0x54
 8004410:	2201      	movs	r2, #1
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f003 f8db 	bl	80075d0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	68f9      	ldr	r1, [r7, #12]
 800441e:	69b8      	ldr	r0, [r7, #24]
 8004420:	f000 feba 	bl	8005198 <pxPortInitialiseStack>
 8004424:	4602      	mov	r2, r0
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004434:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004436:	bf00      	nop
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af02      	add	r7, sp, #8
 8004446:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004448:	f001 f854 	bl	80054f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <prvAddNewTaskToReadyList+0xfc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <prvAddNewTaskToReadyList+0xfc>)
 8004454:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <prvAddNewTaskToReadyList+0x100>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800445e:	4a38      	ldr	r2, [pc, #224]	; (8004540 <prvAddNewTaskToReadyList+0x100>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004464:	4b35      	ldr	r3, [pc, #212]	; (800453c <prvAddNewTaskToReadyList+0xfc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d110      	bne.n	800448e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800446c:	f000 fc18 	bl	8004ca0 <prvInitialiseTaskLists>
 8004470:	e00d      	b.n	800448e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004472:	4b34      	ldr	r3, [pc, #208]	; (8004544 <prvAddNewTaskToReadyList+0x104>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <prvAddNewTaskToReadyList+0x100>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d802      	bhi.n	800448e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004488:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <prvAddNewTaskToReadyList+0x100>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <prvAddNewTaskToReadyList+0x108>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <prvAddNewTaskToReadyList+0x108>)
 8004496:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <prvAddNewTaskToReadyList+0x108>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <prvAddNewTaskToReadyList+0x94>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 fde1 	bl	8007070 <SEGGER_SYSVIEW_OnTaskCreate>
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	461d      	mov	r5, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461c      	mov	r4, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	1ae3      	subs	r3, r4, r3
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	462b      	mov	r3, r5
 80044d0:	f001 fbe0 	bl	8005c94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f002 fe4e 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <prvAddNewTaskToReadyList+0x10c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <prvAddNewTaskToReadyList+0x10c>)
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <prvAddNewTaskToReadyList+0x110>)
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7ff f9e5 	bl	80038d4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800450a:	f001 f823 	bl	8005554 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <prvAddNewTaskToReadyList+0x104>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <prvAddNewTaskToReadyList+0x100>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d207      	bcs.n	8004534 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <prvAddNewTaskToReadyList+0x114>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bdb0      	pop	{r4, r5, r7, pc}
 800453c:	20000244 	.word	0x20000244
 8004540:	20000184 	.word	0x20000184
 8004544:	20000250 	.word	0x20000250
 8004548:	20000260 	.word	0x20000260
 800454c:	2000024c 	.word	0x2000024c
 8004550:	20000188 	.word	0x20000188
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01b      	beq.n	80045a2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <vTaskDelay+0x68>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <vTaskDelay+0x30>
        __asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
    }
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004588:	f000 f87a 	bl	8004680 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	2023      	movs	r0, #35	; 0x23
 8004590:	f002 f872 	bl	8006678 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004594:	2100      	movs	r1, #0
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fd86 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800459c:	f000 f87e 	bl	800469c <xTaskResumeAll>
 80045a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <vTaskDelay+0x6c>)
 80045aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	2000026c 	.word	0x2000026c
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <vTaskStartScheduler+0x98>)
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2300      	movs	r3, #0
 80045d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045dc:	4921      	ldr	r1, [pc, #132]	; (8004664 <vTaskStartScheduler+0x9c>)
 80045de:	4822      	ldr	r0, [pc, #136]	; (8004668 <vTaskStartScheduler+0xa0>)
 80045e0:	f7ff fe56 	bl	8004290 <xTaskCreate>
 80045e4:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d124      	bne.n	8004636 <vTaskStartScheduler+0x6e>
        __asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
    }
 80045fe:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004600:	4b1a      	ldr	r3, [pc, #104]	; (800466c <vTaskStartScheduler+0xa4>)
 8004602:	f04f 32ff 	mov.w	r2, #4294967295
 8004606:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <vTaskStartScheduler+0xa8>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <vTaskStartScheduler+0xac>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <vTaskStartScheduler+0xb0>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <vTaskStartScheduler+0x98>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d102      	bne.n	8004626 <vTaskStartScheduler+0x5e>
 8004620:	f002 fd0a 	bl	8007038 <SEGGER_SYSVIEW_OnIdle>
 8004624:	e004      	b.n	8004630 <vTaskStartScheduler+0x68>
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <vTaskStartScheduler+0xb0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f002 fd62 	bl	80070f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004630:	f000 fe40 	bl	80052b4 <xPortStartScheduler>
 8004634:	e00e      	b.n	8004654 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d10a      	bne.n	8004654 <vTaskStartScheduler+0x8c>
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
    }
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <vTaskStartScheduler+0xb4>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000268 	.word	0x20000268
 8004664:	08008038 	.word	0x08008038
 8004668:	08004c71 	.word	0x08004c71
 800466c:	20000264 	.word	0x20000264
 8004670:	20000250 	.word	0x20000250
 8004674:	20000248 	.word	0x20000248
 8004678:	20000184 	.word	0x20000184
 800467c:	2000000c 	.word	0x2000000c

08004680 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <vTaskSuspendAll+0x18>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	4a03      	ldr	r2, [pc, #12]	; (8004698 <vTaskSuspendAll+0x18>)
 800468c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	2000026c 	.word	0x2000026c

0800469c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80046aa:	4b43      	ldr	r3, [pc, #268]	; (80047b8 <xTaskResumeAll+0x11c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	603b      	str	r3, [r7, #0]
    }
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80046c8:	f000 ff14 	bl	80054f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80046cc:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <xTaskResumeAll+0x11c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	4a39      	ldr	r2, [pc, #228]	; (80047b8 <xTaskResumeAll+0x11c>)
 80046d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d6:	4b38      	ldr	r3, [pc, #224]	; (80047b8 <xTaskResumeAll+0x11c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d165      	bne.n	80047aa <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <xTaskResumeAll+0x120>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d061      	beq.n	80047aa <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e6:	e032      	b.n	800474e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <xTaskResumeAll+0x124>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3318      	adds	r3, #24
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f94a 	bl	800398e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff f945 	bl	800398e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	f002 fd36 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	2201      	movs	r2, #1
 8004712:	409a      	lsls	r2, r3
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <xTaskResumeAll+0x128>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <xTaskResumeAll+0x128>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <xTaskResumeAll+0x12c>)
 800472c:	441a      	add	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3304      	adds	r3, #4
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7ff f8cd 	bl	80038d4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <xTaskResumeAll+0x130>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	429a      	cmp	r2, r3
 8004746:	d302      	bcc.n	800474e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8004748:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <xTaskResumeAll+0x134>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <xTaskResumeAll+0x124>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1c8      	bne.n	80046e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800475c:	f000 fae2 	bl	8004d24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <xTaskResumeAll+0x138>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d010      	beq.n	800478e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800476c:	f000 f848 	bl	8004800 <xTaskIncrementTick>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <xTaskResumeAll+0x134>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f1      	bne.n	800476c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8004788:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <xTaskResumeAll+0x138>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <xTaskResumeAll+0x134>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004796:	2301      	movs	r3, #1
 8004798:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800479a:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <xTaskResumeAll+0x13c>)
 800479c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80047aa:	f000 fed3 	bl	8005554 <vPortExitCritical>

    return xAlreadyYielded;
 80047ae:	68bb      	ldr	r3, [r7, #8]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	2000026c 	.word	0x2000026c
 80047bc:	20000244 	.word	0x20000244
 80047c0:	2000021c 	.word	0x2000021c
 80047c4:	2000024c 	.word	0x2000024c
 80047c8:	20000188 	.word	0x20000188
 80047cc:	20000184 	.word	0x20000184
 80047d0:	20000258 	.word	0x20000258
 80047d4:	20000254 	.word	0x20000254
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047e2:	f000 ff6b 	bl	80056bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <xTaskGetTickCountFromISR+0x20>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80047f0:	683b      	ldr	r3, [r7, #0]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000248 	.word	0x20000248

08004800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800480a:	4b50      	ldr	r3, [pc, #320]	; (800494c <xTaskIncrementTick+0x14c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 8092 	bne.w	8004938 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004814:	4b4e      	ldr	r3, [pc, #312]	; (8004950 <xTaskIncrementTick+0x150>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800481c:	4a4c      	ldr	r2, [pc, #304]	; (8004950 <xTaskIncrementTick+0x150>)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d120      	bne.n	800486a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004828:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <xTaskIncrementTick+0x154>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <xTaskIncrementTick+0x48>
        __asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	603b      	str	r3, [r7, #0]
    }
 8004844:	bf00      	nop
 8004846:	e7fe      	b.n	8004846 <xTaskIncrementTick+0x46>
 8004848:	4b42      	ldr	r3, [pc, #264]	; (8004954 <xTaskIncrementTick+0x154>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	4b42      	ldr	r3, [pc, #264]	; (8004958 <xTaskIncrementTick+0x158>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a40      	ldr	r2, [pc, #256]	; (8004954 <xTaskIncrementTick+0x154>)
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <xTaskIncrementTick+0x158>)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b3f      	ldr	r3, [pc, #252]	; (800495c <xTaskIncrementTick+0x15c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4a3e      	ldr	r2, [pc, #248]	; (800495c <xTaskIncrementTick+0x15c>)
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	f000 fa5d 	bl	8004d24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <xTaskIncrementTick+0x160>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	429a      	cmp	r2, r3
 8004872:	d34c      	bcc.n	800490e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004874:	4b37      	ldr	r3, [pc, #220]	; (8004954 <xTaskIncrementTick+0x154>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d104      	bne.n	8004888 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800487e:	4b38      	ldr	r3, [pc, #224]	; (8004960 <xTaskIncrementTick+0x160>)
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	601a      	str	r2, [r3, #0]
                    break;
 8004886:	e042      	b.n	800490e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004888:	4b32      	ldr	r3, [pc, #200]	; (8004954 <xTaskIncrementTick+0x154>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d203      	bcs.n	80048a8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80048a0:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <xTaskIncrementTick+0x160>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048a6:	e032      	b.n	800490e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff f86e 	bl	800398e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d004      	beq.n	80048c4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3318      	adds	r3, #24
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff f865 	bl	800398e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f002 fc56 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2201      	movs	r2, #1
 80048d2:	409a      	lsls	r2, r3
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <xTaskIncrementTick+0x164>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	4a22      	ldr	r2, [pc, #136]	; (8004964 <xTaskIncrementTick+0x164>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <xTaskIncrementTick+0x168>)
 80048ec:	441a      	add	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe ffed 	bl	80038d4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <xTaskIncrementTick+0x16c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	429a      	cmp	r2, r3
 8004906:	d3b5      	bcc.n	8004874 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800490c:	e7b2      	b.n	8004874 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <xTaskIncrementTick+0x16c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4914      	ldr	r1, [pc, #80]	; (8004968 <xTaskIncrementTick+0x168>)
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d901      	bls.n	800492a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8004926:	2301      	movs	r3, #1
 8004928:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <xTaskIncrementTick+0x170>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e004      	b.n	8004942 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004938:	4b0e      	ldr	r3, [pc, #56]	; (8004974 <xTaskIncrementTick+0x174>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a0d      	ldr	r2, [pc, #52]	; (8004974 <xTaskIncrementTick+0x174>)
 8004940:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004942:	697b      	ldr	r3, [r7, #20]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	2000026c 	.word	0x2000026c
 8004950:	20000248 	.word	0x20000248
 8004954:	20000214 	.word	0x20000214
 8004958:	20000218 	.word	0x20000218
 800495c:	2000025c 	.word	0x2000025c
 8004960:	20000264 	.word	0x20000264
 8004964:	2000024c 	.word	0x2000024c
 8004968:	20000188 	.word	0x20000188
 800496c:	20000184 	.word	0x20000184
 8004970:	20000258 	.word	0x20000258
 8004974:	20000254 	.word	0x20000254

08004978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800497e:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <vTaskSwitchContext+0xbc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004986:	4b2c      	ldr	r3, [pc, #176]	; (8004a38 <vTaskSwitchContext+0xc0>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800498c:	e04d      	b.n	8004a2a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800498e:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <vTaskSwitchContext+0xc0>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004994:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <vTaskSwitchContext+0xc4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80049a2:	7afb      	ldrb	r3, [r7, #11]
 80049a4:	f1c3 031f 	rsb	r3, r3, #31
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	4925      	ldr	r1, [pc, #148]	; (8004a40 <vTaskSwitchContext+0xc8>)
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
    }
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <vTaskSwitchContext+0x5a>
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <vTaskSwitchContext+0xc8>)
 80049e0:	4413      	add	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3308      	adds	r3, #8
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d104      	bne.n	8004a04 <vTaskSwitchContext+0x8c>
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <vTaskSwitchContext+0xcc>)
 8004a0c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <vTaskSwitchContext+0xcc>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <vTaskSwitchContext+0xd0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d102      	bne.n	8004a20 <vTaskSwitchContext+0xa8>
 8004a1a:	f002 fb0d 	bl	8007038 <SEGGER_SYSVIEW_OnIdle>
}
 8004a1e:	e004      	b.n	8004a2a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004a20:	4b08      	ldr	r3, [pc, #32]	; (8004a44 <vTaskSwitchContext+0xcc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 fb65 	bl	80070f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	2000026c 	.word	0x2000026c
 8004a38:	20000258 	.word	0x20000258
 8004a3c:	2000024c 	.word	0x2000024c
 8004a40:	20000188 	.word	0x20000188
 8004a44:	20000184 	.word	0x20000184
 8004a48:	20000268 	.word	0x20000268

08004a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	60fb      	str	r3, [r7, #12]
    }
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <vTaskPlaceOnEventList+0x44>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3318      	adds	r3, #24
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fe ff4e 	bl	800391c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a80:	2101      	movs	r1, #1
 8004a82:	6838      	ldr	r0, [r7, #0]
 8004a84:	f000 fb10 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000184 	.word	0x20000184

08004a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	60fb      	str	r3, [r7, #12]
    }
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe ff62 	bl	800398e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aca:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <xTaskRemoveFromEventList+0xb4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d120      	bne.n	8004b14 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe ff59 	bl	800398e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f002 fb4a 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	2201      	movs	r2, #1
 8004aea:	409a      	lsls	r2, r3
 8004aec:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <xTaskRemoveFromEventList+0xb8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <xTaskRemoveFromEventList+0xb8>)
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <xTaskRemoveFromEventList+0xbc>)
 8004b04:	441a      	add	r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fe fee1 	bl	80038d4 <vListInsertEnd>
 8004b12:	e005      	b.n	8004b20 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3318      	adds	r3, #24
 8004b18:	4619      	mov	r1, r3
 8004b1a:	480e      	ldr	r0, [pc, #56]	; (8004b54 <xTaskRemoveFromEventList+0xc0>)
 8004b1c:	f7fe feda 	bl	80038d4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <xTaskRemoveFromEventList+0xc4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d905      	bls.n	8004b3a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <xTaskRemoveFromEventList+0xc8>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e001      	b.n	8004b3e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004b3e:	697b      	ldr	r3, [r7, #20]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	2000026c 	.word	0x2000026c
 8004b4c:	2000024c 	.word	0x2000024c
 8004b50:	20000188 	.word	0x20000188
 8004b54:	2000021c 	.word	0x2000021c
 8004b58:	20000184 	.word	0x20000184
 8004b5c:	20000258 	.word	0x20000258

08004b60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <vTaskInternalSetTimeOutState+0x24>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <vTaskInternalSetTimeOutState+0x28>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	605a      	str	r2, [r3, #4]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	2000025c 	.word	0x2000025c
 8004b88:	20000248 	.word	0x20000248

08004b8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	613b      	str	r3, [r7, #16]
    }
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	60fb      	str	r3, [r7, #12]
    }
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004bce:	f000 fc91 	bl	80054f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <xTaskCheckForTimeOut+0xc4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bea:	d102      	bne.n	8004bf2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	e026      	b.n	8004c40 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <xTaskCheckForTimeOut+0xc8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d00a      	beq.n	8004c14 <xTaskCheckForTimeOut+0x88>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d305      	bcc.n	8004c14 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e015      	b.n	8004c40 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d20b      	bcs.n	8004c36 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff ff98 	bl	8004b60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e004      	b.n	8004c40 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004c40:	f000 fc88 	bl	8005554 <vPortExitCritical>

    return xReturn;
 8004c44:	69fb      	ldr	r3, [r7, #28]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000248 	.word	0x20000248
 8004c54:	2000025c 	.word	0x2000025c

08004c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <vTaskMissedYield+0x14>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000258 	.word	0x20000258

08004c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004c78:	f000 f84c 	bl	8004d14 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <prvIdleTask+0x28>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d9f9      	bls.n	8004c78 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <prvIdleTask+0x2c>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004c94:	e7f0      	b.n	8004c78 <prvIdleTask+0x8>
 8004c96:	bf00      	nop
 8004c98:	20000188 	.word	0x20000188
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e00c      	b.n	8004cc6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <prvInitialiseTaskLists+0x58>)
 8004cb8:	4413      	add	r3, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fddd 	bl	800387a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	607b      	str	r3, [r7, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d9ef      	bls.n	8004cac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ccc:	480b      	ldr	r0, [pc, #44]	; (8004cfc <prvInitialiseTaskLists+0x5c>)
 8004cce:	f7fe fdd4 	bl	800387a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004cd2:	480b      	ldr	r0, [pc, #44]	; (8004d00 <prvInitialiseTaskLists+0x60>)
 8004cd4:	f7fe fdd1 	bl	800387a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004cd8:	480a      	ldr	r0, [pc, #40]	; (8004d04 <prvInitialiseTaskLists+0x64>)
 8004cda:	f7fe fdce 	bl	800387a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004cde:	480a      	ldr	r0, [pc, #40]	; (8004d08 <prvInitialiseTaskLists+0x68>)
 8004ce0:	f7fe fdcb 	bl	800387a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <prvInitialiseTaskLists+0x6c>)
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <prvInitialiseTaskLists+0x5c>)
 8004ce8:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <prvInitialiseTaskLists+0x70>)
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <prvInitialiseTaskLists+0x60>)
 8004cee:	601a      	str	r2, [r3, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000188 	.word	0x20000188
 8004cfc:	200001ec 	.word	0x200001ec
 8004d00:	20000200 	.word	0x20000200
 8004d04:	2000021c 	.word	0x2000021c
 8004d08:	20000230 	.word	0x20000230
 8004d0c:	20000214 	.word	0x20000214
 8004d10:	20000218 	.word	0x20000218

08004d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvResetNextTaskUnblockTime+0x30>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d104      	bne.n	8004d3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <prvResetNextTaskUnblockTime+0x34>)
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004d3a:	e005      	b.n	8004d48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <prvResetNextTaskUnblockTime+0x30>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <prvResetNextTaskUnblockTime+0x34>)
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000214 	.word	0x20000214
 8004d58:	20000264 	.word	0x20000264

08004d5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d063      	beq.n	8004e3a <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <xTaskPriorityInherit+0xe8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d253      	bcs.n	8004e28 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db06      	blt.n	8004d96 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d88:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <xTaskPriorityInherit+0xe8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	f1c3 0205 	rsb	r2, r3, #5
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6959      	ldr	r1, [r3, #20]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <xTaskPriorityInherit+0xec>)
 8004da8:	4413      	add	r3, r2
 8004daa:	4299      	cmp	r1, r3
 8004dac:	d12f      	bne.n	8004e0e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fdeb 	bl	800398e <uxListRemove>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <xTaskPriorityInherit+0xf0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <xTaskPriorityInherit+0xf0>)
 8004dd2:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <xTaskPriorityInherit+0xe8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <xTaskPriorityInherit+0xf0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <xTaskPriorityInherit+0xf0>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4a12      	ldr	r2, [pc, #72]	; (8004e48 <xTaskPriorityInherit+0xec>)
 8004dfe:	441a      	add	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7fe fd64 	bl	80038d4 <vListInsertEnd>
 8004e0c:	e004      	b.n	8004e18 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <xTaskPriorityInherit+0xe8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	2049      	movs	r0, #73	; 0x49
 8004e1e:	f001 fc2b 	bl	8006678 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e008      	b.n	8004e3a <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <xTaskPriorityInherit+0xe8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d201      	bcs.n	8004e3a <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
    }
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000184 	.word	0x20000184
 8004e48:	20000188 	.word	0x20000188
 8004e4c:	2000024c 	.word	0x2000024c

08004e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d068      	beq.n	8004f38 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <xTaskPriorityDisinherit+0xf4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d00a      	beq.n	8004e86 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
    }
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
    }
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d03e      	beq.n	8004f38 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13a      	bne.n	8004f38 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe fd61 	bl	800398e <uxListRemove>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43da      	mvns	r2, r3
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <xTaskPriorityDisinherit+0xf8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <xTaskPriorityDisinherit+0xf8>)
 8004ee6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4619      	mov	r1, r3
 8004eec:	204a      	movs	r0, #74	; 0x4a
 8004eee:	f001 fbc3 	bl	8006678 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	f1c3 0205 	rsb	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <xTaskPriorityDisinherit+0xf8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <xTaskPriorityDisinherit+0xf8>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <xTaskPriorityDisinherit+0xfc>)
 8004f26:	441a      	add	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe fcd0 	bl	80038d4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f38:	697b      	ldr	r3, [r7, #20]
    }
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000184 	.word	0x20000184
 8004f48:	2000024c 	.word	0x2000024c
 8004f4c:	20000188 	.word	0x20000188

08004f50 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8081 	beq.w	800506c <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
    }
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d902      	bls.n	8004f98 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	e002      	b.n	8004f9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d061      	beq.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d15c      	bne.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004fb2:	4b30      	ldr	r3, [pc, #192]	; (8005074 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d10a      	bne.n	8004fd2 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60bb      	str	r3, [r7, #8]
    }
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	204a      	movs	r0, #74	; 0x4a
 8004fd8:	f001 fb4e 	bl	8006678 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db04      	blt.n	8004ffa <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f1c3 0205 	rsb	r2, r3, #5
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800500a:	4413      	add	r3, r2
 800500c:	4299      	cmp	r1, r3
 800500e:	d12d      	bne.n	800506c <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fcba 	bl	800398e <uxListRemove>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	2201      	movs	r2, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43da      	mvns	r2, r3
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4013      	ands	r3, r2
 8005032:	4a12      	ldr	r2, [pc, #72]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005034:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	4618      	mov	r0, r3
 800503a:	f002 f89d 	bl	8007178 <SEGGER_SYSVIEW_OnTaskStartReady>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	2201      	movs	r2, #1
 8005044:	409a      	lsls	r2, r3
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	4a0b      	ldr	r2, [pc, #44]	; (800507c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a06      	ldr	r2, [pc, #24]	; (8005078 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800505e:	441a      	add	r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fe fc34 	bl	80038d4 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800506c:	bf00      	nop
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000184 	.word	0x20000184
 8005078:	20000188 	.word	0x20000188
 800507c:	2000024c 	.word	0x2000024c

08005080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005084:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005092:	3201      	adds	r2, #1
 8005094:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8005096:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005098:	681b      	ldr	r3, [r3, #0]
    }
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20000184 	.word	0x20000184

080050a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050b2:	4b32      	ldr	r3, [pc, #200]	; (800517c <prvAddCurrentTaskToDelayedList+0xd4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fc65 	bl	800398e <uxListRemove>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050ca:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	2201      	movs	r2, #1
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <prvAddCurrentTaskToDelayedList+0xdc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4013      	ands	r3, r2
 80050de:	4a29      	ldr	r2, [pc, #164]	; (8005184 <prvAddCurrentTaskToDelayedList+0xdc>)
 80050e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d110      	bne.n	800510c <prvAddCurrentTaskToDelayedList+0x64>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	211b      	movs	r1, #27
 80050f6:	4618      	mov	r0, r3
 80050f8:	f002 f880 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fc:	4b20      	ldr	r3, [pc, #128]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4820      	ldr	r0, [pc, #128]	; (8005188 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005106:	f7fe fbe5 	bl	80038d4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800510a:	e032      	b.n	8005172 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d20f      	bcs.n	8005144 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2104      	movs	r1, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f002 f866 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <prvAddCurrentTaskToDelayedList+0xe4>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3304      	adds	r3, #4
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f7fe fbed 	bl	800391c <vListInsert>
}
 8005142:	e016      	b.n	8005172 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2104      	movs	r1, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f002 f856 	bl	80071fc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fe fbdd 	bl	800391c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <prvAddCurrentTaskToDelayedList+0xec>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d202      	bcs.n	8005172 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800516c:	4a09      	ldr	r2, [pc, #36]	; (8005194 <prvAddCurrentTaskToDelayedList+0xec>)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000248 	.word	0x20000248
 8005180:	20000184 	.word	0x20000184
 8005184:	2000024c 	.word	0x2000024c
 8005188:	20000230 	.word	0x20000230
 800518c:	20000218 	.word	0x20000218
 8005190:	20000214 	.word	0x20000214
 8005194:	20000264 	.word	0x20000264

08005198 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3b04      	subs	r3, #4
 80051a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3b04      	subs	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80051c8:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <pxPortInitialiseStack+0x64>)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b14      	subs	r3, #20
 80051d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b04      	subs	r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f06f 0202 	mvn.w	r2, #2
 80051e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3b20      	subs	r3, #32
 80051ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	08005201 	.word	0x08005201

08005200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <prvTaskExitError+0x54>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d00a      	beq.n	800522a <prvTaskExitError+0x2a>
        __asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
    }
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <prvTaskExitError+0x28>
        __asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60bb      	str	r3, [r7, #8]
    }
 800523c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800523e:	bf00      	nop
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0fc      	beq.n	8005240 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	20000010 	.word	0x20000010
	...

08005260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <pxCurrentTCBConst2>)
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	f380 8809 	msr	PSP, r0
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	4770      	bx	lr
 800527c:	f3af 8000 	nop.w

08005280 <pxCurrentTCBConst2>:
 8005280:	20000184 	.word	0x20000184
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005288:	4808      	ldr	r0, [pc, #32]	; (80052ac <prvPortStartFirstTask+0x24>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f380 8808 	msr	MSP, r0
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8814 	msr	CONTROL, r0
 800529a:	b662      	cpsie	i
 800529c:	b661      	cpsie	f
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	df00      	svc	0
 80052a8:	bf00      	nop
 80052aa:	0000      	.short	0x0000
 80052ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop

080052b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <xPortStartScheduler+0x120>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a46      	ldr	r2, [pc, #280]	; (80053d8 <xPortStartScheduler+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10a      	bne.n	80052da <xPortStartScheduler+0x26>
        __asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
    }
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052da:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <xPortStartScheduler+0x120>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3f      	ldr	r2, [pc, #252]	; (80053dc <xPortStartScheduler+0x128>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10a      	bne.n	80052fa <xPortStartScheduler+0x46>
        __asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60fb      	str	r3, [r7, #12]
    }
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <xPortStartScheduler+0x12c>)
 80052fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800531c:	b2da      	uxtb	r2, r3
 800531e:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <xPortStartScheduler+0x130>)
 8005320:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <xPortStartScheduler+0x134>)
 8005324:	2207      	movs	r2, #7
 8005326:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005328:	e009      	b.n	800533e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <xPortStartScheduler+0x134>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <xPortStartScheduler+0x134>)
 8005332:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d0ef      	beq.n	800532a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800534a:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <xPortStartScheduler+0x134>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00a      	beq.n	800536c <xPortStartScheduler+0xb8>
        __asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60bb      	str	r3, [r7, #8]
    }
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <xPortStartScheduler+0x134>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <xPortStartScheduler+0x134>)
 8005374:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <xPortStartScheduler+0x134>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800537e:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <xPortStartScheduler+0x134>)
 8005380:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800538a:	4b18      	ldr	r3, [pc, #96]	; (80053ec <xPortStartScheduler+0x138>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <xPortStartScheduler+0x138>)
 8005390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005394:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <xPortStartScheduler+0x138>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <xPortStartScheduler+0x138>)
 800539c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80053a2:	f000 f963 	bl	800566c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <xPortStartScheduler+0x13c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80053ac:	f000 f97a 	bl	80056a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <xPortStartScheduler+0x140>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <xPortStartScheduler+0x140>)
 80053b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80053bc:	f7ff ff64 	bl	8005288 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80053c0:	f7ff fada 	bl	8004978 <vTaskSwitchContext>
    prvTaskExitError();
 80053c4:	f7ff ff1c 	bl	8005200 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	e000ed00 	.word	0xe000ed00
 80053d8:	410fc271 	.word	0x410fc271
 80053dc:	410fc270 	.word	0x410fc270
 80053e0:	e000e400 	.word	0xe000e400
 80053e4:	20000270 	.word	0x20000270
 80053e8:	20000274 	.word	0x20000274
 80053ec:	e000ed20 	.word	0xe000ed20
 80053f0:	20000010 	.word	0x20000010
 80053f4:	e000ef34 	.word	0xe000ef34

080053f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <vInitPrioGroupValue+0xe4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <vInitPrioGroupValue+0xe8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10a      	bne.n	800541e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	613b      	str	r3, [r7, #16]
    }
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800541e:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <vInitPrioGroupValue+0xe4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <vInitPrioGroupValue+0xec>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10a      	bne.n	800543e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <vInitPrioGroupValue+0xf0>)
 8005440:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <vInitPrioGroupValue+0xf4>)
 8005464:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005468:	2207      	movs	r2, #7
 800546a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800546c:	e009      	b.n	8005482 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005476:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b80      	cmp	r3, #128	; 0x80
 800548c:	d0ef      	beq.n	800546e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800548e:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1c3 0307 	rsb	r3, r3, #7
 8005496:	2b04      	cmp	r3, #4
 8005498:	d00a      	beq.n	80054b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60bb      	str	r3, [r7, #8]
    }
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054b0:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054c2:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000ed00 	.word	0xe000ed00
 80054e0:	410fc271 	.word	0x410fc271
 80054e4:	410fc270 	.word	0x410fc270
 80054e8:	e000e400 	.word	0xe000e400
 80054ec:	20000270 	.word	0x20000270
 80054f0:	20000274 	.word	0x20000274

080054f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
        __asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	607b      	str	r3, [r7, #4]
    }
 800550c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <vPortEnterCritical+0x58>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a0d      	ldr	r2, [pc, #52]	; (800554c <vPortEnterCritical+0x58>)
 8005516:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <vPortEnterCritical+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10f      	bne.n	8005540 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <vPortEnterCritical+0x5c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <vPortEnterCritical+0x4c>
        __asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	603b      	str	r3, [r7, #0]
    }
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <vPortEnterCritical+0x4a>
    }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000010 	.word	0x20000010
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <vPortExitCritical+0x50>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <vPortExitCritical+0x24>
        __asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	607b      	str	r3, [r7, #4]
    }
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <vPortExitCritical+0x50>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <vPortExitCritical+0x50>)
 8005580:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <vPortExitCritical+0x50>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <vPortExitCritical+0x42>
 800558a:	2300      	movs	r3, #0
 800558c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005594:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000010 	.word	0x20000010
	...

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f01e 0f10 	tst.w	lr, #16
 80055c0:	bf08      	it	eq
 80055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055d4:	f380 8811 	msr	BASEPRI, r0
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f7ff f9ca 	bl	8004978 <vTaskSwitchContext>
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	bc09      	pop	{r0, r3}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f6:	f01e 0f10 	tst.w	lr, #16
 80055fa:	bf08      	it	eq
 80055fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005600:	f380 8809 	msr	PSP, r0
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst>:
 8005610:	20000184 	.word	0x20000184
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
        __asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
    }
 8005630:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005632:	f001 fc87 	bl	8006f44 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005636:	f7ff f8e3 	bl	8004800 <xTaskIncrementTick>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005640:	f001 fcde 	bl	8007000 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <SysTick_Handler+0x50>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e001      	b.n	8005652 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800564e:	f001 fcbb 	bl	8006fc8 <SEGGER_SYSVIEW_RecordExitISR>
 8005652:	2300      	movs	r3, #0
 8005654:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f383 8811 	msr	BASEPRI, r3
    }
 800565c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	4b08      	ldr	r3, [pc, #32]	; (8005694 <vPortSetupTimerInterrupt+0x28>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <vPortSetupTimerInterrupt+0x2c>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567c:	4b07      	ldr	r3, [pc, #28]	; (800569c <vPortSetupTimerInterrupt+0x30>)
 800567e:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005680:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005682:	4b04      	ldr	r3, [pc, #16]	; (8005694 <vPortSetupTimerInterrupt+0x28>)
 8005684:	2207      	movs	r2, #7
 8005686:	601a      	str	r2, [r3, #0]
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	e000e010 	.word	0xe000e010
 8005698:	e000e018 	.word	0xe000e018
 800569c:	e000e014 	.word	0xe000e014
 80056a0:	0001387f 	.word	0x0001387f

080056a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80056a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056b4 <vPortEnableVFP+0x10>
 80056a8:	6801      	ldr	r1, [r0, #0]
 80056aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ae:	6001      	str	r1, [r0, #0]
 80056b0:	4770      	bx	lr
 80056b2:	0000      	.short	0x0000
 80056b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop

080056bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80056c2:	f3ef 8305 	mrs	r3, IPSR
 80056c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d914      	bls.n	80056f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <vPortValidateInterruptPriority+0x70>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <vPortValidateInterruptPriority+0x74>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	7afa      	ldrb	r2, [r7, #11]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d20a      	bcs.n	80056f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	607b      	str	r3, [r7, #4]
    }
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056f8:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <vPortValidateInterruptPriority+0x78>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <vPortValidateInterruptPriority+0x7c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d90a      	bls.n	800571e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	603b      	str	r3, [r7, #0]
    }
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <vPortValidateInterruptPriority+0x60>
    }
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	e000e3f0 	.word	0xe000e3f0
 8005730:	20000270 	.word	0x20000270
 8005734:	e000ed0c 	.word	0xe000ed0c
 8005738:	20000274 	.word	0x20000274

0800573c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005748:	f7fe ff9a 	bl	8004680 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800574c:	4b65      	ldr	r3, [pc, #404]	; (80058e4 <pvPortMalloc+0x1a8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005754:	f000 f934 	bl	80059c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005758:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <pvPortMalloc+0x1ac>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 80a7 	bne.w	80058b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02d      	beq.n	80057c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800576c:	2208      	movs	r2, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d227      	bcs.n	80057c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005778:	2208      	movs	r2, #8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d021      	beq.n	80057ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f023 0307 	bic.w	r3, r3, #7
 8005790:	3308      	adds	r3, #8
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d214      	bcs.n	80057c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	3308      	adds	r3, #8
 80057a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <pvPortMalloc+0x92>
        __asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	617b      	str	r3, [r7, #20]
    }
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057c6:	e002      	b.n	80057ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	e000      	b.n	80057d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d06e      	beq.n	80058b4 <pvPortMalloc+0x178>
 80057d6:	4b45      	ldr	r3, [pc, #276]	; (80058ec <pvPortMalloc+0x1b0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d869      	bhi.n	80058b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057e0:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <pvPortMalloc+0x1b4>)
 80057e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80057e4:	4b42      	ldr	r3, [pc, #264]	; (80058f0 <pvPortMalloc+0x1b4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ea:	e004      	b.n	80057f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d903      	bls.n	8005808 <pvPortMalloc+0xcc>
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f1      	bne.n	80057ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005808:	4b36      	ldr	r3, [pc, #216]	; (80058e4 <pvPortMalloc+0x1a8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	429a      	cmp	r2, r3
 8005810:	d050      	beq.n	80058b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2208      	movs	r2, #8
 8005818:	4413      	add	r3, r2
 800581a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	2308      	movs	r3, #8
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	429a      	cmp	r2, r3
 8005832:	d91f      	bls.n	8005874 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <pvPortMalloc+0x120>
        __asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	613b      	str	r3, [r7, #16]
    }
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800586e:	69b8      	ldr	r0, [r7, #24]
 8005870:	f000 f908 	bl	8005a84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005874:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <pvPortMalloc+0x1b0>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <pvPortMalloc+0x1b0>)
 8005880:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005882:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <pvPortMalloc+0x1b0>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <pvPortMalloc+0x1b8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d203      	bcs.n	8005896 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800588e:	4b17      	ldr	r3, [pc, #92]	; (80058ec <pvPortMalloc+0x1b0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <pvPortMalloc+0x1b8>)
 8005894:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <pvPortMalloc+0x1ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	431a      	orrs	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <pvPortMalloc+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a11      	ldr	r2, [pc, #68]	; (80058f8 <pvPortMalloc+0x1bc>)
 80058b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058b4:	f7fe fef2 	bl	800469c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <pvPortMalloc+0x19c>
        __asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60fb      	str	r3, [r7, #12]
    }
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80058d8:	69fb      	ldr	r3, [r7, #28]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20012e80 	.word	0x20012e80
 80058e8:	20012e94 	.word	0x20012e94
 80058ec:	20012e84 	.word	0x20012e84
 80058f0:	20012e78 	.word	0x20012e78
 80058f4:	20012e88 	.word	0x20012e88
 80058f8:	20012e8c 	.word	0x20012e8c

080058fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d04d      	beq.n	80059aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800590e:	2308      	movs	r3, #8
 8005910:	425b      	negs	r3, r3
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <vPortFree+0xb8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <vPortFree+0x44>
        __asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60fb      	str	r3, [r7, #12]
    }
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <vPortFree+0x62>
        __asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60bb      	str	r3, [r7, #8]
    }
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <vPortFree+0xb8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01e      	beq.n	80059aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11a      	bne.n	80059aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <vPortFree+0xb8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	43db      	mvns	r3, r3
 800597e:	401a      	ands	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005984:	f7fe fe7c 	bl	8004680 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <vPortFree+0xbc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4413      	add	r3, r2
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <vPortFree+0xbc>)
 8005994:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005996:	6938      	ldr	r0, [r7, #16]
 8005998:	f000 f874 	bl	8005a84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800599c:	4b07      	ldr	r3, [pc, #28]	; (80059bc <vPortFree+0xc0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a06      	ldr	r2, [pc, #24]	; (80059bc <vPortFree+0xc0>)
 80059a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80059a6:	f7fe fe79 	bl	800469c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80059aa:	bf00      	nop
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20012e94 	.word	0x20012e94
 80059b8:	20012e84 	.word	0x20012e84
 80059bc:	20012e90 	.word	0x20012e90

080059c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80059cc:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <prvHeapInit+0xac>)
 80059ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3307      	adds	r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <prvHeapInit+0xac>)
 80059f0:	4413      	add	r3, r2
 80059f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <prvHeapInit+0xb0>)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80059fe:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <prvHeapInit+0xb0>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4413      	add	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0307 	bic.w	r3, r3, #7
 8005a1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <prvHeapInit+0xb4>)
 8005a20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <prvHeapInit+0xb4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <prvHeapInit+0xb4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a40:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <prvHeapInit+0xb4>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <prvHeapInit+0xb8>)
 8005a4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <prvHeapInit+0xbc>)
 8005a56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <prvHeapInit+0xc0>)
 8005a5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000278 	.word	0x20000278
 8005a70:	20012e78 	.word	0x20012e78
 8005a74:	20012e80 	.word	0x20012e80
 8005a78:	20012e88 	.word	0x20012e88
 8005a7c:	20012e84 	.word	0x20012e84
 8005a80:	20012e94 	.word	0x20012e94

08005a84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a8c:	4b28      	ldr	r3, [pc, #160]	; (8005b30 <prvInsertBlockIntoFreeList+0xac>)
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e002      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x14>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d8f7      	bhi.n	8005a92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4413      	add	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d108      	bne.n	8005ac6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	441a      	add	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	441a      	add	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d118      	bne.n	8005b0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <prvInsertBlockIntoFreeList+0xb0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d00d      	beq.n	8005b02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e008      	b.n	8005b14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <prvInsertBlockIntoFreeList+0xb0>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e003      	b.n	8005b14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d002      	beq.n	8005b22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20012e78 	.word	0x20012e78
 8005b34:	20012e80 	.word	0x20012e80

08005b38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005b3c:	4803      	ldr	r0, [pc, #12]	; (8005b4c <_cbSendSystemDesc+0x14>)
 8005b3e:	f001 f9ab 	bl	8006e98 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005b42:	4803      	ldr	r0, [pc, #12]	; (8005b50 <_cbSendSystemDesc+0x18>)
 8005b44:	f001 f9a8 	bl	8006e98 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005b48:	bf00      	nop
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08008040 	.word	0x08008040
 8005b50:	08008078 	.word	0x08008078

08005b54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <SEGGER_SYSVIEW_Conf+0x1c>)
 8005b5a:	4a06      	ldr	r2, [pc, #24]	; (8005b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <SEGGER_SYSVIEW_Conf+0x24>)
 8005b5e:	4806      	ldr	r0, [pc, #24]	; (8005b78 <SEGGER_SYSVIEW_Conf+0x24>)
 8005b60:	f000 fd18 	bl	8006594 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005b64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005b68:	f000 fd58 	bl	800661c <SEGGER_SYSVIEW_SetRAMBase>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	08005b39 	.word	0x08005b39
 8005b74:	08008148 	.word	0x08008148
 8005b78:	04c4b400 	.word	0x04c4b400

08005b7c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	e033      	b.n	8005bf0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005b88:	491e      	ldr	r1, [pc, #120]	; (8005c04 <_cbSendTaskList+0x88>)
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	491a      	ldr	r1, [pc, #104]	; (8005c04 <_cbSendTaskList+0x88>)
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	4c16      	ldr	r4, [pc, #88]	; (8005c04 <_cbSendTaskList+0x88>)
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4423      	add	r3, r4
 8005bb8:	3308      	adds	r3, #8
 8005bba:	681c      	ldr	r4, [r3, #0]
 8005bbc:	4d11      	ldr	r5, [pc, #68]	; (8005c04 <_cbSendTaskList+0x88>)
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	442b      	add	r3, r5
 8005bca:	330c      	adds	r3, #12
 8005bcc:	681d      	ldr	r5, [r3, #0]
 8005bce:	4e0d      	ldr	r6, [pc, #52]	; (8005c04 <_cbSendTaskList+0x88>)
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4433      	add	r3, r6
 8005bdc:	3310      	adds	r3, #16
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	462b      	mov	r3, r5
 8005be4:	4622      	mov	r2, r4
 8005be6:	f000 f8bd 	bl	8005d64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3301      	adds	r3, #1
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <_cbSendTaskList+0x8c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d3c6      	bcc.n	8005b88 <_cbSendTaskList+0xc>
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	20012e98 	.word	0x20012e98
 8005c08:	20012f38 	.word	0x20012f38

08005c0c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005c14:	f7fe fde2 	bl	80047dc <xTaskGetTickCountFromISR>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	469a      	mov	sl, r3
 8005c1e:	4693      	mov	fp, r2
 8005c20:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	f04f 0a00 	mov.w	sl, #0
 8005c30:	f04f 0b00 	mov.w	fp, #0
 8005c34:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005c38:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005c3c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005c40:	4652      	mov	r2, sl
 8005c42:	465b      	mov	r3, fp
 8005c44:	1a14      	subs	r4, r2, r0
 8005c46:	eb63 0501 	sbc.w	r5, r3, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	00ab      	lsls	r3, r5, #2
 8005c54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005c58:	00a2      	lsls	r2, r4, #2
 8005c5a:	4614      	mov	r4, r2
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	eb14 0800 	adds.w	r8, r4, r0
 8005c62:	eb45 0901 	adc.w	r9, r5, r1
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7a:	4690      	mov	r8, r2
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005c82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005c94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	492b      	ldr	r1, [pc, #172]	; (8005d54 <SYSVIEW_AddTask+0xc0>)
 8005ca6:	68b8      	ldr	r0, [r7, #8]
 8005ca8:	f001 fc74 	bl	8007594 <memcmp>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d04b      	beq.n	8005d4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005cb2:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	d903      	bls.n	8005cc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005cba:	4828      	ldr	r0, [pc, #160]	; (8005d5c <SYSVIEW_AddTask+0xc8>)
 8005cbc:	f001 fbea 	bl	8007494 <SEGGER_SYSVIEW_Warn>
    return;
 8005cc0:	e044      	b.n	8005d4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005cc2:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4926      	ldr	r1, [pc, #152]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4921      	ldr	r1, [pc, #132]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	491b      	ldr	r1, [pc, #108]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4916      	ldr	r1, [pc, #88]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	330c      	adds	r3, #12
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4910      	ldr	r1, [pc, #64]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3310      	adds	r3, #16
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f80e 	bl	8005d64 <SYSVIEW_SendTaskInfo>
 8005d48:	e000      	b.n	8005d4c <SYSVIEW_AddTask+0xb8>
    return;
 8005d4a:	bf00      	nop

}
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08008088 	.word	0x08008088
 8005d58:	20012f38 	.word	0x20012f38
 8005d5c:	08008090 	.word	0x08008090
 8005d60:	20012e98 	.word	0x20012e98

08005d64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	2214      	movs	r2, #20
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fc28 	bl	80075d0 <memset>
  TaskInfo.TaskID     = TaskID;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005d94:	f107 0314 	add.w	r3, r7, #20
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 ff85 	bl	8006ca8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005d9e:	bf00      	nop
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <_DoInit+0x98>)
 8005db0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2203      	movs	r2, #3
 8005db6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <_DoInit+0x9c>)
 8005dc2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <_DoInit+0xa0>)
 8005dc8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <_DoInit+0x9c>)
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <_DoInit+0xa4>)
 8005dee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2210      	movs	r2, #16
 8005df4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3307      	adds	r3, #7
 8005e0c:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <_DoInit+0xa8>)
 8005e0e:	6810      	ldr	r0, [r2, #0]
 8005e10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e12:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a0e      	ldr	r2, [pc, #56]	; (8005e54 <_DoInit+0xac>)
 8005e1a:	6810      	ldr	r0, [r2, #0]
 8005e1c:	6018      	str	r0, [r3, #0]
 8005e1e:	8891      	ldrh	r1, [r2, #4]
 8005e20:	7992      	ldrb	r2, [r2, #6]
 8005e22:	8099      	strh	r1, [r3, #4]
 8005e24:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e26:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e30:	f3bf 8f5f 	dmb	sy
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20012f3c 	.word	0x20012f3c
 8005e44:	080080e0 	.word	0x080080e0
 8005e48:	20012fe4 	.word	0x20012fe4
 8005e4c:	200133e4 	.word	0x200133e4
 8005e50:	080080ec 	.word	0x080080ec
 8005e54:	080080f0 	.word	0x080080f0

08005e58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08c      	sub	sp, #48	; 0x30
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005e64:	4b3e      	ldr	r3, [pc, #248]	; (8005f60 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <SEGGER_RTT_ReadNoLock+0x1e>
 8005e72:	f7ff ff99 	bl	8005da8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	3360      	adds	r3, #96	; 0x60
 8005e82:	4a37      	ldr	r2, [pc, #220]	; (8005f60 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e84:	4413      	add	r3, r2
 8005e86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d92b      	bls.n	8005efc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	bf28      	it	cs
 8005eb6:	4613      	movcs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	4413      	add	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	6939      	ldr	r1, [r7, #16]
 8005ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eca:	f001 fb73 	bl	80075b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4413      	add	r3, r2
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d101      	bne.n	8005efc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bf28      	it	cs
 8005f0c:	4613      	movcs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d019      	beq.n	8005f4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	4413      	add	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	6939      	ldr	r1, [r7, #16]
 8005f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f26:	f001 fb45 	bl	80075b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4413      	add	r3, r2
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3730      	adds	r7, #48	; 0x30
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20012f3c 	.word	0x20012f3c

08005f64 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005f72:	4b3d      	ldr	r3, [pc, #244]	; (8006068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005f80:	f7ff ff12 	bl	8005da8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005f84:	f3ef 8311 	mrs	r3, BASEPRI
 8005f88:	f04f 0120 	mov.w	r1, #32
 8005f8c:	f381 8811 	msr	BASEPRI, r1
 8005f90:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f92:	4b35      	ldr	r3, [pc, #212]	; (8006068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f94:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	440b      	add	r3, r1
 8005faa:	3304      	adds	r3, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	dbeb      	blt.n	8005f9a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005fc2:	e000      	b.n	8005fc6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005fc4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	da3f      	bge.n	8006050 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005fd0:	6939      	ldr	r1, [r7, #16]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	4413      	add	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	440b      	add	r3, r1
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005fe4:	6939      	ldr	r1, [r7, #16]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	4613      	mov	r3, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ffa:	6939      	ldr	r1, [r7, #16]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	440b      	add	r3, r1
 8006008:	3320      	adds	r3, #32
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800600e:	6939      	ldr	r1, [r7, #16]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	4613      	mov	r3, r2
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4413      	add	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	440b      	add	r3, r1
 800601c:	3328      	adds	r3, #40	; 0x28
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006022:	6939      	ldr	r1, [r7, #16]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	3324      	adds	r3, #36	; 0x24
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006036:	6939      	ldr	r1, [r7, #16]
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	4613      	mov	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	4413      	add	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	440b      	add	r3, r1
 8006044:	332c      	adds	r3, #44	; 0x2c
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800604a:	f3bf 8f5f 	dmb	sy
 800604e:	e002      	b.n	8006056 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800605c:	69fb      	ldr	r3, [r7, #28]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20012f3c 	.word	0x20012f3c

0800606c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800607a:	4b33      	ldr	r3, [pc, #204]	; (8006148 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006088:	f7ff fe8e 	bl	8005da8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800608e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	461a      	mov	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4293      	cmp	r3, r2
 800609a:	d24d      	bcs.n	8006138 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800609c:	f3ef 8311 	mrs	r3, BASEPRI
 80060a0:	f04f 0120 	mov.w	r1, #32
 80060a4:	f381 8811 	msr	BASEPRI, r1
 80060a8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d031      	beq.n	8006114 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4613      	mov	r3, r2
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	3360      	adds	r3, #96	; 0x60
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80060c4:	6979      	ldr	r1, [r7, #20]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	440b      	add	r3, r1
 80060d2:	3364      	adds	r3, #100	; 0x64
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80060d8:	6979      	ldr	r1, [r7, #20]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	440b      	add	r3, r1
 80060e6:	3368      	adds	r3, #104	; 0x68
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	440b      	add	r3, r1
 80060fa:	3370      	adds	r3, #112	; 0x70
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	440b      	add	r3, r1
 800610e:	336c      	adds	r3, #108	; 0x6c
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4613      	mov	r3, r2
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	440b      	add	r3, r1
 8006122:	3374      	adds	r3, #116	; 0x74
 8006124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006126:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006128:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	e002      	b.n	800613e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006138:	f04f 33ff 	mov.w	r3, #4294967295
 800613c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800613e:	69fb      	ldr	r3, [r7, #28]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20012f3c 	.word	0x20012f3c

0800614c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800615c:	e002      	b.n	8006164 <_EncodeStr+0x18>
    Len++;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4413      	add	r3, r2
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f6      	bne.n	800615e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d901      	bls.n	800617c <_EncodeStr+0x30>
    Len = Limit;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2bfe      	cmp	r3, #254	; 0xfe
 8006180:	d806      	bhi.n	8006190 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	60fa      	str	r2, [r7, #12]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e011      	b.n	80061b4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	60fa      	str	r2, [r7, #12]
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	60fa      	str	r2, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	0a19      	lsrs	r1, r3, #8
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	60fa      	str	r2, [r7, #12]
 80061b0:	b2ca      	uxtb	r2, r1
 80061b2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80061b8:	e00a      	b.n	80061d0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	1c53      	adds	r3, r2, #1
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	60f9      	str	r1, [r7, #12]
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	701a      	strb	r2, [r3, #0]
    n++;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	3301      	adds	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d3f0      	bcc.n	80061ba <_EncodeStr+0x6e>
  }
  return pPayload;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006206:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <_HandleIncomingPacket+0xe0>)
 8006208:	7e1b      	ldrb	r3, [r3, #24]
 800620a:	4618      	mov	r0, r3
 800620c:	1cfb      	adds	r3, r7, #3
 800620e:	2201      	movs	r2, #1
 8006210:	4619      	mov	r1, r3
 8006212:	f7ff fe21 	bl	8005e58 <SEGGER_RTT_ReadNoLock>
 8006216:	4603      	mov	r3, r0
 8006218:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd54      	ble.n	80062ca <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	2b80      	cmp	r3, #128	; 0x80
 8006224:	d032      	beq.n	800628c <_HandleIncomingPacket+0x8c>
 8006226:	2b80      	cmp	r3, #128	; 0x80
 8006228:	dc42      	bgt.n	80062b0 <_HandleIncomingPacket+0xb0>
 800622a:	2b07      	cmp	r3, #7
 800622c:	dc16      	bgt.n	800625c <_HandleIncomingPacket+0x5c>
 800622e:	2b00      	cmp	r3, #0
 8006230:	dd3e      	ble.n	80062b0 <_HandleIncomingPacket+0xb0>
 8006232:	3b01      	subs	r3, #1
 8006234:	2b06      	cmp	r3, #6
 8006236:	d83b      	bhi.n	80062b0 <_HandleIncomingPacket+0xb0>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <_HandleIncomingPacket+0x40>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006263 	.word	0x08006263
 8006244:	08006269 	.word	0x08006269
 8006248:	0800626f 	.word	0x0800626f
 800624c:	08006275 	.word	0x08006275
 8006250:	0800627b 	.word	0x0800627b
 8006254:	08006281 	.word	0x08006281
 8006258:	08006287 	.word	0x08006287
 800625c:	2b7f      	cmp	r3, #127	; 0x7f
 800625e:	d036      	beq.n	80062ce <_HandleIncomingPacket+0xce>
 8006260:	e026      	b.n	80062b0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006262:	f000 fba7 	bl	80069b4 <SEGGER_SYSVIEW_Start>
      break;
 8006266:	e037      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006268:	f000 fc5e 	bl	8006b28 <SEGGER_SYSVIEW_Stop>
      break;
 800626c:	e034      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800626e:	f000 fe37 	bl	8006ee0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006272:	e031      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006274:	f000 fdfc 	bl	8006e70 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006278:	e02e      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800627a:	f000 fc7b 	bl	8006b74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800627e:	e02b      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006280:	f001 f8ca 	bl	8007418 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006284:	e028      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006286:	f001 f8a9 	bl	80073dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800628a:	e025      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800628c:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <_HandleIncomingPacket+0xe0>)
 800628e:	7e1b      	ldrb	r3, [r3, #24]
 8006290:	4618      	mov	r0, r3
 8006292:	1cfb      	adds	r3, r7, #3
 8006294:	2201      	movs	r2, #1
 8006296:	4619      	mov	r1, r3
 8006298:	f7ff fdde 	bl	8005e58 <SEGGER_RTT_ReadNoLock>
 800629c:	4603      	mov	r3, r0
 800629e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd15      	ble.n	80062d2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 f817 	bl	80072dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80062ae:	e010      	b.n	80062d2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	da0e      	bge.n	80062d6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <_HandleIncomingPacket+0xe0>)
 80062ba:	7e1b      	ldrb	r3, [r3, #24]
 80062bc:	4618      	mov	r0, r3
 80062be:	1cfb      	adds	r3, r7, #3
 80062c0:	2201      	movs	r2, #1
 80062c2:	4619      	mov	r1, r3
 80062c4:	f7ff fdc8 	bl	8005e58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80062c8:	e005      	b.n	80062d6 <_HandleIncomingPacket+0xd6>
    }
  }
 80062ca:	bf00      	nop
 80062cc:	e004      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
      break;
 80062ce:	bf00      	nop
 80062d0:	e002      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
      break;
 80062d2:	bf00      	nop
 80062d4:	e000      	b.n	80062d8 <_HandleIncomingPacket+0xd8>
      break;
 80062d6:	bf00      	nop
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	200143fc 	.word	0x200143fc

080062e4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08c      	sub	sp, #48	; 0x30
 80062e8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80062ea:	2301      	movs	r3, #1
 80062ec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	3301      	adds	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f8:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fe:	e00b      	b.n	8006318 <_TrySendOverflowPacket+0x34>
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	b2da      	uxtb	r2, r3
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	1c59      	adds	r1, r3, #1
 8006308:	62f9      	str	r1, [r7, #44]	; 0x2c
 800630a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	09db      	lsrs	r3, r3, #7
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	2b7f      	cmp	r3, #127	; 0x7f
 800631c:	d8f0      	bhi.n	8006300 <_TrySendOverflowPacket+0x1c>
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800632e:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <_TrySendOverflowPacket+0xe0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006334:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	e00b      	b.n	8006360 <_TrySendOverflowPacket+0x7c>
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	6279      	str	r1, [r7, #36]	; 0x24
 8006352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	09db      	lsrs	r3, r3, #7
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b7f      	cmp	r3, #127	; 0x7f
 8006364:	d8f0      	bhi.n	8006348 <_TrySendOverflowPacket+0x64>
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	627a      	str	r2, [r7, #36]	; 0x24
 800636c:	6a3a      	ldr	r2, [r7, #32]
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006376:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	4618      	mov	r0, r3
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	461a      	mov	r2, r3
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	4619      	mov	r1, r3
 8006388:	f7f9 ff22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800638c:	4603      	mov	r3, r0
 800638e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006396:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e004      	b.n	80063b4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	3301      	adds	r3, #1
 80063b0:	4a03      	ldr	r2, [pc, #12]	; (80063c0 <_TrySendOverflowPacket+0xdc>)
 80063b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80063b4:	693b      	ldr	r3, [r7, #16]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3730      	adds	r7, #48	; 0x30
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200143fc 	.word	0x200143fc
 80063c4:	e0001004 	.word	0xe0001004

080063c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80063d4:	4b6c      	ldr	r3, [pc, #432]	; (8006588 <_SendPacket+0x1c0>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d010      	beq.n	80063fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80063dc:	4b6a      	ldr	r3, [pc, #424]	; (8006588 <_SendPacket+0x1c0>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80a3 	beq.w	800652c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80063e6:	4b68      	ldr	r3, [pc, #416]	; (8006588 <_SendPacket+0x1c0>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d109      	bne.n	8006402 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80063ee:	f7ff ff79 	bl	80062e4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80063f2:	4b65      	ldr	r3, [pc, #404]	; (8006588 <_SendPacket+0x1c0>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	f040 809a 	bne.w	8006530 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80063fc:	e001      	b.n	8006402 <_SendPacket+0x3a>
    goto Send;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <_SendPacket+0x3c>
Send:
 8006402:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b1f      	cmp	r3, #31
 8006408:	d809      	bhi.n	800641e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800640a:	4b5f      	ldr	r3, [pc, #380]	; (8006588 <_SendPacket+0x1c0>)
 800640c:	69da      	ldr	r2, [r3, #28]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 808b 	bne.w	8006534 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b17      	cmp	r3, #23
 8006422:	d807      	bhi.n	8006434 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3b01      	subs	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	b2da      	uxtb	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e03d      	b.n	80064b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b7f      	cmp	r3, #127	; 0x7f
 8006440:	d912      	bls.n	8006468 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	09da      	lsrs	r2, r3, #7
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3b01      	subs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	3a01      	subs	r2, #1
 800645a:	60fa      	str	r2, [r7, #12]
 800645c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006460:	b2da      	uxtb	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e006      	b.n	8006476 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3b01      	subs	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b7f      	cmp	r3, #127	; 0x7f
 800647a:	d912      	bls.n	80064a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	09da      	lsrs	r2, r3, #7
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3b01      	subs	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	3a01      	subs	r2, #1
 8006494:	60fa      	str	r2, [r7, #12]
 8006496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e006      	b.n	80064b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064b0:	4b36      	ldr	r3, [pc, #216]	; (800658c <_SendPacket+0x1c4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80064b6:	4b34      	ldr	r3, [pc, #208]	; (8006588 <_SendPacket+0x1c0>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	e00b      	b.n	80064e2 <_SendPacket+0x11a>
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	6279      	str	r1, [r7, #36]	; 0x24
 80064d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	623b      	str	r3, [r7, #32]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2b7f      	cmp	r3, #127	; 0x7f
 80064e6:	d8f0      	bhi.n	80064ca <_SendPacket+0x102>
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	627a      	str	r2, [r7, #36]	; 0x24
 80064ee:	6a3a      	ldr	r2, [r7, #32]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80064f8:	4b23      	ldr	r3, [pc, #140]	; (8006588 <_SendPacket+0x1c0>)
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	4618      	mov	r0, r3
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	461a      	mov	r2, r3
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	f7f9 fe62 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800650c:	4603      	mov	r3, r0
 800650e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006516:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <_SendPacket+0x1c0>)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	60d3      	str	r3, [r2, #12]
 800651c:	e00b      	b.n	8006536 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <_SendPacket+0x1c0>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <_SendPacket+0x1c0>)
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	e004      	b.n	8006536 <_SendPacket+0x16e>
    goto SendDone;
 800652c:	bf00      	nop
 800652e:	e002      	b.n	8006536 <_SendPacket+0x16e>
      goto SendDone;
 8006530:	bf00      	nop
 8006532:	e000      	b.n	8006536 <_SendPacket+0x16e>
      goto SendDone;
 8006534:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <_SendPacket+0x1c0>)
 8006538:	7e1b      	ldrb	r3, [r3, #24]
 800653a:	4619      	mov	r1, r3
 800653c:	4a14      	ldr	r2, [pc, #80]	; (8006590 <_SendPacket+0x1c8>)
 800653e:	460b      	mov	r3, r1
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	440b      	add	r3, r1
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	336c      	adds	r3, #108	; 0x6c
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <_SendPacket+0x1c0>)
 800654e:	7e1b      	ldrb	r3, [r3, #24]
 8006550:	4618      	mov	r0, r3
 8006552:	490f      	ldr	r1, [pc, #60]	; (8006590 <_SendPacket+0x1c8>)
 8006554:	4603      	mov	r3, r0
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4403      	add	r3, r0
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	440b      	add	r3, r1
 800655e:	3370      	adds	r3, #112	; 0x70
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d00b      	beq.n	800657e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <_SendPacket+0x1c0>)
 8006568:	789b      	ldrb	r3, [r3, #2]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d107      	bne.n	800657e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <_SendPacket+0x1c0>)
 8006570:	2201      	movs	r2, #1
 8006572:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006574:	f7ff fe44 	bl	8006200 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <_SendPacket+0x1c0>)
 800657a:	2200      	movs	r2, #0
 800657c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800657e:	bf00      	nop
 8006580:	3728      	adds	r7, #40	; 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200143fc 	.word	0x200143fc
 800658c:	e0001004 	.word	0xe0001004
 8006590:	20012f3c 	.word	0x20012f3c

08006594 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065a2:	2300      	movs	r3, #0
 80065a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065a8:	4917      	ldr	r1, [pc, #92]	; (8006608 <SEGGER_SYSVIEW_Init+0x74>)
 80065aa:	4818      	ldr	r0, [pc, #96]	; (800660c <SEGGER_SYSVIEW_Init+0x78>)
 80065ac:	f7ff fcda 	bl	8005f64 <SEGGER_RTT_AllocUpBuffer>
 80065b0:	4603      	mov	r3, r0
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	4b16      	ldr	r3, [pc, #88]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ba:	785a      	ldrb	r2, [r3, #1]
 80065bc:	4b14      	ldr	r3, [pc, #80]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065c0:	4b13      	ldr	r3, [pc, #76]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065c2:	7e1b      	ldrb	r3, [r3, #24]
 80065c4:	4618      	mov	r0, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	2308      	movs	r3, #8
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <SEGGER_SYSVIEW_Init+0x80>)
 80065ce:	490f      	ldr	r1, [pc, #60]	; (800660c <SEGGER_SYSVIEW_Init+0x78>)
 80065d0:	f7ff fd4c 	bl	800606c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <SEGGER_SYSVIEW_Init+0x84>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80065e2:	4a0b      	ldr	r2, [pc, #44]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80065ee:	4a08      	ldr	r2, [pc, #32]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80065f4:	4a06      	ldr	r2, [pc, #24]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <SEGGER_SYSVIEW_Init+0x7c>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	200133f4 	.word	0x200133f4
 800660c:	080080f8 	.word	0x080080f8
 8006610:	200143fc 	.word	0x200143fc
 8006614:	200143f4 	.word	0x200143f4
 8006618:	e0001004 	.word	0xe0001004

0800661c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006624:	4a04      	ldr	r2, [pc, #16]	; (8006638 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6113      	str	r3, [r2, #16]
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200143fc 	.word	0x200143fc

0800663c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006644:	f3ef 8311 	mrs	r3, BASEPRI
 8006648:	f04f 0120 	mov.w	r1, #32
 800664c:	f381 8811 	msr	BASEPRI, r1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	4808      	ldr	r0, [pc, #32]	; (8006674 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006654:	f7ff fdc7 	bl	80061e6 <_PreparePacket>
 8006658:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	68b8      	ldr	r0, [r7, #8]
 8006660:	f7ff feb2 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f383 8811 	msr	BASEPRI, r3
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	2001442c 	.word	0x2001442c

08006678 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006682:	f3ef 8311 	mrs	r3, BASEPRI
 8006686:	f04f 0120 	mov.w	r1, #32
 800668a:	f381 8811 	msr	BASEPRI, r1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	4816      	ldr	r0, [pc, #88]	; (80066ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006692:	f7ff fda8 	bl	80061e6 <_PreparePacket>
 8006696:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	61fb      	str	r3, [r7, #28]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e00b      	b.n	80066be <SEGGER_SYSVIEW_RecordU32+0x46>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	1c59      	adds	r1, r3, #1
 80066ae:	61f9      	str	r1, [r7, #28]
 80066b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b7f      	cmp	r3, #127	; 0x7f
 80066c2:	d8f0      	bhi.n	80066a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	61fa      	str	r2, [r7, #28]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	6938      	ldr	r0, [r7, #16]
 80066da:	f7ff fe75 	bl	80063c8 <_SendPacket>
  RECORD_END();
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f383 8811 	msr	BASEPRI, r3
}
 80066e4:	bf00      	nop
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2001442c 	.word	0x2001442c

080066f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08c      	sub	sp, #48	; 0x30
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	f04f 0120 	mov.w	r1, #32
 8006704:	f381 8811 	msr	BASEPRI, r1
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	4825      	ldr	r0, [pc, #148]	; (80067a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800670c:	f7ff fd6b 	bl	80061e6 <_PreparePacket>
 8006710:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
 800671e:	e00b      	b.n	8006738 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	b2da      	uxtb	r2, r3
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	1c59      	adds	r1, r3, #1
 8006728:	62f9      	str	r1, [r7, #44]	; 0x2c
 800672a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	09db      	lsrs	r3, r3, #7
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	2b7f      	cmp	r3, #127	; 0x7f
 800673c:	d8f0      	bhi.n	8006720 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	e00b      	b.n	8006770 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	6279      	str	r1, [r7, #36]	; 0x24
 8006762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	623b      	str	r3, [r7, #32]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2b7f      	cmp	r3, #127	; 0x7f
 8006774:	d8f0      	bhi.n	8006758 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	627a      	str	r2, [r7, #36]	; 0x24
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	6979      	ldr	r1, [r7, #20]
 800678a:	69b8      	ldr	r0, [r7, #24]
 800678c:	f7ff fe1c 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f383 8811 	msr	BASEPRI, r3
}
 8006796:	bf00      	nop
 8006798:	3730      	adds	r7, #48	; 0x30
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	2001442c 	.word	0x2001442c

080067a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	; 0x38
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80067b2:	f3ef 8311 	mrs	r3, BASEPRI
 80067b6:	f04f 0120 	mov.w	r1, #32
 80067ba:	f381 8811 	msr	BASEPRI, r1
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	4832      	ldr	r0, [pc, #200]	; (800688c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80067c2:	f7ff fd10 	bl	80061e6 <_PreparePacket>
 80067c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30
 80067d4:	e00b      	b.n	80067ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067dc:	1c59      	adds	r1, r3, #1
 80067de:	6379      	str	r1, [r7, #52]	; 0x34
 80067e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	09db      	lsrs	r3, r3, #7
 80067ec:	633b      	str	r3, [r7, #48]	; 0x30
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b7f      	cmp	r3, #127	; 0x7f
 80067f2:	d8f0      	bhi.n	80067d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	637a      	str	r2, [r7, #52]	; 0x34
 80067fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
 800680c:	e00b      	b.n	8006826 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	b2da      	uxtb	r2, r3
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	09db      	lsrs	r3, r3, #7
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	2b7f      	cmp	r3, #127	; 0x7f
 800682a:	d8f0      	bhi.n	800680e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	6279      	str	r1, [r7, #36]	; 0x24
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	627a      	str	r2, [r7, #36]	; 0x24
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	6979      	ldr	r1, [r7, #20]
 8006878:	69b8      	ldr	r0, [r7, #24]
 800687a:	f7ff fda5 	bl	80063c8 <_SendPacket>
  RECORD_END();
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
 8006886:	3738      	adds	r7, #56	; 0x38
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	2001442c 	.word	0x2001442c

08006890 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b090      	sub	sp, #64	; 0x40
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800689e:	f3ef 8311 	mrs	r3, BASEPRI
 80068a2:	f04f 0120 	mov.w	r1, #32
 80068a6:	f381 8811 	msr	BASEPRI, r1
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	4840      	ldr	r0, [pc, #256]	; (80069b0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80068ae:	f7ff fc9a 	bl	80061e6 <_PreparePacket>
 80068b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c0:	e00b      	b.n	80068da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c8:	1c59      	adds	r1, r3, #1
 80068ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068dc:	2b7f      	cmp	r3, #127	; 0x7f
 80068de:	d8f0      	bhi.n	80068c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80068e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
 80068f8:	e00b      	b.n	8006912 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	6379      	str	r1, [r7, #52]	; 0x34
 8006904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	633b      	str	r3, [r7, #48]	; 0x30
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	2b7f      	cmp	r3, #127	; 0x7f
 8006916:	d8f0      	bhi.n	80068fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	637a      	str	r2, [r7, #52]	; 0x34
 800691e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006930:	e00b      	b.n	800694a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	b2da      	uxtb	r2, r3
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	1c59      	adds	r1, r3, #1
 800693a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800693c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	09db      	lsrs	r3, r3, #7
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	2b7f      	cmp	r3, #127	; 0x7f
 800694e:	d8f0      	bhi.n	8006932 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	e00b      	b.n	8006982 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	6279      	str	r1, [r7, #36]	; 0x24
 8006974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b7f      	cmp	r3, #127	; 0x7f
 8006986:	d8f0      	bhi.n	800696a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	627a      	str	r2, [r7, #36]	; 0x24
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	69b8      	ldr	r0, [r7, #24]
 800699e:	f7ff fd13 	bl	80063c8 <_SendPacket>
  RECORD_END();
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	f383 8811 	msr	BASEPRI, r3
}
 80069a8:	bf00      	nop
 80069aa:	3740      	adds	r7, #64	; 0x40
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	2001442c 	.word	0x2001442c

080069b4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08c      	sub	sp, #48	; 0x30
 80069b8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80069ba:	4b58      	ldr	r3, [pc, #352]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 80069bc:	2201      	movs	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80069c0:	f3ef 8311 	mrs	r3, BASEPRI
 80069c4:	f04f 0120 	mov.w	r1, #32
 80069c8:	f381 8811 	msr	BASEPRI, r1
 80069cc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80069ce:	4b53      	ldr	r3, [pc, #332]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	220a      	movs	r2, #10
 80069d4:	4952      	ldr	r1, [pc, #328]	; (8006b20 <SEGGER_SYSVIEW_Start+0x16c>)
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7f9 fbfa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80069e2:	200a      	movs	r0, #10
 80069e4:	f7ff fe2a 	bl	800663c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069e8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ec:	f04f 0120 	mov.w	r1, #32
 80069f0:	f381 8811 	msr	BASEPRI, r1
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	484b      	ldr	r0, [pc, #300]	; (8006b24 <SEGGER_SYSVIEW_Start+0x170>)
 80069f8:	f7ff fbf5 	bl	80061e6 <_PreparePacket>
 80069fc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a06:	4b45      	ldr	r3, [pc, #276]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0c:	e00b      	b.n	8006a26 <SEGGER_SYSVIEW_Start+0x72>
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	09db      	lsrs	r3, r3, #7
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	2b7f      	cmp	r3, #127	; 0x7f
 8006a2a:	d8f0      	bhi.n	8006a0e <SEGGER_SYSVIEW_Start+0x5a>
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a40:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	623b      	str	r3, [r7, #32]
 8006a46:	e00b      	b.n	8006a60 <SEGGER_SYSVIEW_Start+0xac>
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	6279      	str	r1, [r7, #36]	; 0x24
 8006a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	09db      	lsrs	r3, r3, #7
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2b7f      	cmp	r3, #127	; 0x7f
 8006a64:	d8f0      	bhi.n	8006a48 <SEGGER_SYSVIEW_Start+0x94>
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_Start+0xe6>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	61f9      	str	r1, [r7, #28]
 8006a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_Start+0xce>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	e00b      	b.n	8006ad2 <SEGGER_SYSVIEW_Start+0x11e>
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1c59      	adds	r1, r3, #1
 8006ac2:	6179      	str	r1, [r7, #20]
 8006ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	09db      	lsrs	r3, r3, #7
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad6:	d8f0      	bhi.n	8006aba <SEGGER_SYSVIEW_Start+0x106>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	617a      	str	r2, [r7, #20]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ae8:	2218      	movs	r2, #24
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fc6b 	bl	80063c8 <_SendPacket>
      RECORD_END();
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <SEGGER_SYSVIEW_Start+0x168>)
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006b06:	f000 f9eb 	bl	8006ee0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006b0a:	f000 f9b1 	bl	8006e70 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006b0e:	f000 fc83 	bl	8007418 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006b12:	bf00      	nop
 8006b14:	3730      	adds	r7, #48	; 0x30
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200143fc 	.word	0x200143fc
 8006b20:	08008150 	.word	0x08008150
 8006b24:	2001442c 	.word	0x2001442c

08006b28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b32:	f04f 0120 	mov.w	r1, #32
 8006b36:	f381 8811 	msr	BASEPRI, r1
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <SEGGER_SYSVIEW_Stop+0x44>)
 8006b3e:	f7ff fb52 	bl	80061e6 <_PreparePacket>
 8006b42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b4c:	220b      	movs	r2, #11
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	f7ff fc39 	bl	80063c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f383 8811 	msr	BASEPRI, r3
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	2001442c 	.word	0x2001442c
 8006b70:	200143fc 	.word	0x200143fc

08006b74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b7e:	f04f 0120 	mov.w	r1, #32
 8006b82:	f381 8811 	msr	BASEPRI, r1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	4845      	ldr	r0, [pc, #276]	; (8006ca0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b8a:	f7ff fb2c 	bl	80061e6 <_PreparePacket>
 8006b8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b98:	4b42      	ldr	r3, [pc, #264]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9e:	e00b      	b.n	8006bb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	09db      	lsrs	r3, r3, #7
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2b7f      	cmp	r3, #127	; 0x7f
 8006bbc:	d8f0      	bhi.n	8006ba0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	623b      	str	r3, [r7, #32]
 8006bd8:	e00b      	b.n	8006bf2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1c59      	adds	r1, r3, #1
 8006be2:	6279      	str	r1, [r7, #36]	; 0x24
 8006be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	09db      	lsrs	r3, r3, #7
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf6:	d8f0      	bhi.n	8006bda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e00b      	b.n	8006c2c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	61f9      	str	r1, [r7, #28]
 8006c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	09db      	lsrs	r3, r3, #7
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c30:	d8f0      	bhi.n	8006c14 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e00b      	b.n	8006c64 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1c59      	adds	r1, r3, #1
 8006c54:	6179      	str	r1, [r7, #20]
 8006c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	09db      	lsrs	r3, r3, #7
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b7f      	cmp	r3, #127	; 0x7f
 8006c68:	d8f0      	bhi.n	8006c4c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	617a      	str	r2, [r7, #20]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c7a:	2218      	movs	r2, #24
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f7ff fba2 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c8a:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	4798      	blx	r3
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3730      	adds	r7, #48	; 0x30
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	2001442c 	.word	0x2001442c
 8006ca4:	200143fc 	.word	0x200143fc

08006ca8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b092      	sub	sp, #72	; 0x48
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb4:	f04f 0120 	mov.w	r1, #32
 8006cb8:	f381 8811 	msr	BASEPRI, r1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	486a      	ldr	r0, [pc, #424]	; (8006e68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006cc0:	f7ff fa91 	bl	80061e6 <_PreparePacket>
 8006cc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	6479      	str	r1, [r7, #68]	; 0x44
 8006ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8006cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	647a      	str	r2, [r7, #68]	; 0x44
 8006d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d14:	e00b      	b.n	8006d2e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	09db      	lsrs	r3, r3, #7
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b7f      	cmp	r3, #127	; 0x7f
 8006d32:	d8f0      	bhi.n	8006d16 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff f9fd 	bl	800614c <_EncodeStr>
 8006d52:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006d54:	2209      	movs	r2, #9
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f7ff fb35 	bl	80063c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b40      	ldr	r3, [pc, #256]	; (8006e6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 8006d72:	e00b      	b.n	8006d8c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	6379      	str	r1, [r7, #52]	; 0x34
 8006d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	09db      	lsrs	r3, r3, #7
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d90:	d8f0      	bhi.n	8006d74 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	637a      	str	r2, [r7, #52]	; 0x34
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dac:	e00b      	b.n	8006dc6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	09db      	lsrs	r3, r3, #7
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dca:	d8f0      	bhi.n	8006dae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	e00b      	b.n	8006e00 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	6279      	str	r1, [r7, #36]	; 0x24
 8006df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	09db      	lsrs	r3, r3, #7
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	2b7f      	cmp	r3, #127	; 0x7f
 8006e04:	d8f0      	bhi.n	8006de8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e0c:	6a3a      	ldr	r2, [r7, #32]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e00b      	b.n	8006e38 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	61f9      	str	r1, [r7, #28]
 8006e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	09db      	lsrs	r3, r3, #7
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3c:	d8f0      	bhi.n	8006e20 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	61fa      	str	r2, [r7, #28]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006e4e:	2215      	movs	r2, #21
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	6938      	ldr	r0, [r7, #16]
 8006e54:	f7ff fab8 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f383 8811 	msr	BASEPRI, r3
}
 8006e5e:	bf00      	nop
 8006e60:	3748      	adds	r7, #72	; 0x48
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2001442c 	.word	0x2001442c
 8006e6c:	200143fc 	.word	0x200143fc

08006e70 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006e86:	4b03      	ldr	r3, [pc, #12]	; (8006e94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4798      	blx	r3
  }
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	200143fc 	.word	0x200143fc

08006e98 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea4:	f04f 0120 	mov.w	r1, #32
 8006ea8:	f381 8811 	msr	BASEPRI, r1
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	480b      	ldr	r0, [pc, #44]	; (8006edc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006eb0:	f7ff f999 	bl	80061e6 <_PreparePacket>
 8006eb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	6938      	ldr	r0, [r7, #16]
 8006ebc:	f7ff f946 	bl	800614c <_EncodeStr>
 8006ec0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ec2:	220e      	movs	r2, #14
 8006ec4:	68f9      	ldr	r1, [r7, #12]
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f7ff fa7e 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f383 8811 	msr	BASEPRI, r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2001442c 	.word	0x2001442c

08006ee0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006ee0:	b590      	push	{r4, r7, lr}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006ee6:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d01a      	beq.n	8006f24 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006ef8:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4798      	blx	r3
 8006f00:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f04:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	000a      	movs	r2, r1
 8006f14:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f16:	4613      	mov	r3, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	200d      	movs	r0, #13
 8006f1e:	f7ff fbe7 	bl	80066f0 <SEGGER_SYSVIEW_RecordU32x2>
 8006f22:	e006      	b.n	8006f32 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	200c      	movs	r0, #12
 8006f2c:	f7ff fba4 	bl	8006678 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd90      	pop	{r4, r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200143fc 	.word	0x200143fc
 8006f40:	e0001004 	.word	0xe0001004

08006f44 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f4e:	f04f 0120 	mov.w	r1, #32
 8006f52:	f381 8811 	msr	BASEPRI, r1
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	4819      	ldr	r0, [pc, #100]	; (8006fc0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006f5a:	f7ff f944 	bl	80061e6 <_PreparePacket>
 8006f5e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006f64:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	e00b      	b.n	8006f90 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	1c59      	adds	r1, r3, #1
 8006f80:	6179      	str	r1, [r7, #20]
 8006f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	09db      	lsrs	r3, r3, #7
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b7f      	cmp	r3, #127	; 0x7f
 8006f94:	d8f0      	bhi.n	8006f78 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	617a      	str	r2, [r7, #20]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	68b8      	ldr	r0, [r7, #8]
 8006fac:	f7ff fa0c 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f383 8811 	msr	BASEPRI, r3
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	2001442c 	.word	0x2001442c
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fce:	f3ef 8311 	mrs	r3, BASEPRI
 8006fd2:	f04f 0120 	mov.w	r1, #32
 8006fd6:	f381 8811 	msr	BASEPRI, r1
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	4807      	ldr	r0, [pc, #28]	; (8006ffc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006fde:	f7ff f902 	bl	80061e6 <_PreparePacket>
 8006fe2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f7ff f9ed 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f383 8811 	msr	BASEPRI, r3
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	2001442c 	.word	0x2001442c

08007000 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007006:	f3ef 8311 	mrs	r3, BASEPRI
 800700a:	f04f 0120 	mov.w	r1, #32
 800700e:	f381 8811 	msr	BASEPRI, r1
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	4807      	ldr	r0, [pc, #28]	; (8007034 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007016:	f7ff f8e6 	bl	80061e6 <_PreparePacket>
 800701a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800701c:	2212      	movs	r2, #18
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6838      	ldr	r0, [r7, #0]
 8007022:	f7ff f9d1 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f383 8811 	msr	BASEPRI, r3
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2001442c 	.word	0x2001442c

08007038 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800703e:	f3ef 8311 	mrs	r3, BASEPRI
 8007042:	f04f 0120 	mov.w	r1, #32
 8007046:	f381 8811 	msr	BASEPRI, r1
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	4807      	ldr	r0, [pc, #28]	; (800706c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800704e:	f7ff f8ca 	bl	80061e6 <_PreparePacket>
 8007052:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007054:	2211      	movs	r2, #17
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6838      	ldr	r0, [r7, #0]
 800705a:	f7ff f9b5 	bl	80063c8 <_SendPacket>
  RECORD_END();
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f383 8811 	msr	BASEPRI, r3
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	2001442c 	.word	0x2001442c

08007070 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007078:	f3ef 8311 	mrs	r3, BASEPRI
 800707c:	f04f 0120 	mov.w	r1, #32
 8007080:	f381 8811 	msr	BASEPRI, r1
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	4819      	ldr	r0, [pc, #100]	; (80070ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007088:	f7ff f8ad 	bl	80061e6 <_PreparePacket>
 800708c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e00b      	b.n	80070be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	1c59      	adds	r1, r3, #1
 80070ae:	61f9      	str	r1, [r7, #28]
 80070b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	09db      	lsrs	r3, r3, #7
 80070bc:	61bb      	str	r3, [r7, #24]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b7f      	cmp	r3, #127	; 0x7f
 80070c2:	d8f0      	bhi.n	80070a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	61fa      	str	r2, [r7, #28]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80070d4:	2208      	movs	r2, #8
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	6938      	ldr	r0, [r7, #16]
 80070da:	f7ff f975 	bl	80063c8 <_SendPacket>
  RECORD_END();
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f383 8811 	msr	BASEPRI, r3
}
 80070e4:	bf00      	nop
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	2001442c 	.word	0x2001442c
 80070f0:	200143fc 	.word	0x200143fc

080070f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007100:	f04f 0120 	mov.w	r1, #32
 8007104:	f381 8811 	msr	BASEPRI, r1
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	4819      	ldr	r0, [pc, #100]	; (8007170 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800710c:	f7ff f86b 	bl	80061e6 <_PreparePacket>
 8007110:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007116:	4b17      	ldr	r3, [pc, #92]	; (8007174 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	61fb      	str	r3, [r7, #28]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	e00b      	b.n	8007142 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	b2da      	uxtb	r2, r3
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	61f9      	str	r1, [r7, #28]
 8007134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	09db      	lsrs	r3, r3, #7
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	2b7f      	cmp	r3, #127	; 0x7f
 8007146:	d8f0      	bhi.n	800712a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	61fa      	str	r2, [r7, #28]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007158:	2204      	movs	r2, #4
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	6938      	ldr	r0, [r7, #16]
 800715e:	f7ff f933 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f383 8811 	msr	BASEPRI, r3
}
 8007168:	bf00      	nop
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	2001442c 	.word	0x2001442c
 8007174:	200143fc 	.word	0x200143fc

08007178 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007180:	f3ef 8311 	mrs	r3, BASEPRI
 8007184:	f04f 0120 	mov.w	r1, #32
 8007188:	f381 8811 	msr	BASEPRI, r1
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4819      	ldr	r0, [pc, #100]	; (80071f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007190:	f7ff f829 	bl	80061e6 <_PreparePacket>
 8007194:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800719a:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	61f9      	str	r1, [r7, #28]
 80071b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	61fa      	str	r2, [r7, #28]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80071dc:	2206      	movs	r2, #6
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6938      	ldr	r0, [r7, #16]
 80071e2:	f7ff f8f1 	bl	80063c8 <_SendPacket>
  RECORD_END();
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f383 8811 	msr	BASEPRI, r3
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	2001442c 	.word	0x2001442c
 80071f8:	200143fc 	.word	0x200143fc

080071fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	; 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007206:	f3ef 8311 	mrs	r3, BASEPRI
 800720a:	f04f 0120 	mov.w	r1, #32
 800720e:	f381 8811 	msr	BASEPRI, r1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	4827      	ldr	r0, [pc, #156]	; (80072b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007216:	f7fe ffe6 	bl	80061e6 <_PreparePacket>
 800721a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	e00b      	b.n	800724c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	6279      	str	r1, [r7, #36]	; 0x24
 800723e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	09db      	lsrs	r3, r3, #7
 800724a:	623b      	str	r3, [r7, #32]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2b7f      	cmp	r3, #127	; 0x7f
 8007250:	d8f0      	bhi.n	8007234 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	627a      	str	r2, [r7, #36]	; 0x24
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e00b      	b.n	8007284 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	61f9      	str	r1, [r7, #28]
 8007276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	09db      	lsrs	r3, r3, #7
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b7f      	cmp	r3, #127	; 0x7f
 8007288:	d8f0      	bhi.n	800726c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	61fa      	str	r2, [r7, #28]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800729a:	2207      	movs	r2, #7
 800729c:	68f9      	ldr	r1, [r7, #12]
 800729e:	6938      	ldr	r0, [r7, #16]
 80072a0:	f7ff f892 	bl	80063c8 <_SendPacket>
  RECORD_END();
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f383 8811 	msr	BASEPRI, r3
}
 80072aa:	bf00      	nop
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	2001442c 	.word	0x2001442c
 80072b8:	200143fc 	.word	0x200143fc

080072bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80072c4:	4b04      	ldr	r3, [pc, #16]	; (80072d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	200143fc 	.word	0x200143fc

080072dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80072e6:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d06d      	beq.n	80073ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80072ee:	4b39      	ldr	r3, [pc, #228]	; (80073d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80072f4:	2300      	movs	r3, #0
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f8:	e008      	b.n	800730c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	3301      	adds	r3, #1
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007310:	429a      	cmp	r2, r3
 8007312:	d3f2      	bcc.n	80072fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8007314:	e000      	b.n	8007318 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007316:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d055      	beq.n	80073ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800731e:	f3ef 8311 	mrs	r3, BASEPRI
 8007322:	f04f 0120 	mov.w	r1, #32
 8007326:	f381 8811 	msr	BASEPRI, r1
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	482a      	ldr	r0, [pc, #168]	; (80073d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800732e:	f7fe ff5a 	bl	80061e6 <_PreparePacket>
 8007332:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	e00b      	b.n	800735a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	1c59      	adds	r1, r3, #1
 800734a:	6279      	str	r1, [r7, #36]	; 0x24
 800734c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	09db      	lsrs	r3, r3, #7
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2b7f      	cmp	r3, #127	; 0x7f
 800735e:	d8f0      	bhi.n	8007342 <SEGGER_SYSVIEW_SendModule+0x66>
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	627a      	str	r2, [r7, #36]	; 0x24
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e00b      	b.n	8007394 <SEGGER_SYSVIEW_SendModule+0xb8>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1c59      	adds	r1, r3, #1
 8007384:	61f9      	str	r1, [r7, #28]
 8007386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	09db      	lsrs	r3, r3, #7
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b7f      	cmp	r3, #127	; 0x7f
 8007398:	d8f0      	bhi.n	800737c <SEGGER_SYSVIEW_SendModule+0xa0>
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	61fa      	str	r2, [r7, #28]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	4619      	mov	r1, r3
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7fe feca 	bl	800614c <_EncodeStr>
 80073b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80073ba:	2216      	movs	r2, #22
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	6938      	ldr	r0, [r7, #16]
 80073c0:	f7ff f802 	bl	80063c8 <_SendPacket>
      RECORD_END();
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80073ca:	bf00      	nop
 80073cc:	3730      	adds	r7, #48	; 0x30
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20014424 	.word	0x20014424
 80073d8:	2001442c 	.word	0x2001442c

080073dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80073e2:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00f      	beq.n	800740a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f2      	bne.n	80073f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20014424 	.word	0x20014424

08007418 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800741e:	f3ef 8311 	mrs	r3, BASEPRI
 8007422:	f04f 0120 	mov.w	r1, #32
 8007426:	f381 8811 	msr	BASEPRI, r1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	4817      	ldr	r0, [pc, #92]	; (800748c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800742e:	f7fe feda 	bl	80061e6 <_PreparePacket>
 8007432:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	4b14      	ldr	r3, [pc, #80]	; (8007490 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	e00b      	b.n	800745c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	b2da      	uxtb	r2, r3
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	1c59      	adds	r1, r3, #1
 800744c:	6179      	str	r1, [r7, #20]
 800744e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	09db      	lsrs	r3, r3, #7
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b7f      	cmp	r3, #127	; 0x7f
 8007460:	d8f0      	bhi.n	8007444 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	617a      	str	r2, [r7, #20]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007472:	221b      	movs	r2, #27
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	68b8      	ldr	r0, [r7, #8]
 8007478:	f7fe ffa6 	bl	80063c8 <_SendPacket>
  RECORD_END();
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f383 8811 	msr	BASEPRI, r3
}
 8007482:	bf00      	nop
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	2001442c 	.word	0x2001442c
 8007490:	20014428 	.word	0x20014428

08007494 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b08a      	sub	sp, #40	; 0x28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800749c:	f3ef 8311 	mrs	r3, BASEPRI
 80074a0:	f04f 0120 	mov.w	r1, #32
 80074a4:	f381 8811 	msr	BASEPRI, r1
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	4827      	ldr	r0, [pc, #156]	; (8007548 <SEGGER_SYSVIEW_Warn+0xb4>)
 80074ac:	f7fe fe9b 	bl	80061e6 <_PreparePacket>
 80074b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074b2:	2280      	movs	r2, #128	; 0x80
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	6938      	ldr	r0, [r7, #16]
 80074b8:	f7fe fe48 	bl	800614c <_EncodeStr>
 80074bc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
 80074c2:	2301      	movs	r3, #1
 80074c4:	623b      	str	r3, [r7, #32]
 80074c6:	e00b      	b.n	80074e0 <SEGGER_SYSVIEW_Warn+0x4c>
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	1c59      	adds	r1, r3, #1
 80074d0:	6279      	str	r1, [r7, #36]	; 0x24
 80074d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	09db      	lsrs	r3, r3, #7
 80074de:	623b      	str	r3, [r7, #32]
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b7f      	cmp	r3, #127	; 0x7f
 80074e4:	d8f0      	bhi.n	80074c8 <SEGGER_SYSVIEW_Warn+0x34>
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	627a      	str	r2, [r7, #36]	; 0x24
 80074ec:	6a3a      	ldr	r2, [r7, #32]
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	2300      	movs	r3, #0
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	e00b      	b.n	8007518 <SEGGER_SYSVIEW_Warn+0x84>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	b2da      	uxtb	r2, r3
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	1c59      	adds	r1, r3, #1
 8007508:	61f9      	str	r1, [r7, #28]
 800750a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	09db      	lsrs	r3, r3, #7
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b7f      	cmp	r3, #127	; 0x7f
 800751c:	d8f0      	bhi.n	8007500 <SEGGER_SYSVIEW_Warn+0x6c>
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	61fa      	str	r2, [r7, #28]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800752e:	221a      	movs	r2, #26
 8007530:	68f9      	ldr	r1, [r7, #12]
 8007532:	6938      	ldr	r0, [r7, #16]
 8007534:	f7fe ff48 	bl	80063c8 <_SendPacket>
  RECORD_END();
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	2001442c 	.word	0x2001442c

0800754c <__libc_init_array>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4d0d      	ldr	r5, [pc, #52]	; (8007584 <__libc_init_array+0x38>)
 8007550:	4c0d      	ldr	r4, [pc, #52]	; (8007588 <__libc_init_array+0x3c>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	2600      	movs	r6, #0
 8007558:	42a6      	cmp	r6, r4
 800755a:	d109      	bne.n	8007570 <__libc_init_array+0x24>
 800755c:	4d0b      	ldr	r5, [pc, #44]	; (800758c <__libc_init_array+0x40>)
 800755e:	4c0c      	ldr	r4, [pc, #48]	; (8007590 <__libc_init_array+0x44>)
 8007560:	f000 fd4a 	bl	8007ff8 <_init>
 8007564:	1b64      	subs	r4, r4, r5
 8007566:	10a4      	asrs	r4, r4, #2
 8007568:	2600      	movs	r6, #0
 800756a:	42a6      	cmp	r6, r4
 800756c:	d105      	bne.n	800757a <__libc_init_array+0x2e>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	f855 3b04 	ldr.w	r3, [r5], #4
 8007574:	4798      	blx	r3
 8007576:	3601      	adds	r6, #1
 8007578:	e7ee      	b.n	8007558 <__libc_init_array+0xc>
 800757a:	f855 3b04 	ldr.w	r3, [r5], #4
 800757e:	4798      	blx	r3
 8007580:	3601      	adds	r6, #1
 8007582:	e7f2      	b.n	800756a <__libc_init_array+0x1e>
 8007584:	080081c8 	.word	0x080081c8
 8007588:	080081c8 	.word	0x080081c8
 800758c:	080081c8 	.word	0x080081c8
 8007590:	080081cc 	.word	0x080081cc

08007594 <memcmp>:
 8007594:	b510      	push	{r4, lr}
 8007596:	3901      	subs	r1, #1
 8007598:	4402      	add	r2, r0
 800759a:	4290      	cmp	r0, r2
 800759c:	d101      	bne.n	80075a2 <memcmp+0xe>
 800759e:	2000      	movs	r0, #0
 80075a0:	e005      	b.n	80075ae <memcmp+0x1a>
 80075a2:	7803      	ldrb	r3, [r0, #0]
 80075a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	d001      	beq.n	80075b0 <memcmp+0x1c>
 80075ac:	1b18      	subs	r0, r3, r4
 80075ae:	bd10      	pop	{r4, pc}
 80075b0:	3001      	adds	r0, #1
 80075b2:	e7f2      	b.n	800759a <memcmp+0x6>

080075b4 <memcpy>:
 80075b4:	440a      	add	r2, r1
 80075b6:	4291      	cmp	r1, r2
 80075b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075bc:	d100      	bne.n	80075c0 <memcpy+0xc>
 80075be:	4770      	bx	lr
 80075c0:	b510      	push	{r4, lr}
 80075c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ca:	4291      	cmp	r1, r2
 80075cc:	d1f9      	bne.n	80075c2 <memcpy+0xe>
 80075ce:	bd10      	pop	{r4, pc}

080075d0 <memset>:
 80075d0:	4402      	add	r2, r0
 80075d2:	4603      	mov	r3, r0
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d100      	bne.n	80075da <memset+0xa>
 80075d8:	4770      	bx	lr
 80075da:	f803 1b01 	strb.w	r1, [r3], #1
 80075de:	e7f9      	b.n	80075d4 <memset+0x4>

080075e0 <_puts_r>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	460e      	mov	r6, r1
 80075e4:	4605      	mov	r5, r0
 80075e6:	b118      	cbz	r0, 80075f0 <_puts_r+0x10>
 80075e8:	6983      	ldr	r3, [r0, #24]
 80075ea:	b90b      	cbnz	r3, 80075f0 <_puts_r+0x10>
 80075ec:	f000 fa48 	bl	8007a80 <__sinit>
 80075f0:	69ab      	ldr	r3, [r5, #24]
 80075f2:	68ac      	ldr	r4, [r5, #8]
 80075f4:	b913      	cbnz	r3, 80075fc <_puts_r+0x1c>
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 fa42 	bl	8007a80 <__sinit>
 80075fc:	4b2c      	ldr	r3, [pc, #176]	; (80076b0 <_puts_r+0xd0>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d120      	bne.n	8007644 <_puts_r+0x64>
 8007602:	686c      	ldr	r4, [r5, #4]
 8007604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007606:	07db      	lsls	r3, r3, #31
 8007608:	d405      	bmi.n	8007616 <_puts_r+0x36>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	0598      	lsls	r0, r3, #22
 800760e:	d402      	bmi.n	8007616 <_puts_r+0x36>
 8007610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007612:	f000 fad3 	bl	8007bbc <__retarget_lock_acquire_recursive>
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	0719      	lsls	r1, r3, #28
 800761a:	d51d      	bpl.n	8007658 <_puts_r+0x78>
 800761c:	6923      	ldr	r3, [r4, #16]
 800761e:	b1db      	cbz	r3, 8007658 <_puts_r+0x78>
 8007620:	3e01      	subs	r6, #1
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007628:	3b01      	subs	r3, #1
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	bb39      	cbnz	r1, 800767e <_puts_r+0x9e>
 800762e:	2b00      	cmp	r3, #0
 8007630:	da38      	bge.n	80076a4 <_puts_r+0xc4>
 8007632:	4622      	mov	r2, r4
 8007634:	210a      	movs	r1, #10
 8007636:	4628      	mov	r0, r5
 8007638:	f000 f848 	bl	80076cc <__swbuf_r>
 800763c:	3001      	adds	r0, #1
 800763e:	d011      	beq.n	8007664 <_puts_r+0x84>
 8007640:	250a      	movs	r5, #10
 8007642:	e011      	b.n	8007668 <_puts_r+0x88>
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <_puts_r+0xd4>)
 8007646:	429c      	cmp	r4, r3
 8007648:	d101      	bne.n	800764e <_puts_r+0x6e>
 800764a:	68ac      	ldr	r4, [r5, #8]
 800764c:	e7da      	b.n	8007604 <_puts_r+0x24>
 800764e:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <_puts_r+0xd8>)
 8007650:	429c      	cmp	r4, r3
 8007652:	bf08      	it	eq
 8007654:	68ec      	ldreq	r4, [r5, #12]
 8007656:	e7d5      	b.n	8007604 <_puts_r+0x24>
 8007658:	4621      	mov	r1, r4
 800765a:	4628      	mov	r0, r5
 800765c:	f000 f888 	bl	8007770 <__swsetup_r>
 8007660:	2800      	cmp	r0, #0
 8007662:	d0dd      	beq.n	8007620 <_puts_r+0x40>
 8007664:	f04f 35ff 	mov.w	r5, #4294967295
 8007668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800766a:	07da      	lsls	r2, r3, #31
 800766c:	d405      	bmi.n	800767a <_puts_r+0x9a>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	059b      	lsls	r3, r3, #22
 8007672:	d402      	bmi.n	800767a <_puts_r+0x9a>
 8007674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007676:	f000 faa2 	bl	8007bbe <__retarget_lock_release_recursive>
 800767a:	4628      	mov	r0, r5
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	2b00      	cmp	r3, #0
 8007680:	da04      	bge.n	800768c <_puts_r+0xac>
 8007682:	69a2      	ldr	r2, [r4, #24]
 8007684:	429a      	cmp	r2, r3
 8007686:	dc06      	bgt.n	8007696 <_puts_r+0xb6>
 8007688:	290a      	cmp	r1, #10
 800768a:	d004      	beq.n	8007696 <_puts_r+0xb6>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	6022      	str	r2, [r4, #0]
 8007692:	7019      	strb	r1, [r3, #0]
 8007694:	e7c5      	b.n	8007622 <_puts_r+0x42>
 8007696:	4622      	mov	r2, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 f817 	bl	80076cc <__swbuf_r>
 800769e:	3001      	adds	r0, #1
 80076a0:	d1bf      	bne.n	8007622 <_puts_r+0x42>
 80076a2:	e7df      	b.n	8007664 <_puts_r+0x84>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	250a      	movs	r5, #10
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	701d      	strb	r5, [r3, #0]
 80076ae:	e7db      	b.n	8007668 <_puts_r+0x88>
 80076b0:	08008180 	.word	0x08008180
 80076b4:	080081a0 	.word	0x080081a0
 80076b8:	08008160 	.word	0x08008160

080076bc <puts>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <puts+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f7ff bf8d 	b.w	80075e0 <_puts_r>
 80076c6:	bf00      	nop
 80076c8:	20000014 	.word	0x20000014

080076cc <__swbuf_r>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	460e      	mov	r6, r1
 80076d0:	4614      	mov	r4, r2
 80076d2:	4605      	mov	r5, r0
 80076d4:	b118      	cbz	r0, 80076de <__swbuf_r+0x12>
 80076d6:	6983      	ldr	r3, [r0, #24]
 80076d8:	b90b      	cbnz	r3, 80076de <__swbuf_r+0x12>
 80076da:	f000 f9d1 	bl	8007a80 <__sinit>
 80076de:	4b21      	ldr	r3, [pc, #132]	; (8007764 <__swbuf_r+0x98>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d12b      	bne.n	800773c <__swbuf_r+0x70>
 80076e4:	686c      	ldr	r4, [r5, #4]
 80076e6:	69a3      	ldr	r3, [r4, #24]
 80076e8:	60a3      	str	r3, [r4, #8]
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	071a      	lsls	r2, r3, #28
 80076ee:	d52f      	bpl.n	8007750 <__swbuf_r+0x84>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	b36b      	cbz	r3, 8007750 <__swbuf_r+0x84>
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	1ac0      	subs	r0, r0, r3
 80076fa:	6963      	ldr	r3, [r4, #20]
 80076fc:	b2f6      	uxtb	r6, r6
 80076fe:	4283      	cmp	r3, r0
 8007700:	4637      	mov	r7, r6
 8007702:	dc04      	bgt.n	800770e <__swbuf_r+0x42>
 8007704:	4621      	mov	r1, r4
 8007706:	4628      	mov	r0, r5
 8007708:	f000 f926 	bl	8007958 <_fflush_r>
 800770c:	bb30      	cbnz	r0, 800775c <__swbuf_r+0x90>
 800770e:	68a3      	ldr	r3, [r4, #8]
 8007710:	3b01      	subs	r3, #1
 8007712:	60a3      	str	r3, [r4, #8]
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	6022      	str	r2, [r4, #0]
 800771a:	701e      	strb	r6, [r3, #0]
 800771c:	6963      	ldr	r3, [r4, #20]
 800771e:	3001      	adds	r0, #1
 8007720:	4283      	cmp	r3, r0
 8007722:	d004      	beq.n	800772e <__swbuf_r+0x62>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	07db      	lsls	r3, r3, #31
 8007728:	d506      	bpl.n	8007738 <__swbuf_r+0x6c>
 800772a:	2e0a      	cmp	r6, #10
 800772c:	d104      	bne.n	8007738 <__swbuf_r+0x6c>
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f000 f911 	bl	8007958 <_fflush_r>
 8007736:	b988      	cbnz	r0, 800775c <__swbuf_r+0x90>
 8007738:	4638      	mov	r0, r7
 800773a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <__swbuf_r+0x9c>)
 800773e:	429c      	cmp	r4, r3
 8007740:	d101      	bne.n	8007746 <__swbuf_r+0x7a>
 8007742:	68ac      	ldr	r4, [r5, #8]
 8007744:	e7cf      	b.n	80076e6 <__swbuf_r+0x1a>
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <__swbuf_r+0xa0>)
 8007748:	429c      	cmp	r4, r3
 800774a:	bf08      	it	eq
 800774c:	68ec      	ldreq	r4, [r5, #12]
 800774e:	e7ca      	b.n	80076e6 <__swbuf_r+0x1a>
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f000 f80c 	bl	8007770 <__swsetup_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0cb      	beq.n	80076f4 <__swbuf_r+0x28>
 800775c:	f04f 37ff 	mov.w	r7, #4294967295
 8007760:	e7ea      	b.n	8007738 <__swbuf_r+0x6c>
 8007762:	bf00      	nop
 8007764:	08008180 	.word	0x08008180
 8007768:	080081a0 	.word	0x080081a0
 800776c:	08008160 	.word	0x08008160

08007770 <__swsetup_r>:
 8007770:	4b32      	ldr	r3, [pc, #200]	; (800783c <__swsetup_r+0xcc>)
 8007772:	b570      	push	{r4, r5, r6, lr}
 8007774:	681d      	ldr	r5, [r3, #0]
 8007776:	4606      	mov	r6, r0
 8007778:	460c      	mov	r4, r1
 800777a:	b125      	cbz	r5, 8007786 <__swsetup_r+0x16>
 800777c:	69ab      	ldr	r3, [r5, #24]
 800777e:	b913      	cbnz	r3, 8007786 <__swsetup_r+0x16>
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f97d 	bl	8007a80 <__sinit>
 8007786:	4b2e      	ldr	r3, [pc, #184]	; (8007840 <__swsetup_r+0xd0>)
 8007788:	429c      	cmp	r4, r3
 800778a:	d10f      	bne.n	80077ac <__swsetup_r+0x3c>
 800778c:	686c      	ldr	r4, [r5, #4]
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007794:	0719      	lsls	r1, r3, #28
 8007796:	d42c      	bmi.n	80077f2 <__swsetup_r+0x82>
 8007798:	06dd      	lsls	r5, r3, #27
 800779a:	d411      	bmi.n	80077c0 <__swsetup_r+0x50>
 800779c:	2309      	movs	r3, #9
 800779e:	6033      	str	r3, [r6, #0]
 80077a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	f04f 30ff 	mov.w	r0, #4294967295
 80077aa:	e03e      	b.n	800782a <__swsetup_r+0xba>
 80077ac:	4b25      	ldr	r3, [pc, #148]	; (8007844 <__swsetup_r+0xd4>)
 80077ae:	429c      	cmp	r4, r3
 80077b0:	d101      	bne.n	80077b6 <__swsetup_r+0x46>
 80077b2:	68ac      	ldr	r4, [r5, #8]
 80077b4:	e7eb      	b.n	800778e <__swsetup_r+0x1e>
 80077b6:	4b24      	ldr	r3, [pc, #144]	; (8007848 <__swsetup_r+0xd8>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	bf08      	it	eq
 80077bc:	68ec      	ldreq	r4, [r5, #12]
 80077be:	e7e6      	b.n	800778e <__swsetup_r+0x1e>
 80077c0:	0758      	lsls	r0, r3, #29
 80077c2:	d512      	bpl.n	80077ea <__swsetup_r+0x7a>
 80077c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c6:	b141      	cbz	r1, 80077da <__swsetup_r+0x6a>
 80077c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077cc:	4299      	cmp	r1, r3
 80077ce:	d002      	beq.n	80077d6 <__swsetup_r+0x66>
 80077d0:	4630      	mov	r0, r6
 80077d2:	f000 fa5b 	bl	8007c8c <_free_r>
 80077d6:	2300      	movs	r3, #0
 80077d8:	6363      	str	r3, [r4, #52]	; 0x34
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	2300      	movs	r3, #0
 80077e4:	6063      	str	r3, [r4, #4]
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	f043 0308 	orr.w	r3, r3, #8
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	b94b      	cbnz	r3, 800780a <__swsetup_r+0x9a>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007800:	d003      	beq.n	800780a <__swsetup_r+0x9a>
 8007802:	4621      	mov	r1, r4
 8007804:	4630      	mov	r0, r6
 8007806:	f000 fa01 	bl	8007c0c <__smakebuf_r>
 800780a:	89a0      	ldrh	r0, [r4, #12]
 800780c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007810:	f010 0301 	ands.w	r3, r0, #1
 8007814:	d00a      	beq.n	800782c <__swsetup_r+0xbc>
 8007816:	2300      	movs	r3, #0
 8007818:	60a3      	str	r3, [r4, #8]
 800781a:	6963      	ldr	r3, [r4, #20]
 800781c:	425b      	negs	r3, r3
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	b943      	cbnz	r3, 8007836 <__swsetup_r+0xc6>
 8007824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007828:	d1ba      	bne.n	80077a0 <__swsetup_r+0x30>
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	0781      	lsls	r1, r0, #30
 800782e:	bf58      	it	pl
 8007830:	6963      	ldrpl	r3, [r4, #20]
 8007832:	60a3      	str	r3, [r4, #8]
 8007834:	e7f4      	b.n	8007820 <__swsetup_r+0xb0>
 8007836:	2000      	movs	r0, #0
 8007838:	e7f7      	b.n	800782a <__swsetup_r+0xba>
 800783a:	bf00      	nop
 800783c:	20000014 	.word	0x20000014
 8007840:	08008180 	.word	0x08008180
 8007844:	080081a0 	.word	0x080081a0
 8007848:	08008160 	.word	0x08008160

0800784c <__sflush_r>:
 800784c:	898a      	ldrh	r2, [r1, #12]
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	4605      	mov	r5, r0
 8007854:	0710      	lsls	r0, r2, #28
 8007856:	460c      	mov	r4, r1
 8007858:	d458      	bmi.n	800790c <__sflush_r+0xc0>
 800785a:	684b      	ldr	r3, [r1, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dc05      	bgt.n	800786c <__sflush_r+0x20>
 8007860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	dc02      	bgt.n	800786c <__sflush_r+0x20>
 8007866:	2000      	movs	r0, #0
 8007868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786e:	2e00      	cmp	r6, #0
 8007870:	d0f9      	beq.n	8007866 <__sflush_r+0x1a>
 8007872:	2300      	movs	r3, #0
 8007874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007878:	682f      	ldr	r7, [r5, #0]
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	d032      	beq.n	80078e4 <__sflush_r+0x98>
 800787e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	075a      	lsls	r2, r3, #29
 8007884:	d505      	bpl.n	8007892 <__sflush_r+0x46>
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800788c:	b10b      	cbz	r3, 8007892 <__sflush_r+0x46>
 800788e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007890:	1ac0      	subs	r0, r0, r3
 8007892:	2300      	movs	r3, #0
 8007894:	4602      	mov	r2, r0
 8007896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007898:	6a21      	ldr	r1, [r4, #32]
 800789a:	4628      	mov	r0, r5
 800789c:	47b0      	blx	r6
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	d106      	bne.n	80078b2 <__sflush_r+0x66>
 80078a4:	6829      	ldr	r1, [r5, #0]
 80078a6:	291d      	cmp	r1, #29
 80078a8:	d82c      	bhi.n	8007904 <__sflush_r+0xb8>
 80078aa:	4a2a      	ldr	r2, [pc, #168]	; (8007954 <__sflush_r+0x108>)
 80078ac:	40ca      	lsrs	r2, r1
 80078ae:	07d6      	lsls	r6, r2, #31
 80078b0:	d528      	bpl.n	8007904 <__sflush_r+0xb8>
 80078b2:	2200      	movs	r2, #0
 80078b4:	6062      	str	r2, [r4, #4]
 80078b6:	04d9      	lsls	r1, r3, #19
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	d504      	bpl.n	80078c8 <__sflush_r+0x7c>
 80078be:	1c42      	adds	r2, r0, #1
 80078c0:	d101      	bne.n	80078c6 <__sflush_r+0x7a>
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	b903      	cbnz	r3, 80078c8 <__sflush_r+0x7c>
 80078c6:	6560      	str	r0, [r4, #84]	; 0x54
 80078c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ca:	602f      	str	r7, [r5, #0]
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d0ca      	beq.n	8007866 <__sflush_r+0x1a>
 80078d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d4:	4299      	cmp	r1, r3
 80078d6:	d002      	beq.n	80078de <__sflush_r+0x92>
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 f9d7 	bl	8007c8c <_free_r>
 80078de:	2000      	movs	r0, #0
 80078e0:	6360      	str	r0, [r4, #52]	; 0x34
 80078e2:	e7c1      	b.n	8007868 <__sflush_r+0x1c>
 80078e4:	6a21      	ldr	r1, [r4, #32]
 80078e6:	2301      	movs	r3, #1
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b0      	blx	r6
 80078ec:	1c41      	adds	r1, r0, #1
 80078ee:	d1c7      	bne.n	8007880 <__sflush_r+0x34>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0c4      	beq.n	8007880 <__sflush_r+0x34>
 80078f6:	2b1d      	cmp	r3, #29
 80078f8:	d001      	beq.n	80078fe <__sflush_r+0xb2>
 80078fa:	2b16      	cmp	r3, #22
 80078fc:	d101      	bne.n	8007902 <__sflush_r+0xb6>
 80078fe:	602f      	str	r7, [r5, #0]
 8007900:	e7b1      	b.n	8007866 <__sflush_r+0x1a>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	e7ad      	b.n	8007868 <__sflush_r+0x1c>
 800790c:	690f      	ldr	r7, [r1, #16]
 800790e:	2f00      	cmp	r7, #0
 8007910:	d0a9      	beq.n	8007866 <__sflush_r+0x1a>
 8007912:	0793      	lsls	r3, r2, #30
 8007914:	680e      	ldr	r6, [r1, #0]
 8007916:	bf08      	it	eq
 8007918:	694b      	ldreq	r3, [r1, #20]
 800791a:	600f      	str	r7, [r1, #0]
 800791c:	bf18      	it	ne
 800791e:	2300      	movne	r3, #0
 8007920:	eba6 0807 	sub.w	r8, r6, r7
 8007924:	608b      	str	r3, [r1, #8]
 8007926:	f1b8 0f00 	cmp.w	r8, #0
 800792a:	dd9c      	ble.n	8007866 <__sflush_r+0x1a>
 800792c:	6a21      	ldr	r1, [r4, #32]
 800792e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007930:	4643      	mov	r3, r8
 8007932:	463a      	mov	r2, r7
 8007934:	4628      	mov	r0, r5
 8007936:	47b0      	blx	r6
 8007938:	2800      	cmp	r0, #0
 800793a:	dc06      	bgt.n	800794a <__sflush_r+0xfe>
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	e78e      	b.n	8007868 <__sflush_r+0x1c>
 800794a:	4407      	add	r7, r0
 800794c:	eba8 0800 	sub.w	r8, r8, r0
 8007950:	e7e9      	b.n	8007926 <__sflush_r+0xda>
 8007952:	bf00      	nop
 8007954:	20400001 	.word	0x20400001

08007958 <_fflush_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	690b      	ldr	r3, [r1, #16]
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	b913      	cbnz	r3, 8007968 <_fflush_r+0x10>
 8007962:	2500      	movs	r5, #0
 8007964:	4628      	mov	r0, r5
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	b118      	cbz	r0, 8007972 <_fflush_r+0x1a>
 800796a:	6983      	ldr	r3, [r0, #24]
 800796c:	b90b      	cbnz	r3, 8007972 <_fflush_r+0x1a>
 800796e:	f000 f887 	bl	8007a80 <__sinit>
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <_fflush_r+0x6c>)
 8007974:	429c      	cmp	r4, r3
 8007976:	d11b      	bne.n	80079b0 <_fflush_r+0x58>
 8007978:	686c      	ldr	r4, [r5, #4]
 800797a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0ef      	beq.n	8007962 <_fflush_r+0xa>
 8007982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007984:	07d0      	lsls	r0, r2, #31
 8007986:	d404      	bmi.n	8007992 <_fflush_r+0x3a>
 8007988:	0599      	lsls	r1, r3, #22
 800798a:	d402      	bmi.n	8007992 <_fflush_r+0x3a>
 800798c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798e:	f000 f915 	bl	8007bbc <__retarget_lock_acquire_recursive>
 8007992:	4628      	mov	r0, r5
 8007994:	4621      	mov	r1, r4
 8007996:	f7ff ff59 	bl	800784c <__sflush_r>
 800799a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800799c:	07da      	lsls	r2, r3, #31
 800799e:	4605      	mov	r5, r0
 80079a0:	d4e0      	bmi.n	8007964 <_fflush_r+0xc>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	059b      	lsls	r3, r3, #22
 80079a6:	d4dd      	bmi.n	8007964 <_fflush_r+0xc>
 80079a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079aa:	f000 f908 	bl	8007bbe <__retarget_lock_release_recursive>
 80079ae:	e7d9      	b.n	8007964 <_fflush_r+0xc>
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <_fflush_r+0x70>)
 80079b2:	429c      	cmp	r4, r3
 80079b4:	d101      	bne.n	80079ba <_fflush_r+0x62>
 80079b6:	68ac      	ldr	r4, [r5, #8]
 80079b8:	e7df      	b.n	800797a <_fflush_r+0x22>
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <_fflush_r+0x74>)
 80079bc:	429c      	cmp	r4, r3
 80079be:	bf08      	it	eq
 80079c0:	68ec      	ldreq	r4, [r5, #12]
 80079c2:	e7da      	b.n	800797a <_fflush_r+0x22>
 80079c4:	08008180 	.word	0x08008180
 80079c8:	080081a0 	.word	0x080081a0
 80079cc:	08008160 	.word	0x08008160

080079d0 <std>:
 80079d0:	2300      	movs	r3, #0
 80079d2:	b510      	push	{r4, lr}
 80079d4:	4604      	mov	r4, r0
 80079d6:	e9c0 3300 	strd	r3, r3, [r0]
 80079da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079de:	6083      	str	r3, [r0, #8]
 80079e0:	8181      	strh	r1, [r0, #12]
 80079e2:	6643      	str	r3, [r0, #100]	; 0x64
 80079e4:	81c2      	strh	r2, [r0, #14]
 80079e6:	6183      	str	r3, [r0, #24]
 80079e8:	4619      	mov	r1, r3
 80079ea:	2208      	movs	r2, #8
 80079ec:	305c      	adds	r0, #92	; 0x5c
 80079ee:	f7ff fdef 	bl	80075d0 <memset>
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <std+0x38>)
 80079f4:	6263      	str	r3, [r4, #36]	; 0x24
 80079f6:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <std+0x3c>)
 80079f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <std+0x40>)
 80079fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079fe:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <std+0x44>)
 8007a00:	6224      	str	r4, [r4, #32]
 8007a02:	6323      	str	r3, [r4, #48]	; 0x30
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	08007e6d 	.word	0x08007e6d
 8007a0c:	08007e8f 	.word	0x08007e8f
 8007a10:	08007ec7 	.word	0x08007ec7
 8007a14:	08007eeb 	.word	0x08007eeb

08007a18 <_cleanup_r>:
 8007a18:	4901      	ldr	r1, [pc, #4]	; (8007a20 <_cleanup_r+0x8>)
 8007a1a:	f000 b8af 	b.w	8007b7c <_fwalk_reent>
 8007a1e:	bf00      	nop
 8007a20:	08007959 	.word	0x08007959

08007a24 <__sfmoreglue>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	2268      	movs	r2, #104	; 0x68
 8007a28:	1e4d      	subs	r5, r1, #1
 8007a2a:	4355      	muls	r5, r2
 8007a2c:	460e      	mov	r6, r1
 8007a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a32:	f000 f997 	bl	8007d64 <_malloc_r>
 8007a36:	4604      	mov	r4, r0
 8007a38:	b140      	cbz	r0, 8007a4c <__sfmoreglue+0x28>
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	e9c0 1600 	strd	r1, r6, [r0]
 8007a40:	300c      	adds	r0, #12
 8007a42:	60a0      	str	r0, [r4, #8]
 8007a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a48:	f7ff fdc2 	bl	80075d0 <memset>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}

08007a50 <__sfp_lock_acquire>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__sfp_lock_acquire+0x8>)
 8007a52:	f000 b8b3 	b.w	8007bbc <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	20014510 	.word	0x20014510

08007a5c <__sfp_lock_release>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	; (8007a64 <__sfp_lock_release+0x8>)
 8007a5e:	f000 b8ae 	b.w	8007bbe <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	20014510 	.word	0x20014510

08007a68 <__sinit_lock_acquire>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__sinit_lock_acquire+0x8>)
 8007a6a:	f000 b8a7 	b.w	8007bbc <__retarget_lock_acquire_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20014511 	.word	0x20014511

08007a74 <__sinit_lock_release>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__sinit_lock_release+0x8>)
 8007a76:	f000 b8a2 	b.w	8007bbe <__retarget_lock_release_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20014511 	.word	0x20014511

08007a80 <__sinit>:
 8007a80:	b510      	push	{r4, lr}
 8007a82:	4604      	mov	r4, r0
 8007a84:	f7ff fff0 	bl	8007a68 <__sinit_lock_acquire>
 8007a88:	69a3      	ldr	r3, [r4, #24]
 8007a8a:	b11b      	cbz	r3, 8007a94 <__sinit+0x14>
 8007a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a90:	f7ff bff0 	b.w	8007a74 <__sinit_lock_release>
 8007a94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a98:	6523      	str	r3, [r4, #80]	; 0x50
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <__sinit+0x68>)
 8007a9c:	4a13      	ldr	r2, [pc, #76]	; (8007aec <__sinit+0x6c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	bf04      	itt	eq
 8007aa6:	2301      	moveq	r3, #1
 8007aa8:	61a3      	streq	r3, [r4, #24]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 f820 	bl	8007af0 <__sfp>
 8007ab0:	6060      	str	r0, [r4, #4]
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f81c 	bl	8007af0 <__sfp>
 8007ab8:	60a0      	str	r0, [r4, #8]
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f818 	bl	8007af0 <__sfp>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	60e0      	str	r0, [r4, #12]
 8007ac4:	2104      	movs	r1, #4
 8007ac6:	6860      	ldr	r0, [r4, #4]
 8007ac8:	f7ff ff82 	bl	80079d0 <std>
 8007acc:	68a0      	ldr	r0, [r4, #8]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	2109      	movs	r1, #9
 8007ad2:	f7ff ff7d 	bl	80079d0 <std>
 8007ad6:	68e0      	ldr	r0, [r4, #12]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	2112      	movs	r1, #18
 8007adc:	f7ff ff78 	bl	80079d0 <std>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	61a3      	str	r3, [r4, #24]
 8007ae4:	e7d2      	b.n	8007a8c <__sinit+0xc>
 8007ae6:	bf00      	nop
 8007ae8:	0800815c 	.word	0x0800815c
 8007aec:	08007a19 	.word	0x08007a19

08007af0 <__sfp>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	4607      	mov	r7, r0
 8007af4:	f7ff ffac 	bl	8007a50 <__sfp_lock_acquire>
 8007af8:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <__sfp+0x84>)
 8007afa:	681e      	ldr	r6, [r3, #0]
 8007afc:	69b3      	ldr	r3, [r6, #24]
 8007afe:	b913      	cbnz	r3, 8007b06 <__sfp+0x16>
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff ffbd 	bl	8007a80 <__sinit>
 8007b06:	3648      	adds	r6, #72	; 0x48
 8007b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	d503      	bpl.n	8007b18 <__sfp+0x28>
 8007b10:	6833      	ldr	r3, [r6, #0]
 8007b12:	b30b      	cbz	r3, 8007b58 <__sfp+0x68>
 8007b14:	6836      	ldr	r6, [r6, #0]
 8007b16:	e7f7      	b.n	8007b08 <__sfp+0x18>
 8007b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b1c:	b9d5      	cbnz	r5, 8007b54 <__sfp+0x64>
 8007b1e:	4b16      	ldr	r3, [pc, #88]	; (8007b78 <__sfp+0x88>)
 8007b20:	60e3      	str	r3, [r4, #12]
 8007b22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b26:	6665      	str	r5, [r4, #100]	; 0x64
 8007b28:	f000 f847 	bl	8007bba <__retarget_lock_init_recursive>
 8007b2c:	f7ff ff96 	bl	8007a5c <__sfp_lock_release>
 8007b30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b38:	6025      	str	r5, [r4, #0]
 8007b3a:	61a5      	str	r5, [r4, #24]
 8007b3c:	2208      	movs	r2, #8
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b44:	f7ff fd44 	bl	80075d0 <memset>
 8007b48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b50:	4620      	mov	r0, r4
 8007b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b54:	3468      	adds	r4, #104	; 0x68
 8007b56:	e7d9      	b.n	8007b0c <__sfp+0x1c>
 8007b58:	2104      	movs	r1, #4
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f7ff ff62 	bl	8007a24 <__sfmoreglue>
 8007b60:	4604      	mov	r4, r0
 8007b62:	6030      	str	r0, [r6, #0]
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d1d5      	bne.n	8007b14 <__sfp+0x24>
 8007b68:	f7ff ff78 	bl	8007a5c <__sfp_lock_release>
 8007b6c:	230c      	movs	r3, #12
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	e7ee      	b.n	8007b50 <__sfp+0x60>
 8007b72:	bf00      	nop
 8007b74:	0800815c 	.word	0x0800815c
 8007b78:	ffff0001 	.word	0xffff0001

08007b7c <_fwalk_reent>:
 8007b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b80:	4606      	mov	r6, r0
 8007b82:	4688      	mov	r8, r1
 8007b84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b88:	2700      	movs	r7, #0
 8007b8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b8e:	f1b9 0901 	subs.w	r9, r9, #1
 8007b92:	d505      	bpl.n	8007ba0 <_fwalk_reent+0x24>
 8007b94:	6824      	ldr	r4, [r4, #0]
 8007b96:	2c00      	cmp	r4, #0
 8007b98:	d1f7      	bne.n	8007b8a <_fwalk_reent+0xe>
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba0:	89ab      	ldrh	r3, [r5, #12]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d907      	bls.n	8007bb6 <_fwalk_reent+0x3a>
 8007ba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007baa:	3301      	adds	r3, #1
 8007bac:	d003      	beq.n	8007bb6 <_fwalk_reent+0x3a>
 8007bae:	4629      	mov	r1, r5
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	47c0      	blx	r8
 8007bb4:	4307      	orrs	r7, r0
 8007bb6:	3568      	adds	r5, #104	; 0x68
 8007bb8:	e7e9      	b.n	8007b8e <_fwalk_reent+0x12>

08007bba <__retarget_lock_init_recursive>:
 8007bba:	4770      	bx	lr

08007bbc <__retarget_lock_acquire_recursive>:
 8007bbc:	4770      	bx	lr

08007bbe <__retarget_lock_release_recursive>:
 8007bbe:	4770      	bx	lr

08007bc0 <__swhatbuf_r>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	b096      	sub	sp, #88	; 0x58
 8007bcc:	4614      	mov	r4, r2
 8007bce:	461d      	mov	r5, r3
 8007bd0:	da08      	bge.n	8007be4 <__swhatbuf_r+0x24>
 8007bd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	061a      	lsls	r2, r3, #24
 8007bdc:	d410      	bmi.n	8007c00 <__swhatbuf_r+0x40>
 8007bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be2:	e00e      	b.n	8007c02 <__swhatbuf_r+0x42>
 8007be4:	466a      	mov	r2, sp
 8007be6:	f000 f9a7 	bl	8007f38 <_fstat_r>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	dbf1      	blt.n	8007bd2 <__swhatbuf_r+0x12>
 8007bee:	9a01      	ldr	r2, [sp, #4]
 8007bf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bf8:	425a      	negs	r2, r3
 8007bfa:	415a      	adcs	r2, r3
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	e7ee      	b.n	8007bde <__swhatbuf_r+0x1e>
 8007c00:	2340      	movs	r3, #64	; 0x40
 8007c02:	2000      	movs	r0, #0
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	b016      	add	sp, #88	; 0x58
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c0c <__smakebuf_r>:
 8007c0c:	898b      	ldrh	r3, [r1, #12]
 8007c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c10:	079d      	lsls	r5, r3, #30
 8007c12:	4606      	mov	r6, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	d507      	bpl.n	8007c28 <__smakebuf_r+0x1c>
 8007c18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	6123      	str	r3, [r4, #16]
 8007c20:	2301      	movs	r3, #1
 8007c22:	6163      	str	r3, [r4, #20]
 8007c24:	b002      	add	sp, #8
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	ab01      	add	r3, sp, #4
 8007c2a:	466a      	mov	r2, sp
 8007c2c:	f7ff ffc8 	bl	8007bc0 <__swhatbuf_r>
 8007c30:	9900      	ldr	r1, [sp, #0]
 8007c32:	4605      	mov	r5, r0
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 f895 	bl	8007d64 <_malloc_r>
 8007c3a:	b948      	cbnz	r0, 8007c50 <__smakebuf_r+0x44>
 8007c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c40:	059a      	lsls	r2, r3, #22
 8007c42:	d4ef      	bmi.n	8007c24 <__smakebuf_r+0x18>
 8007c44:	f023 0303 	bic.w	r3, r3, #3
 8007c48:	f043 0302 	orr.w	r3, r3, #2
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	e7e3      	b.n	8007c18 <__smakebuf_r+0xc>
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <__smakebuf_r+0x7c>)
 8007c52:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	6020      	str	r0, [r4, #0]
 8007c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	9b00      	ldr	r3, [sp, #0]
 8007c60:	6163      	str	r3, [r4, #20]
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	6120      	str	r0, [r4, #16]
 8007c66:	b15b      	cbz	r3, 8007c80 <__smakebuf_r+0x74>
 8007c68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f000 f975 	bl	8007f5c <_isatty_r>
 8007c72:	b128      	cbz	r0, 8007c80 <__smakebuf_r+0x74>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	f043 0301 	orr.w	r3, r3, #1
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	89a0      	ldrh	r0, [r4, #12]
 8007c82:	4305      	orrs	r5, r0
 8007c84:	81a5      	strh	r5, [r4, #12]
 8007c86:	e7cd      	b.n	8007c24 <__smakebuf_r+0x18>
 8007c88:	08007a19 	.word	0x08007a19

08007c8c <_free_r>:
 8007c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d044      	beq.n	8007d1c <_free_r+0x90>
 8007c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c96:	9001      	str	r0, [sp, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c9e:	bfb8      	it	lt
 8007ca0:	18e4      	addlt	r4, r4, r3
 8007ca2:	f000 f97d 	bl	8007fa0 <__malloc_lock>
 8007ca6:	4a1e      	ldr	r2, [pc, #120]	; (8007d20 <_free_r+0x94>)
 8007ca8:	9801      	ldr	r0, [sp, #4]
 8007caa:	6813      	ldr	r3, [r2, #0]
 8007cac:	b933      	cbnz	r3, 8007cbc <_free_r+0x30>
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	6014      	str	r4, [r2, #0]
 8007cb2:	b003      	add	sp, #12
 8007cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cb8:	f000 b978 	b.w	8007fac <__malloc_unlock>
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	d908      	bls.n	8007cd2 <_free_r+0x46>
 8007cc0:	6825      	ldr	r5, [r4, #0]
 8007cc2:	1961      	adds	r1, r4, r5
 8007cc4:	428b      	cmp	r3, r1
 8007cc6:	bf01      	itttt	eq
 8007cc8:	6819      	ldreq	r1, [r3, #0]
 8007cca:	685b      	ldreq	r3, [r3, #4]
 8007ccc:	1949      	addeq	r1, r1, r5
 8007cce:	6021      	streq	r1, [r4, #0]
 8007cd0:	e7ed      	b.n	8007cae <_free_r+0x22>
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	b10b      	cbz	r3, 8007cdc <_free_r+0x50>
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	d9fa      	bls.n	8007cd2 <_free_r+0x46>
 8007cdc:	6811      	ldr	r1, [r2, #0]
 8007cde:	1855      	adds	r5, r2, r1
 8007ce0:	42a5      	cmp	r5, r4
 8007ce2:	d10b      	bne.n	8007cfc <_free_r+0x70>
 8007ce4:	6824      	ldr	r4, [r4, #0]
 8007ce6:	4421      	add	r1, r4
 8007ce8:	1854      	adds	r4, r2, r1
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	6011      	str	r1, [r2, #0]
 8007cee:	d1e0      	bne.n	8007cb2 <_free_r+0x26>
 8007cf0:	681c      	ldr	r4, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	6053      	str	r3, [r2, #4]
 8007cf6:	4421      	add	r1, r4
 8007cf8:	6011      	str	r1, [r2, #0]
 8007cfa:	e7da      	b.n	8007cb2 <_free_r+0x26>
 8007cfc:	d902      	bls.n	8007d04 <_free_r+0x78>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	6003      	str	r3, [r0, #0]
 8007d02:	e7d6      	b.n	8007cb2 <_free_r+0x26>
 8007d04:	6825      	ldr	r5, [r4, #0]
 8007d06:	1961      	adds	r1, r4, r5
 8007d08:	428b      	cmp	r3, r1
 8007d0a:	bf04      	itt	eq
 8007d0c:	6819      	ldreq	r1, [r3, #0]
 8007d0e:	685b      	ldreq	r3, [r3, #4]
 8007d10:	6063      	str	r3, [r4, #4]
 8007d12:	bf04      	itt	eq
 8007d14:	1949      	addeq	r1, r1, r5
 8007d16:	6021      	streq	r1, [r4, #0]
 8007d18:	6054      	str	r4, [r2, #4]
 8007d1a:	e7ca      	b.n	8007cb2 <_free_r+0x26>
 8007d1c:	b003      	add	sp, #12
 8007d1e:	bd30      	pop	{r4, r5, pc}
 8007d20:	20014514 	.word	0x20014514

08007d24 <sbrk_aligned>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4e0e      	ldr	r6, [pc, #56]	; (8007d60 <sbrk_aligned+0x3c>)
 8007d28:	460c      	mov	r4, r1
 8007d2a:	6831      	ldr	r1, [r6, #0]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	b911      	cbnz	r1, 8007d36 <sbrk_aligned+0x12>
 8007d30:	f000 f88c 	bl	8007e4c <_sbrk_r>
 8007d34:	6030      	str	r0, [r6, #0]
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 f887 	bl	8007e4c <_sbrk_r>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	d00a      	beq.n	8007d58 <sbrk_aligned+0x34>
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d007      	beq.n	8007d5c <sbrk_aligned+0x38>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 f87c 	bl	8007e4c <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d101      	bne.n	8007d5c <sbrk_aligned+0x38>
 8007d58:	f04f 34ff 	mov.w	r4, #4294967295
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	20014518 	.word	0x20014518

08007d64 <_malloc_r>:
 8007d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d68:	1ccd      	adds	r5, r1, #3
 8007d6a:	f025 0503 	bic.w	r5, r5, #3
 8007d6e:	3508      	adds	r5, #8
 8007d70:	2d0c      	cmp	r5, #12
 8007d72:	bf38      	it	cc
 8007d74:	250c      	movcc	r5, #12
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	4607      	mov	r7, r0
 8007d7a:	db01      	blt.n	8007d80 <_malloc_r+0x1c>
 8007d7c:	42a9      	cmp	r1, r5
 8007d7e:	d905      	bls.n	8007d8c <_malloc_r+0x28>
 8007d80:	230c      	movs	r3, #12
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	2600      	movs	r6, #0
 8007d86:	4630      	mov	r0, r6
 8007d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8c:	4e2e      	ldr	r6, [pc, #184]	; (8007e48 <_malloc_r+0xe4>)
 8007d8e:	f000 f907 	bl	8007fa0 <__malloc_lock>
 8007d92:	6833      	ldr	r3, [r6, #0]
 8007d94:	461c      	mov	r4, r3
 8007d96:	bb34      	cbnz	r4, 8007de6 <_malloc_r+0x82>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f7ff ffc2 	bl	8007d24 <sbrk_aligned>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	4604      	mov	r4, r0
 8007da4:	d14d      	bne.n	8007e42 <_malloc_r+0xde>
 8007da6:	6834      	ldr	r4, [r6, #0]
 8007da8:	4626      	mov	r6, r4
 8007daa:	2e00      	cmp	r6, #0
 8007dac:	d140      	bne.n	8007e30 <_malloc_r+0xcc>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	4631      	mov	r1, r6
 8007db2:	4638      	mov	r0, r7
 8007db4:	eb04 0803 	add.w	r8, r4, r3
 8007db8:	f000 f848 	bl	8007e4c <_sbrk_r>
 8007dbc:	4580      	cmp	r8, r0
 8007dbe:	d13a      	bne.n	8007e36 <_malloc_r+0xd2>
 8007dc0:	6821      	ldr	r1, [r4, #0]
 8007dc2:	3503      	adds	r5, #3
 8007dc4:	1a6d      	subs	r5, r5, r1
 8007dc6:	f025 0503 	bic.w	r5, r5, #3
 8007dca:	3508      	adds	r5, #8
 8007dcc:	2d0c      	cmp	r5, #12
 8007dce:	bf38      	it	cc
 8007dd0:	250c      	movcc	r5, #12
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	f7ff ffa5 	bl	8007d24 <sbrk_aligned>
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d02b      	beq.n	8007e36 <_malloc_r+0xd2>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	442b      	add	r3, r5
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	e00e      	b.n	8007e04 <_malloc_r+0xa0>
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	1b52      	subs	r2, r2, r5
 8007dea:	d41e      	bmi.n	8007e2a <_malloc_r+0xc6>
 8007dec:	2a0b      	cmp	r2, #11
 8007dee:	d916      	bls.n	8007e1e <_malloc_r+0xba>
 8007df0:	1961      	adds	r1, r4, r5
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	6025      	str	r5, [r4, #0]
 8007df6:	bf18      	it	ne
 8007df8:	6059      	strne	r1, [r3, #4]
 8007dfa:	6863      	ldr	r3, [r4, #4]
 8007dfc:	bf08      	it	eq
 8007dfe:	6031      	streq	r1, [r6, #0]
 8007e00:	5162      	str	r2, [r4, r5]
 8007e02:	604b      	str	r3, [r1, #4]
 8007e04:	4638      	mov	r0, r7
 8007e06:	f104 060b 	add.w	r6, r4, #11
 8007e0a:	f000 f8cf 	bl	8007fac <__malloc_unlock>
 8007e0e:	f026 0607 	bic.w	r6, r6, #7
 8007e12:	1d23      	adds	r3, r4, #4
 8007e14:	1af2      	subs	r2, r6, r3
 8007e16:	d0b6      	beq.n	8007d86 <_malloc_r+0x22>
 8007e18:	1b9b      	subs	r3, r3, r6
 8007e1a:	50a3      	str	r3, [r4, r2]
 8007e1c:	e7b3      	b.n	8007d86 <_malloc_r+0x22>
 8007e1e:	6862      	ldr	r2, [r4, #4]
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	bf0c      	ite	eq
 8007e24:	6032      	streq	r2, [r6, #0]
 8007e26:	605a      	strne	r2, [r3, #4]
 8007e28:	e7ec      	b.n	8007e04 <_malloc_r+0xa0>
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	6864      	ldr	r4, [r4, #4]
 8007e2e:	e7b2      	b.n	8007d96 <_malloc_r+0x32>
 8007e30:	4634      	mov	r4, r6
 8007e32:	6876      	ldr	r6, [r6, #4]
 8007e34:	e7b9      	b.n	8007daa <_malloc_r+0x46>
 8007e36:	230c      	movs	r3, #12
 8007e38:	603b      	str	r3, [r7, #0]
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	f000 f8b6 	bl	8007fac <__malloc_unlock>
 8007e40:	e7a1      	b.n	8007d86 <_malloc_r+0x22>
 8007e42:	6025      	str	r5, [r4, #0]
 8007e44:	e7de      	b.n	8007e04 <_malloc_r+0xa0>
 8007e46:	bf00      	nop
 8007e48:	20014514 	.word	0x20014514

08007e4c <_sbrk_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	4d06      	ldr	r5, [pc, #24]	; (8007e68 <_sbrk_r+0x1c>)
 8007e50:	2300      	movs	r3, #0
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	602b      	str	r3, [r5, #0]
 8007e58:	f000 f8c0 	bl	8007fdc <_sbrk>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_sbrk_r+0x1a>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_sbrk_r+0x1a>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	2001451c 	.word	0x2001451c

08007e6c <__sread>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e74:	f000 f8a0 	bl	8007fb8 <_read_r>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	bfab      	itete	ge
 8007e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e80:	181b      	addge	r3, r3, r0
 8007e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e86:	bfac      	ite	ge
 8007e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e8a:	81a3      	strhlt	r3, [r4, #12]
 8007e8c:	bd10      	pop	{r4, pc}

08007e8e <__swrite>:
 8007e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	461f      	mov	r7, r3
 8007e94:	898b      	ldrh	r3, [r1, #12]
 8007e96:	05db      	lsls	r3, r3, #23
 8007e98:	4605      	mov	r5, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	d505      	bpl.n	8007eac <__swrite+0x1e>
 8007ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f000 f868 	bl	8007f7c <_lseek_r>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	4632      	mov	r2, r6
 8007eba:	463b      	mov	r3, r7
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec2:	f000 b817 	b.w	8007ef4 <_write_r>

08007ec6 <__sseek>:
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	460c      	mov	r4, r1
 8007eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ece:	f000 f855 	bl	8007f7c <_lseek_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	bf15      	itete	ne
 8007ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ee2:	81a3      	strheq	r3, [r4, #12]
 8007ee4:	bf18      	it	ne
 8007ee6:	81a3      	strhne	r3, [r4, #12]
 8007ee8:	bd10      	pop	{r4, pc}

08007eea <__sclose>:
 8007eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eee:	f000 b813 	b.w	8007f18 <_close_r>
	...

08007ef4 <_write_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d07      	ldr	r5, [pc, #28]	; (8007f14 <_write_r+0x20>)
 8007ef8:	4604      	mov	r4, r0
 8007efa:	4608      	mov	r0, r1
 8007efc:	4611      	mov	r1, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	602a      	str	r2, [r5, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	f7f8 fe6f 	bl	8000be6 <_write>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_write_r+0x1e>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_write_r+0x1e>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	2001451c 	.word	0x2001451c

08007f18 <_close_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4d06      	ldr	r5, [pc, #24]	; (8007f34 <_close_r+0x1c>)
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	4608      	mov	r0, r1
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	f7f8 fe7b 	bl	8000c1e <_close>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d102      	bne.n	8007f32 <_close_r+0x1a>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	b103      	cbz	r3, 8007f32 <_close_r+0x1a>
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	2001451c 	.word	0x2001451c

08007f38 <_fstat_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d07      	ldr	r5, [pc, #28]	; (8007f58 <_fstat_r+0x20>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	f7f8 fe76 	bl	8000c36 <_fstat>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	d102      	bne.n	8007f54 <_fstat_r+0x1c>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b103      	cbz	r3, 8007f54 <_fstat_r+0x1c>
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	2001451c 	.word	0x2001451c

08007f5c <_isatty_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d06      	ldr	r5, [pc, #24]	; (8007f78 <_isatty_r+0x1c>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	f7f8 fe75 	bl	8000c56 <_isatty>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_isatty_r+0x1a>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_isatty_r+0x1a>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	2001451c 	.word	0x2001451c

08007f7c <_lseek_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d07      	ldr	r5, [pc, #28]	; (8007f9c <_lseek_r+0x20>)
 8007f80:	4604      	mov	r4, r0
 8007f82:	4608      	mov	r0, r1
 8007f84:	4611      	mov	r1, r2
 8007f86:	2200      	movs	r2, #0
 8007f88:	602a      	str	r2, [r5, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f7f8 fe6e 	bl	8000c6c <_lseek>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_lseek_r+0x1e>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_lseek_r+0x1e>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	2001451c 	.word	0x2001451c

08007fa0 <__malloc_lock>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__malloc_lock+0x8>)
 8007fa2:	f7ff be0b 	b.w	8007bbc <__retarget_lock_acquire_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	2001450f 	.word	0x2001450f

08007fac <__malloc_unlock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__malloc_unlock+0x8>)
 8007fae:	f7ff be06 	b.w	8007bbe <__retarget_lock_release_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	2001450f 	.word	0x2001450f

08007fb8 <_read_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4d07      	ldr	r5, [pc, #28]	; (8007fd8 <_read_r+0x20>)
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	4608      	mov	r0, r1
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	602a      	str	r2, [r5, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f7f8 fdf0 	bl	8000bac <_read>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_read_r+0x1e>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_read_r+0x1e>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	2001451c 	.word	0x2001451c

08007fdc <_sbrk>:
 8007fdc:	4a04      	ldr	r2, [pc, #16]	; (8007ff0 <_sbrk+0x14>)
 8007fde:	6811      	ldr	r1, [r2, #0]
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	b909      	cbnz	r1, 8007fe8 <_sbrk+0xc>
 8007fe4:	4903      	ldr	r1, [pc, #12]	; (8007ff4 <_sbrk+0x18>)
 8007fe6:	6011      	str	r1, [r2, #0]
 8007fe8:	6810      	ldr	r0, [r2, #0]
 8007fea:	4403      	add	r3, r0
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4770      	bx	lr
 8007ff0:	20014520 	.word	0x20014520
 8007ff4:	20014528 	.word	0x20014528

08007ff8 <_init>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

08008004 <_fini>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr
