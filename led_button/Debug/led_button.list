
led_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005548  08005548  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005548  08005548  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005548  08005548  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000143fc  20000014  08005564  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014410  08005564  00024410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126f5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e3  00000000  00000000  00032739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00036288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028779  00000000  00000000  00037388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135e0  00000000  00000000  0005fb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa3e2  00000000  00000000  000730e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d4c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  0016d514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005324 	.word	0x08005324

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005324 	.word	0x08005324

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e3c 	.word	0x20012e3c

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fa89 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f839 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f889 	bl	8000388 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0x60>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <main+0x60>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000282:	f003 f863 	bl	800334c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000286:	f004 fa23 	bl	80046d0 <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, NULL, 2, &task1_handle);
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <main+0x64>)
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2302      	movs	r3, #2
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	22c8      	movs	r2, #200	; 0xc8
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <main+0x68>)
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <main+0x6c>)
 800029a:	f001 ff99 	bl	80021d0 <xTaskCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <main+0x70>)
 80002a2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
  status = xTaskCreate(task2_handler, "Task2", 200, NULL, 2, &task2_handle);
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <main+0x74>)
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	2302      	movs	r3, #2
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2300      	movs	r3, #0
 80002ae:	22c8      	movs	r2, #200	; 0xc8
 80002b0:	490a      	ldr	r1, [pc, #40]	; (80002dc <main+0x78>)
 80002b2:	480b      	ldr	r0, [pc, #44]	; (80002e0 <main+0x7c>)
 80002b4:	f001 ff8c 	bl	80021d0 <xTaskCreate>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <main+0x70>)
 80002bc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
  vTaskStartScheduler();
 80002be:	f002 fa37 	bl	8002730 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <main+0x5e>
 80002c4:	e0001000 	.word	0xe0001000
 80002c8:	20000030 	.word	0x20000030
 80002cc:	0800533c 	.word	0x0800533c
 80002d0:	08000489 	.word	0x08000489
 80002d4:	20000038 	.word	0x20000038
 80002d8:	20000034 	.word	0x20000034
 80002dc:	08005344 	.word	0x08005344
 80002e0:	080004c9 	.word	0x080004c9

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b096      	sub	sp, #88	; 0x58
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	2244      	movs	r2, #68	; 0x44
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 f80e 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000306:	f44f 7000 	mov.w	r0, #512	; 0x200
 800030a:	f000 fd69 	bl	8000de0 <HAL_PWREx_ControlVoltageScaling>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000314:	f000 f934 	bl	8000580 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	2302      	movs	r3, #2
 800031a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	2302      	movs	r3, #2
 800032c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800032e:	2301      	movs	r3, #1
 8000330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000332:	230a      	movs	r3, #10
 8000334:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000336:	2307      	movs	r3, #7
 8000338:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800033e:	2302      	movs	r3, #2
 8000340:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fda0 	bl	8000e8c <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000352:	f000 f915 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	2303      	movs	r3, #3
 800035c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800036a:	463b      	mov	r3, r7
 800036c:	2104      	movs	r1, #4
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f968 	bl	8001644 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800037a:	f000 f901 	bl	8000580 <Error_Handler>
  }
}
 800037e:	bf00      	nop
 8000380:	3758      	adds	r7, #88	; 0x58
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039e:	4b38      	ldr	r3, [pc, #224]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	4a37      	ldr	r2, [pc, #220]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003aa:	4b35      	ldr	r3, [pc, #212]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	f003 0304 	and.w	r3, r3, #4
 80003b2:	613b      	str	r3, [r7, #16]
 80003b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b6:	4b32      	ldr	r3, [pc, #200]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a31      	ldr	r2, [pc, #196]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003c2:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ce:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	4a2b      	ldr	r2, [pc, #172]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a25      	ldr	r2, [pc, #148]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003ec:	f043 0302 	orr.w	r3, r3, #2
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0xf8>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	f003 0302 	and.w	r3, r3, #2
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000406:	f000 fc87 	bl	8000d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800040a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000410:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	4619      	mov	r1, r3
 8000420:	4818      	ldr	r0, [pc, #96]	; (8000484 <MX_GPIO_Init+0xfc>)
 8000422:	f000 facf 	bl	80009c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000426:	230c      	movs	r3, #12
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000432:	2303      	movs	r3, #3
 8000434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000436:	2307      	movs	r3, #7
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 0314 	add.w	r3, r7, #20
 800043e:	4619      	mov	r1, r3
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f000 fabe 	bl	80009c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000448:	2320      	movs	r3, #32
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f000 faaf 	bl	80009c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2028      	movs	r0, #40	; 0x28
 800046c:	f000 fa80 	bl	8000970 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000470:	2028      	movs	r0, #40	; 0x28
 8000472:	f000 fa99 	bl	80009a8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	3728      	adds	r7, #40	; 0x28
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48000800 	.word	0x48000800

08000488 <task1_handler>:
/* USER CODE BEGIN 4 */


// Task 1 prints message after every 500ms (No cpu Consumed)
void task1_handler(void *parameter)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b09d      	sub	sp, #116	; 0x74
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	char msg[100] = "Task 1 running";
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <task1_handler+0x3c>)
 8000492:	f107 040c 	add.w	r4, r7, #12
 8000496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000498:	c407      	stmia	r4!, {r0, r1, r2}
 800049a:	8023      	strh	r3, [r4, #0]
 800049c:	3402      	adds	r4, #2
 800049e:	0c1b      	lsrs	r3, r3, #16
 80004a0:	7023      	strb	r3, [r4, #0]
 80004a2:	f107 031b 	add.w	r3, r7, #27
 80004a6:	2255      	movs	r2, #85	; 0x55
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 ff32 	bl	8005314 <memset>
	while(1){
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	4618      	mov	r0, r3
 80004b6:	f004 fe7b 	bl	80051b0 <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(100));
 80004ba:	2064      	movs	r0, #100	; 0x64
 80004bc:	f001 ffdc 	bl	8002478 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80004c0:	e7f6      	b.n	80004b0 <task1_handler+0x28>
 80004c2:	bf00      	nop
 80004c4:	0800534c 	.word	0x0800534c

080004c8 <task2_handler>:
}


// Task 2 runs when an interrupt occurs at button and then it suspends itself
void task2_handler(void *parameter)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b09d      	sub	sp, #116	; 0x74
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	char msg1[100] = "Button Pressed";
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <task2_handler+0x44>)
 80004d2:	f107 040c 	add.w	r4, r7, #12
 80004d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004d8:	c407      	stmia	r4!, {r0, r1, r2}
 80004da:	8023      	strh	r3, [r4, #0]
 80004dc:	3402      	adds	r4, #2
 80004de:	0c1b      	lsrs	r3, r3, #16
 80004e0:	7023      	strb	r3, [r4, #0]
 80004e2:	f107 031b 	add.w	r3, r7, #27
 80004e6:	2255      	movs	r2, #85	; 0x55
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f004 ff12 	bl	8005314 <memset>
	while(1)
	{
		vTaskSuspend(NULL);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f001 ffe9 	bl	80024c8 <vTaskSuspend>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004f6:	2120      	movs	r1, #32
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f000 fc24 	bl	8000d48 <HAL_GPIO_TogglePin>
		SEGGER_SYSVIEW_PrintfTarget(msg1);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4618      	mov	r0, r3
 8000506:	f004 fe53 	bl	80051b0 <SEGGER_SYSVIEW_PrintfTarget>
		vTaskSuspend(NULL);
 800050a:	e7f1      	b.n	80004f0 <task2_handler+0x28>
 800050c:	080053b0 	.word	0x080053b0

08000510 <EXTI15_10_IRQHandler>:
}



void EXTI15_10_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000516:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800051a:	f000 fc2f 	bl	8000d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BaseType_t xYieldRequired;
  xYieldRequired = xTaskResumeFromISR( task2_handle );
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <EXTI15_10_IRQHandler+0x44>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f002 f890 	bl	8002648 <xTaskResumeFromISR>
 8000528:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( xYieldRequired );
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <EXTI15_10_IRQHandler+0x36>
 8000530:	f004 fbf4 	bl	8004d1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <EXTI15_10_IRQHandler+0x48>)
 8000536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000544:	e001      	b.n	800054a <EXTI15_10_IRQHandler+0x3a>
  portYIELD_FROM_ISR( xYieldRequired );
 8000546:	f004 fbcd 	bl	8004ce4 <SEGGER_SYSVIEW_RecordExitISR>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000034 	.word	0x20000034
 8000558:	e000ed04 	.word	0xe000ed04

0800055c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d101      	bne.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800056e:	f000 f927 	bl	80007c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40001000 	.word	0x40001000

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x44>)
 8000594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6613      	str	r3, [r2, #96]	; 0x60
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x44>)
 80005a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_MspInit+0x44>)
 80005ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_MspInit+0x44>)
 80005b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b4:	6593      	str	r3, [r2, #88]	; 0x58
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_MspInit+0x44>)
 80005b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80005c2:	f002 fc49 	bl	8002e58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005dc:	2300      	movs	r3, #0
 80005de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <HAL_InitTick+0xe0>)
 80005e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <HAL_InitTick+0xe0>)
 80005e8:	f043 0310 	orr.w	r3, r3, #16
 80005ec:	6593      	str	r3, [r2, #88]	; 0x58
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <HAL_InitTick+0xe0>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	f003 0310 	and.w	r3, r3, #16
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fa:	f107 0210 	add.w	r2, r7, #16
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f9cb 	bl	80019a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	2b00      	cmp	r3, #0
 8000612:	d103      	bne.n	800061c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000614:	f001 f9ae 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8000618:	6378      	str	r0, [r7, #52]	; 0x34
 800061a:	e004      	b.n	8000626 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800061c:	f001 f9aa 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8000620:	4603      	mov	r3, r0
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000628:	4a23      	ldr	r2, [pc, #140]	; (80006b8 <HAL_InitTick+0xe4>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	0c9b      	lsrs	r3, r3, #18
 8000630:	3b01      	subs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <HAL_InitTick+0xe8>)
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <HAL_InitTick+0xec>)
 8000638:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <HAL_InitTick+0xe8>)
 800063c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000640:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000642:	4a1e      	ldr	r2, [pc, #120]	; (80006bc <HAL_InitTick+0xe8>)
 8000644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000646:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_InitTick+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <HAL_InitTick+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <HAL_InitTick+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <HAL_InitTick+0xe8>)
 800065c:	f001 fa32 	bl	8001ac4 <HAL_TIM_Base_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800066a:	2b00      	cmp	r3, #0
 800066c:	d11b      	bne.n	80006a6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <HAL_InitTick+0xe8>)
 8000670:	f001 fa8a 	bl	8001b88 <HAL_TIM_Base_Start_IT>
 8000674:	4603      	mov	r3, r0
 8000676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800067a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800067e:	2b00      	cmp	r3, #0
 8000680:	d111      	bne.n	80006a6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000682:	2036      	movs	r0, #54	; 0x36
 8000684:	f000 f990 	bl	80009a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d808      	bhi.n	80006a0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800068e:	2200      	movs	r2, #0
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	2036      	movs	r0, #54	; 0x36
 8000694:	f000 f96c 	bl	8000970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_InitTick+0xf0>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	e002      	b.n	80006a6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3738      	adds	r7, #56	; 0x38
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	40001000 	.word	0x40001000
 80006c4:	20000004 	.word	0x20000004

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <TIM6_DAC_IRQHandler+0x10>)
 80006fa:	f001 fab5 	bl	8001c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000003c 	.word	0x2000003c

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <SystemInit+0x20>)
 800070e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <SystemInit+0x20>)
 8000714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000730:	f7ff ffea 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075a:	f004 fd99 	bl	8005290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800075e:	f7ff fd81 	bl	8000264 <main>

08000762 <LoopForever>:

LoopForever:
    b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000770:	08005550 	.word	0x08005550
  ldr r2, =_sbss
 8000774:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000778:	20014410 	.word	0x20014410

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_Init+0x3c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_Init+0x3c>)
 8000790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000794:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000796:	2003      	movs	r0, #3
 8000798:	f000 f8df 	bl	800095a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079c:	200f      	movs	r0, #15
 800079e:	f7ff ff19 	bl	80005d4 <HAL_InitTick>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	e001      	b.n	80007b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ae:	f7ff feed 	bl	800058c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x20>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_IncTick+0x24>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000088 	.word	0x20000088

080007e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_GetTick+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000088 	.word	0x20000088

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff4c 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000982:	f7ff ff61 	bl	8000848 <__NVIC_GetPriorityGrouping>
 8000986:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f7ff ffb1 	bl	80008f4 <NVIC_EncodePriority>
 8000992:	4602      	mov	r2, r0
 8000994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff80 	bl	80008a0 <__NVIC_SetPriority>
}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff54 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e17f      	b.n	8000cd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 8171 	beq.w	8000cce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d005      	beq.n	8000a04 <HAL_GPIO_Init+0x40>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d130      	bne.n	8000a66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	2203      	movs	r2, #3
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	091b      	lsrs	r3, r3, #4
 8000a50:	f003 0201 	and.w	r2, r3, #1
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d118      	bne.n	8000aa4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	f003 0201 	and.w	r2, r3, #1
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d017      	beq.n	8000ae0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d123      	bne.n	8000b34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	08da      	lsrs	r2, r3, #3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3208      	adds	r2, #8
 8000af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	220f      	movs	r2, #15
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	691a      	ldr	r2, [r3, #16]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	6939      	ldr	r1, [r7, #16]
 8000b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	2203      	movs	r2, #3
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0203 	and.w	r2, r3, #3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 80ac 	beq.w	8000cce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <HAL_GPIO_Init+0x330>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a5e      	ldr	r2, [pc, #376]	; (8000cf4 <HAL_GPIO_Init+0x330>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <HAL_GPIO_Init+0x330>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b8e:	4a5a      	ldr	r2, [pc, #360]	; (8000cf8 <HAL_GPIO_Init+0x334>)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb8:	d025      	beq.n	8000c06 <HAL_GPIO_Init+0x242>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a4f      	ldr	r2, [pc, #316]	; (8000cfc <HAL_GPIO_Init+0x338>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d01f      	beq.n	8000c02 <HAL_GPIO_Init+0x23e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4e      	ldr	r2, [pc, #312]	; (8000d00 <HAL_GPIO_Init+0x33c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d019      	beq.n	8000bfe <HAL_GPIO_Init+0x23a>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4d      	ldr	r2, [pc, #308]	; (8000d04 <HAL_GPIO_Init+0x340>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x236>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <HAL_GPIO_Init+0x344>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x232>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a4b      	ldr	r2, [pc, #300]	; (8000d0c <HAL_GPIO_Init+0x348>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x22e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a4a      	ldr	r2, [pc, #296]	; (8000d10 <HAL_GPIO_Init+0x34c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x22a>
 8000bea:	2306      	movs	r3, #6
 8000bec:	e00c      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000bee:	2307      	movs	r3, #7
 8000bf0:	e00a      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	e008      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e004      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e002      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x244>
 8000c06:	2300      	movs	r3, #0
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	f002 0203 	and.w	r2, r2, #3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4093      	lsls	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c18:	4937      	ldr	r1, [pc, #220]	; (8000cf8 <HAL_GPIO_Init+0x334>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c74:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_GPIO_Init+0x350>)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa22 f303 	lsr.w	r3, r2, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f47f ae78 	bne.w	80009d4 <HAL_GPIO_Init+0x10>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800
 8000d04:	48000c00 	.word	0x48000c00
 8000d08:	48001000 	.word	0x48001000
 8000d0c:	48001400 	.word	0x48001400
 8000d10:	48001800 	.word	0x48001800
 8000d14:	40010400 	.word	0x40010400

08000d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	041a      	lsls	r2, r3, #16
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43d9      	mvns	r1, r3
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	400b      	ands	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f806 	bl	8000dac <HAL_GPIO_EXTI_Callback>
  }
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_PWREx_GetVoltageRange+0x18>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40007000 	.word	0x40007000

08000de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dee:	d130      	bne.n	8000e52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dfc:	d038      	beq.n	8000e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2232      	movs	r2, #50	; 0x32
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	0c9b      	lsrs	r3, r3, #18
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e24:	e002      	b.n	8000e2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e38:	d102      	bne.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f2      	bne.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4c:	d110      	bne.n	8000e70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e00f      	b.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d007      	beq.n	8000e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e68:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40007000 	.word	0x40007000
 8000e84:	20000000 	.word	0x20000000
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e3ca      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e9e:	4b97      	ldr	r3, [pc, #604]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea8:	4b94      	ldr	r3, [pc, #592]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 80e4 	beq.w	8001088 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x4a>
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b0c      	cmp	r3, #12
 8000eca:	f040 808b 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	f040 8087 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ed6:	4b89      	ldr	r3, [pc, #548]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <HAL_RCC_OscConfig+0x62>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e3a2      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1a      	ldr	r2, [r3, #32]
 8000ef2:	4b82      	ldr	r3, [pc, #520]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d004      	beq.n	8000f08 <HAL_RCC_OscConfig+0x7c>
 8000efe:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f06:	e005      	b.n	8000f14 <HAL_RCC_OscConfig+0x88>
 8000f08:	4b7c      	ldr	r3, [pc, #496]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d223      	bcs.n	8000f60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fd71 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e383      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2c:	4b73      	ldr	r3, [pc, #460]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a72      	ldr	r2, [pc, #456]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b70      	ldr	r3, [pc, #448]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	496d      	ldr	r1, [pc, #436]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	4968      	ldr	r1, [pc, #416]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]
 8000f5e:	e025      	b.n	8000fac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f60:	4b66      	ldr	r3, [pc, #408]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a65      	ldr	r2, [pc, #404]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b63      	ldr	r3, [pc, #396]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4960      	ldr	r1, [pc, #384]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	495b      	ldr	r1, [pc, #364]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fd31 	bl	8001a04 <RCC_SetFlashLatencyFromMSIRange>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e343      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fac:	f000 fc4a 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b52      	ldr	r3, [pc, #328]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4950      	ldr	r1, [pc, #320]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_RCC_OscConfig+0x278>)
 8000fca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <HAL_RCC_OscConfig+0x27c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faff 	bl	80005d4 <HAL_InitTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d052      	beq.n	8001086 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	e327      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d032      	beq.n	8001052 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fbf6 	bl	80007e8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001000:	f7ff fbf2 	bl	80007e8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e310      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a36      	ldr	r2, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b34      	ldr	r3, [pc, #208]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4931      	ldr	r1, [pc, #196]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001038:	4313      	orrs	r3, r2
 800103a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	492c      	ldr	r1, [pc, #176]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e01a      	b.n	8001088 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a29      	ldr	r2, [pc, #164]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800105e:	f7ff fbc3 	bl	80007e8 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001066:	f7ff fbbf 	bl	80007e8 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e2dd      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f0      	bne.n	8001066 <HAL_RCC_OscConfig+0x1da>
 8001084:	e000      	b.n	8001088 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001086:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d074      	beq.n	800117e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x21a>
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b0c      	cmp	r3, #12
 800109e:	d10e      	bne.n	80010be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d10b      	bne.n	80010be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d064      	beq.n	800117c <HAL_RCC_OscConfig+0x2f0>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d160      	bne.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e2ba      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x24a>
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e026      	b.n	8001124 <HAL_RCC_OscConfig+0x298>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010de:	d115      	bne.n	800110c <HAL_RCC_OscConfig+0x280>
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a02      	ldr	r2, [pc, #8]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e014      	b.n	8001124 <HAL_RCC_OscConfig+0x298>
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	080054dc 	.word	0x080054dc
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004
 800110c:	4ba0      	ldr	r3, [pc, #640]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a9f      	ldr	r2, [pc, #636]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b9d      	ldr	r3, [pc, #628]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a9c      	ldr	r2, [pc, #624]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fb5c 	bl	80007e8 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fb58 	bl	80007e8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e276      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001146:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0x2a8>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001154:	f7ff fb48 	bl	80007e8 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fb44 	bl	80007e8 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e262      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x2d0>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d060      	beq.n	800124c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b04      	cmp	r3, #4
 800118e:	d005      	beq.n	800119c <HAL_RCC_OscConfig+0x310>
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b0c      	cmp	r3, #12
 8001194:	d119      	bne.n	80011ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d116      	bne.n	80011ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800119c:	4b7c      	ldr	r3, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x328>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e23f      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b76      	ldr	r3, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	4973      	ldr	r1, [pc, #460]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c8:	e040      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d023      	beq.n	800121a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d2:	4b6f      	ldr	r3, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6e      	ldr	r2, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff fb03 	bl	80007e8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff faff 	bl	80007e8 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e21d      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b62      	ldr	r3, [pc, #392]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	061b      	lsls	r3, r3, #24
 8001212:	495f      	ldr	r1, [pc, #380]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
 8001218:	e018      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5c      	ldr	r2, [pc, #368]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fadf 	bl	80007e8 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fadb 	bl	80007e8 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1f9      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d03c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d01c      	beq.n	800129a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001260:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001266:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff faba 	bl	80007e8 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fab6 	bl	80007e8 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e1d4      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800128c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ef      	beq.n	8001278 <HAL_RCC_OscConfig+0x3ec>
 8001298:	e01b      	b.n	80012d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a0:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012aa:	f7ff fa9d 	bl	80007e8 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fa99 	bl	80007e8 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1b7      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1ef      	bne.n	80012b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80a6 	beq.w	800142c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10d      	bne.n	800130c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6593      	str	r3, [r2, #88]	; 0x58
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001308:	2301      	movs	r3, #1
 800130a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_RCC_OscConfig+0x508>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d118      	bne.n	800134a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_RCC_OscConfig+0x508>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_RCC_OscConfig+0x508>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001324:	f7ff fa60 	bl	80007e8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132c:	f7ff fa5c 	bl	80007e8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e17a      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_RCC_OscConfig+0x508>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d108      	bne.n	8001364 <HAL_RCC_OscConfig+0x4d8>
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001362:	e029      	b.n	80013b8 <HAL_RCC_OscConfig+0x52c>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d115      	bne.n	8001398 <HAL_RCC_OscConfig+0x50c>
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800136e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001382:	4a03      	ldr	r2, [pc, #12]	; (8001390 <HAL_RCC_OscConfig+0x504>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x52c>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40007000 	.word	0x40007000
 8001398:	4b9c      	ldr	r3, [pc, #624]	; (800160c <HAL_RCC_OscConfig+0x780>)
 800139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139e:	4a9b      	ldr	r2, [pc, #620]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a8:	4b98      	ldr	r3, [pc, #608]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80013aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ae:	4a97      	ldr	r2, [pc, #604]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d016      	beq.n	80013ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff fa12 	bl	80007e8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fa0e 	bl	80007e8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e12a      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013de:	4b8b      	ldr	r3, [pc, #556]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80013e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ed      	beq.n	80013c8 <HAL_RCC_OscConfig+0x53c>
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff f9fb 	bl	80007e8 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff f9f7 	bl	80007e8 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e113      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800140c:	4b7f      	ldr	r3, [pc, #508]	; (800160c <HAL_RCC_OscConfig+0x780>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ed      	bne.n	80013f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001420:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	4a79      	ldr	r2, [pc, #484]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80fe 	beq.w	8001632 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	2b02      	cmp	r3, #2
 800143c:	f040 80d0 	bne.w	80015e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001440:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	429a      	cmp	r2, r3
 8001452:	d130      	bne.n	80014b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	3b01      	subs	r3, #1
 8001460:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d127      	bne.n	80014b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d11f      	bne.n	80014b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001480:	2a07      	cmp	r2, #7
 8001482:	bf14      	ite	ne
 8001484:	2201      	movne	r2, #1
 8001486:	2200      	moveq	r2, #0
 8001488:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800148a:	4293      	cmp	r3, r2
 800148c:	d113      	bne.n	80014b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800149e:	429a      	cmp	r2, r3
 80014a0:	d109      	bne.n	80014b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	3b01      	subs	r3, #1
 80014b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d06e      	beq.n	8001594 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d069      	beq.n	8001590 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0ad      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80014de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014e4:	f7ff f980 	bl	80007e8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff f97c 	bl	80007e8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e09a      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150a:	4b40      	ldr	r3, [pc, #256]	; (800160c <HAL_RCC_OscConfig+0x780>)
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_RCC_OscConfig+0x784>)
 8001510:	4013      	ands	r3, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800151a:	3a01      	subs	r2, #1
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	4311      	orrs	r1, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001524:	0212      	lsls	r2, r2, #8
 8001526:	4311      	orrs	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800152c:	0852      	lsrs	r2, r2, #1
 800152e:	3a01      	subs	r2, #1
 8001530:	0552      	lsls	r2, r2, #21
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001538:	0852      	lsrs	r2, r2, #1
 800153a:	3a01      	subs	r2, #1
 800153c:	0652      	lsls	r2, r2, #25
 800153e:	4311      	orrs	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001544:	0912      	lsrs	r2, r2, #4
 8001546:	0452      	lsls	r2, r2, #17
 8001548:	430a      	orrs	r2, r1
 800154a:	4930      	ldr	r1, [pc, #192]	; (800160c <HAL_RCC_OscConfig+0x780>)
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a2d      	ldr	r2, [pc, #180]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_RCC_OscConfig+0x780>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001568:	f7ff f93e 	bl	80007e8 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff f93a 	bl	80007e8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e058      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800158e:	e050      	b.n	8001632 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e04f      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x780>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d148      	bne.n	8001632 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015b8:	f7ff f916 	bl	80007e8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff f912 	bl	80007e8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e030      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x734>
 80015de:	e028      	b.n	8001632 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d023      	beq.n	800162e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_RCC_OscConfig+0x780>)
 80015ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff f8f9 	bl	80007e8 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f8:	e00c      	b.n	8001614 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff f8f5 	bl	80007e8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d905      	bls.n	8001614 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e013      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
 800160c:	40021000 	.word	0x40021000
 8001610:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_OscConfig+0x7b0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ec      	bne.n	80015fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_RCC_OscConfig+0x7b0>)
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	4905      	ldr	r1, [pc, #20]	; (800163c <HAL_RCC_OscConfig+0x7b0>)
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x7b4>)
 8001628:	4013      	ands	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
 800162c:	e001      	b.n	8001632 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	feeefffc 	.word	0xfeeefffc

08001644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0e7      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b75      	ldr	r3, [pc, #468]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d910      	bls.n	8001688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b72      	ldr	r3, [pc, #456]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 0207 	bic.w	r2, r3, #7
 800166e:	4970      	ldr	r1, [pc, #448]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b6e      	ldr	r3, [pc, #440]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cf      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d010      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d908      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a4:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4960      	ldr	r1, [pc, #384]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d04c      	beq.n	800175c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d121      	bne.n	800171a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0a6      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d115      	bne.n	800171a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e09a      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e08e      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170a:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e086      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4943      	ldr	r1, [pc, #268]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800172c:	f7ff f85c 	bl	80007e8 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f858 	bl	80007e8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e06e      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d010      	beq.n	800178a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	429a      	cmp	r2, r3
 8001776:	d208      	bcs.n	800178a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	492b      	ldr	r1, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d210      	bcs.n	80017ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 0207 	bic.w	r2, r3, #7
 80017a0:	4923      	ldr	r1, [pc, #140]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HAL_RCC_ClockConfig+0x1ec>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e036      	b.n	8001828 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4918      	ldr	r1, [pc, #96]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4910      	ldr	r1, [pc, #64]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f8:	f000 f824 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	490b      	ldr	r1, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1f4>)
 800180a:	5ccb      	ldrb	r3, [r1, r3]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1f8>)
 8001816:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1fc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fed9 	bl	80005d4 <HAL_InitTick>
 8001822:	4603      	mov	r3, r0
 8001824:	72fb      	strb	r3, [r7, #11]

  return status;
 8001826:	7afb      	ldrb	r3, [r7, #11]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40022000 	.word	0x40022000
 8001834:	40021000 	.word	0x40021000
 8001838:	080054dc 	.word	0x080054dc
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x34>
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11e      	bne.n	80018b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d107      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	e005      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018a0:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10d      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_GetSysClockFreq+0x110>)
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	e004      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d134      	bne.n	800193c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0xa6>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d003      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0xac>
 80018e8:	e005      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_GetSysClockFreq+0x110>)
 80018ec:	617b      	str	r3, [r7, #20]
      break;
 80018ee:	e005      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_GetSysClockFreq+0x114>)
 80018f2:	617b      	str	r3, [r7, #20]
      break;
 80018f4:	e002      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	617b      	str	r3, [r7, #20]
      break;
 80018fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	3301      	adds	r3, #1
 8001908:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	fb03 f202 	mul.w	r2, r3, r2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_GetSysClockFreq+0x108>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	0e5b      	lsrs	r3, r3, #25
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	3301      	adds	r3, #1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800193c:	69bb      	ldr	r3, [r7, #24]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	080054f4 	.word	0x080054f4
 8001954:	00f42400 	.word	0x00f42400
 8001958:	007a1200 	.word	0x007a1200

0800195c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_GetHCLKFreq+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001978:	f7ff fff0 	bl	800195c <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4904      	ldr	r1, [pc, #16]	; (800199c <HAL_RCC_GetPCLK1Freq+0x28>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	080054ec 	.word	0x080054ec

080019a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	220f      	movs	r2, #15
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_GetClockConfig+0x5c>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_RCC_GetClockConfig+0x60>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0207 	and.w	r2, r3, #7
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40022000 	.word	0x40022000

08001a04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a1c:	f7ff f9d2 	bl	8000dc4 <HAL_PWREx_GetVoltageRange>
 8001a20:	6178      	str	r0, [r7, #20]
 8001a22:	e014      	b.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	4a24      	ldr	r2, [pc, #144]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a3c:	f7ff f9c2 	bl	8000dc4 <HAL_PWREx_GetVoltageRange>
 8001a40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a54:	d10b      	bne.n	8001a6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b80      	cmp	r3, #128	; 0x80
 8001a5a:	d919      	bls.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a60:	d902      	bls.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a62:	2302      	movs	r3, #2
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	e013      	b.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a68:	2301      	movs	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	e010      	b.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d902      	bls.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a74:	2303      	movs	r3, #3
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	e00a      	b.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b80      	cmp	r3, #128	; 0x80
 8001a7e:	d102      	bne.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a80:	2302      	movs	r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e004      	b.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b70      	cmp	r3, #112	; 0x70
 8001a8a:	d101      	bne.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 0207 	bic.w	r2, r3, #7
 8001a98:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e049      	b.n	8001b6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f841 	bl	8001b72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 f9f8 	bl	8001ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d001      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e04f      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01d      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x76>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d018      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x76>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x76>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x76>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d009      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x76>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_TIM_Base_Start_IT+0x76>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d115      	bne.n	8001c2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d015      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c16:	d011      	beq.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c28:	e008      	b.n	8001c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e000      	b.n	8001c3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40000800 	.word	0x40000800
 8001c58:	40000c00 	.word	0x40000c00
 8001c5c:	40013400 	.word	0x40013400
 8001c60:	40014000 	.word	0x40014000
 8001c64:	00010007 	.word	0x00010007

08001c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0202 	mvn.w	r2, #2
 8001c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f905 	bl	8001eba <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8f7 	bl	8001ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f908 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0204 	mvn.w	r2, #4
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8db 	bl	8001eba <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8cd 	bl	8001ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8de 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0208 	mvn.w	r2, #8
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8b1 	bl	8001eba <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8a3 	bl	8001ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8b4 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0210 	mvn.w	r2, #16
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2208      	movs	r2, #8
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f887 	bl	8001eba <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f879 	bl	8001ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f88a 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0201 	mvn.w	r2, #1
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fbb8 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b80      	cmp	r3, #128	; 0x80
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b80      	cmp	r3, #128	; 0x80
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f914 	bl	8002040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e26:	d10e      	bne.n	8001e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b80      	cmp	r3, #128	; 0x80
 8001e34:	d107      	bne.n	8001e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f907 	bl	8002054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d10e      	bne.n	8001e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	d107      	bne.n	8001e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f838 	bl	8001ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d10e      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d107      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f06f 0220 	mvn.w	r2, #32
 8001e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8c7 	bl	800202c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a40      	ldr	r2, [pc, #256]	; (800200c <TIM_Base_SetConfig+0x114>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d013      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d00f      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <TIM_Base_SetConfig+0x118>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <TIM_Base_SetConfig+0x11c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <TIM_Base_SetConfig+0x120>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3a      	ldr	r2, [pc, #232]	; (800201c <TIM_Base_SetConfig+0x124>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2f      	ldr	r2, [pc, #188]	; (800200c <TIM_Base_SetConfig+0x114>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d01b      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2c      	ldr	r2, [pc, #176]	; (8002010 <TIM_Base_SetConfig+0x118>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d017      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2b      	ldr	r2, [pc, #172]	; (8002014 <TIM_Base_SetConfig+0x11c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <TIM_Base_SetConfig+0x120>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00f      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a29      	ldr	r2, [pc, #164]	; (800201c <TIM_Base_SetConfig+0x124>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a28      	ldr	r2, [pc, #160]	; (8002020 <TIM_Base_SetConfig+0x128>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a27      	ldr	r2, [pc, #156]	; (8002024 <TIM_Base_SetConfig+0x12c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0x9a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a26      	ldr	r2, [pc, #152]	; (8002028 <TIM_Base_SetConfig+0x130>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <TIM_Base_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0xf8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <TIM_Base_SetConfig+0x124>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0xf8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <TIM_Base_SetConfig+0x128>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0xf8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	; (8002024 <TIM_Base_SetConfig+0x12c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0xf8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <TIM_Base_SetConfig+0x130>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	615a      	str	r2, [r3, #20]
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40000800 	.word	0x40000800
 8002018:	40000c00 	.word	0x40000c00
 800201c:	40013400 	.word	0x40013400
 8002020:	40014000 	.word	0x40014000
 8002024:	40014400 	.word	0x40014400
 8002028:	40014800 	.word	0x40014800

0800202c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0208 	add.w	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 0208 	add.w	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0208 	add.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d103      	bne.n	800212a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e00c      	b.n	8002144 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3308      	adds	r3, #8
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e002      	b.n	8002138 <vListInsert+0x2e>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	d2f6      	bcs.n	8002132 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6892      	ldr	r2, [r2, #8]
 8002192:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6852      	ldr	r2, [r2, #4]
 800219c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d103      	bne.n	80021b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af04      	add	r7, sp, #16
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fef9 	bl	8002fdc <pvPortMalloc>
 80021ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00e      	beq.n	8002210 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021f2:	2058      	movs	r0, #88	; 0x58
 80021f4:	f000 fef2 	bl	8002fdc <pvPortMalloc>
 80021f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
 8002206:	e005      	b.n	8002214 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002208:	6978      	ldr	r0, [r7, #20]
 800220a:	f000 ff95 	bl	8003138 <vPortFree>
 800220e:	e001      	b.n	8002214 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d013      	beq.n	8002242 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	2300      	movs	r3, #0
 800221e:	9303      	str	r3, [sp, #12]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f80e 	bl	8002252 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002236:	69f8      	ldr	r0, [r7, #28]
 8002238:	f000 f892 	bl	8002360 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800223c:	2301      	movs	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	e002      	b.n	8002248 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002248:	69bb      	ldr	r3, [r7, #24]
    }
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	461a      	mov	r2, r3
 800226a:	21a5      	movs	r1, #165	; 0xa5
 800226c:	f003 f852 	bl	8005314 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800227a:	3b01      	subs	r3, #1
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f023 0307 	bic.w	r3, r3, #7
 8002288:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01f      	beq.n	80022d0 <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e012      	b.n	80022bc <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4413      	add	r3, r2
 800229c:	7819      	ldrb	r1, [r3, #0]
 800229e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4413      	add	r3, r2
 80022a4:	3334      	adds	r3, #52	; 0x34
 80022a6:	460a      	mov	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d9e9      	bls.n	8002296 <prvInitialiseNewTask+0x44>
 80022c2:	e000      	b.n	80022c6 <prvInitialiseNewTask+0x74>
            {
                break;
 80022c4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022ce:	e003      	b.n	80022d8 <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d901      	bls.n	80022e2 <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022de:	2304      	movs	r3, #4
 80022e0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	2200      	movs	r2, #0
 80022f2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	3304      	adds	r3, #4
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fed5 	bl	80020a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	3318      	adds	r3, #24
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fed0 	bl	80020a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	f1c3 0205 	rsb	r2, r3, #5
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	3350      	adds	r3, #80	; 0x50
 8002322:	2204      	movs	r2, #4
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fff4 	bl	8005314 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	3354      	adds	r3, #84	; 0x54
 8002330:	2201      	movs	r2, #1
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f002 ffed 	bl	8005314 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	6938      	ldr	r0, [r7, #16]
 8002340:	f000 fce2 	bl	8002d08 <pxPortInitialiseStack>
 8002344:	4602      	mov	r2, r0
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002368:	f000 fd7e 	bl	8002e68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800236c:	4b3b      	ldr	r3, [pc, #236]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 8002374:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800237e:	4a38      	ldr	r2, [pc, #224]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d110      	bne.n	80023ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800238c:	f000 fbe6 	bl	8002b5c <prvInitialiseTaskLists>
 8002390:	e00d      	b.n	80023ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <prvAddNewTaskToReadyList+0x104>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d802      	bhi.n	80023ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023a8:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <prvAddNewTaskToReadyList+0x94>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fcdf 	bl	8004d8c <SEGGER_SYSVIEW_OnTaskCreate>
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	461d      	mov	r5, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461c      	mov	r4, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	1ae3      	subs	r3, r4, r3
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	462b      	mov	r3, r5
 80023f0:	f001 f84c 	bl	800348c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fd4c 	bl	8004e94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <prvAddNewTaskToReadyList+0x10c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <prvAddNewTaskToReadyList+0x10c>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <prvAddNewTaskToReadyList+0x110>)
 800241c:	441a      	add	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7ff fe4c 	bl	80020c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800242a:	f000 fd37 	bl	8002e9c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <prvAddNewTaskToReadyList+0x104>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <prvAddNewTaskToReadyList+0x114>)
 8002446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bdb0      	pop	{r4, r5, r7, pc}
 800245c:	2000014c 	.word	0x2000014c
 8002460:	2000008c 	.word	0x2000008c
 8002464:	20000158 	.word	0x20000158
 8002468:	20000168 	.word	0x20000168
 800246c:	20000154 	.word	0x20000154
 8002470:	20000090 	.word	0x20000090
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <vTaskDelay+0x2c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800248a:	f000 f99d 	bl	80027c8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	2023      	movs	r0, #35	; 0x23
 8002492:	f002 f887 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002496:	2100      	movs	r1, #0
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fbbd 	bl	8002c18 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800249e:	f000 f9a1 	bl	80027e4 <xTaskResumeAll>
 80024a2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <vTaskDelay+0x42>
        {
            portYIELD_WITHIN_API();
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <vTaskDelay+0x4c>)
 80024ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000ed04 	.word	0xe000ed04

080024c8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80024d0:	f000 fcca 	bl	8002e68 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <vTaskSuspend+0x18>
 80024da:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <vTaskSuspend+0x11c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e000      	b.n	80024e2 <vTaskSuspend+0x1a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fd76 	bl	8004fd8 <SEGGER_SYSVIEW_ShrinkId>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4619      	mov	r1, r3
 80024f0:	2029      	movs	r0, #41	; 0x29
 80024f2:	f002 f857 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3304      	adds	r3, #4
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe3e 	bl	800217c <uxListRemove>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250a:	4937      	ldr	r1, [pc, #220]	; (80025e8 <vTaskSuspend+0x120>)
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <vTaskSuspend+0x6a>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2201      	movs	r2, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	4b30      	ldr	r3, [pc, #192]	; (80025ec <vTaskSuspend+0x124>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4013      	ands	r3, r2
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <vTaskSuspend+0x124>)
 8002530:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3318      	adds	r3, #24
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fe1c 	bl	800217c <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	211b      	movs	r1, #27
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fce5 	bl	8004f18 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3304      	adds	r3, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4826      	ldr	r0, [pc, #152]	; (80025f0 <vTaskSuspend+0x128>)
 8002556:	f7ff fdb4 	bl	80020c2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e010      	b.n	8002582 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	3354      	adds	r3, #84	; 0x54
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	3354      	adds	r3, #84	; 0x54
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	ddeb      	ble.n	8002560 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002588:	f000 fc88 	bl	8002e9c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <vTaskSuspend+0x12c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002594:	f000 fc68 	bl	8002e68 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002598:	f000 fb22 	bl	8002be0 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800259c:	f000 fc7e 	bl	8002e9c <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <vTaskSuspend+0x11c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d118      	bne.n	80025dc <vTaskSuspend+0x114>
        {
            if( xSchedulerRunning != pdFALSE )
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <vTaskSuspend+0x12c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <vTaskSuspend+0xfc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <vTaskSuspend+0x130>)
 80025b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80025c2:	e00b      	b.n	80025dc <vTaskSuspend+0x114>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <vTaskSuspend+0x128>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <vTaskSuspend+0x134>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d103      	bne.n	80025d8 <vTaskSuspend+0x110>
                    pxCurrentTCB = NULL;
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <vTaskSuspend+0x11c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    }
 80025d6:	e001      	b.n	80025dc <vTaskSuspend+0x114>
                    vTaskSwitchContext();
 80025d8:	f000 fa54 	bl	8002a84 <vTaskSwitchContext>
    }
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000008c 	.word	0x2000008c
 80025e8:	20000090 	.word	0x20000090
 80025ec:	20000154 	.word	0x20000154
 80025f0:	20000138 	.word	0x20000138
 80025f4:	20000158 	.word	0x20000158
 80025f8:	e000ed04 	.word	0xe000ed04
 80025fc:	2000014c 	.word	0x2000014c

08002600 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <prvTaskIsTaskSuspended+0x40>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10a      	bne.n	8002630 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <prvTaskIsTaskSuspended+0x44>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d005      	beq.n	8002630 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 800262c:	2301      	movs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002630:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000138 	.word	0x20000138
 8002644:	20000124 	.word	0x20000124

08002648 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
        TCB_t * const pxTCB = xTaskToResume;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	61bb      	str	r3, [r7, #24]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002658:	f3ef 8211 	mrs	r2, BASEPRI
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	613a      	str	r2, [r7, #16]
 800266e:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002670:	693b      	ldr	r3, [r7, #16]
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002672:	617b      	str	r3, [r7, #20]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002674:	69b8      	ldr	r0, [r7, #24]
 8002676:	f7ff ffc3 	bl	8002600 <prvTaskIsTaskSuspended>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d03f      	beq.n	8002700 <xTaskResumeFromISR+0xb8>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fca8 	bl	8004fd8 <SEGGER_SYSVIEW_ShrinkId>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	202b      	movs	r0, #43	; 0x2b
 800268e:	f001 ff89 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32>

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <xTaskResumeFromISR+0xd0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d12c      	bne.n	80026f4 <xTaskResumeFromISR+0xac>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	4b1f      	ldr	r3, [pc, #124]	; (800271c <xTaskResumeFromISR+0xd4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d304      	bcc.n	80026b2 <xTaskResumeFromISR+0x6a>
                    {
                        xYieldRequired = pdTRUE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <xTaskResumeFromISR+0xd8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fd60 	bl	800217c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 fbe8 	bl	8004e94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <xTaskResumeFromISR+0xdc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <xTaskResumeFromISR+0xdc>)
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <xTaskResumeFromISR+0xe0>)
 80026e4:	441a      	add	r2, r3
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f7ff fce8 	bl	80020c2 <vListInsertEnd>
 80026f2:	e005      	b.n	8002700 <xTaskResumeFromISR+0xb8>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3318      	adds	r3, #24
 80026f8:	4619      	mov	r1, r3
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <xTaskResumeFromISR+0xe4>)
 80026fc:	f7ff fce1 	bl	80020c2 <vListInsertEnd>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800270a:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 800270c:	69fb      	ldr	r3, [r7, #28]
    }
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000174 	.word	0x20000174
 800271c:	2000008c 	.word	0x2000008c
 8002720:	20000160 	.word	0x20000160
 8002724:	20000154 	.word	0x20000154
 8002728:	20000090 	.word	0x20000090
 800272c:	20000124 	.word	0x20000124

08002730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <vTaskStartScheduler+0x78>)
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2300      	movs	r3, #0
 8002740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002744:	4919      	ldr	r1, [pc, #100]	; (80027ac <vTaskStartScheduler+0x7c>)
 8002746:	481a      	ldr	r0, [pc, #104]	; (80027b0 <vTaskStartScheduler+0x80>)
 8002748:	f7ff fd42 	bl	80021d0 <xTaskCreate>
 800274c:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d123      	bne.n	800279c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	603b      	str	r3, [r7, #0]
    }
 8002766:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <vTaskStartScheduler+0x84>)
 800276a:	f04f 32ff 	mov.w	r2, #4294967295
 800276e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <vTaskStartScheduler+0x88>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <vTaskStartScheduler+0x8c>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <vTaskStartScheduler+0x90>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <vTaskStartScheduler+0x78>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d102      	bne.n	800278e <vTaskStartScheduler+0x5e>
 8002788:	f002 fae4 	bl	8004d54 <SEGGER_SYSVIEW_OnIdle>
 800278c:	e004      	b.n	8002798 <vTaskStartScheduler+0x68>
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <vTaskStartScheduler+0x90>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fb3c 	bl	8004e10 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002798:	f000 fb34 	bl	8002e04 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <vTaskStartScheduler+0x94>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000170 	.word	0x20000170
 80027ac:	08005414 	.word	0x08005414
 80027b0:	08002b2d 	.word	0x08002b2d
 80027b4:	2000016c 	.word	0x2000016c
 80027b8:	20000158 	.word	0x20000158
 80027bc:	20000150 	.word	0x20000150
 80027c0:	2000008c 	.word	0x2000008c
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <vTaskSuspendAll+0x18>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <vTaskSuspendAll+0x18>)
 80027d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	20000174 	.word	0x20000174

080027e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027f2:	f000 fb39 	bl	8002e68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <xTaskResumeAll+0x100>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <xTaskResumeAll+0x100>)
 80027fe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <xTaskResumeAll+0x100>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d165      	bne.n	80028d4 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <xTaskResumeAll+0x104>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d061      	beq.n	80028d4 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002810:	e032      	b.n	8002878 <xTaskResumeAll+0x94>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <xTaskResumeAll+0x108>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3318      	adds	r3, #24
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fcac 	bl	800217c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3304      	adds	r3, #4
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fca7 	bl	800217c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fb2f 	bl	8004e94 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <xTaskResumeAll+0x10c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <xTaskResumeAll+0x10c>)
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <xTaskResumeAll+0x110>)
 8002856:	441a      	add	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3304      	adds	r3, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f7ff fc2f 	bl	80020c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <xTaskResumeAll+0x114>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <xTaskResumeAll+0x94>
                    {
                        xYieldPending = pdTRUE;
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <xTaskResumeAll+0x118>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <xTaskResumeAll+0x108>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1c8      	bne.n	8002812 <xTaskResumeAll+0x2e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <xTaskResumeAll+0xa6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002886:	f000 f9ab 	bl	8002be0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <xTaskResumeAll+0x11c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d010      	beq.n	80028b8 <xTaskResumeAll+0xd4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002896:	f000 f849 	bl	800292c <xTaskIncrementTick>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <xTaskResumeAll+0xc2>
                            {
                                xYieldPending = pdTRUE;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <xTaskResumeAll+0x118>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f1      	bne.n	8002896 <xTaskResumeAll+0xb2>

                        xPendedTicks = 0;
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <xTaskResumeAll+0x11c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <xTaskResumeAll+0x118>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <xTaskResumeAll+0xf0>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <xTaskResumeAll+0x120>)
 80028c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028d4:	f000 fae2 	bl	8002e9c <vPortExitCritical>

    return xAlreadyYielded;
 80028d8:	68bb      	ldr	r3, [r7, #8]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000174 	.word	0x20000174
 80028e8:	2000014c 	.word	0x2000014c
 80028ec:	20000124 	.word	0x20000124
 80028f0:	20000154 	.word	0x20000154
 80028f4:	20000090 	.word	0x20000090
 80028f8:	2000008c 	.word	0x2000008c
 80028fc:	20000160 	.word	0x20000160
 8002900:	2000015c 	.word	0x2000015c
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <xTaskGetTickCountFromISR+0x20>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002918:	683b      	ldr	r3, [r7, #0]
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000150 	.word	0x20000150

0800292c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002936:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <xTaskIncrementTick+0x12c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8082 	bne.w	8002a44 <xTaskIncrementTick+0x118>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002940:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <xTaskIncrementTick+0x130>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002948:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <xTaskIncrementTick+0x130>)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d110      	bne.n	8002976 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <xTaskIncrementTick+0x134>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b42      	ldr	r3, [pc, #264]	; (8002a64 <xTaskIncrementTick+0x138>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <xTaskIncrementTick+0x134>)
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <xTaskIncrementTick+0x138>)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <xTaskIncrementTick+0x13c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	4a3e      	ldr	r2, [pc, #248]	; (8002a68 <xTaskIncrementTick+0x13c>)
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	f000 f935 	bl	8002be0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <xTaskIncrementTick+0x140>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d34c      	bcc.n	8002a1a <xTaskIncrementTick+0xee>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <xTaskIncrementTick+0x134>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <xTaskIncrementTick+0x68>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <xTaskIncrementTick+0x140>)
 800298c:	f04f 32ff 	mov.w	r2, #4294967295
 8002990:	601a      	str	r2, [r3, #0]
                    break;
 8002992:	e042      	b.n	8002a1a <xTaskIncrementTick+0xee>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002994:	4b32      	ldr	r3, [pc, #200]	; (8002a60 <xTaskIncrementTick+0x134>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d203      	bcs.n	80029b4 <xTaskIncrementTick+0x88>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029ac:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <xTaskIncrementTick+0x140>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029b2:	e032      	b.n	8002a1a <xTaskIncrementTick+0xee>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fbdf 	bl	800217c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <xTaskIncrementTick+0xa4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3318      	adds	r3, #24
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fbd6 	bl	800217c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fa5e 	bl	8004e94 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <xTaskIncrementTick+0x144>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <xTaskIncrementTick+0x144>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <xTaskIncrementTick+0x148>)
 80029f8:	441a      	add	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3304      	adds	r3, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7ff fb5e 	bl	80020c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <xTaskIncrementTick+0x14c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3b5      	bcc.n	8002980 <xTaskIncrementTick+0x54>
                            {
                                xSwitchRequired = pdTRUE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a18:	e7b2      	b.n	8002980 <xTaskIncrementTick+0x54>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <xTaskIncrementTick+0x14c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a20:	4914      	ldr	r1, [pc, #80]	; (8002a74 <xTaskIncrementTick+0x148>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d901      	bls.n	8002a36 <xTaskIncrementTick+0x10a>
                {
                    xSwitchRequired = pdTRUE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <xTaskIncrementTick+0x150>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	e004      	b.n	8002a4e <xTaskIncrementTick+0x122>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <xTaskIncrementTick+0x154>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <xTaskIncrementTick+0x154>)
 8002a4c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a4e:	697b      	ldr	r3, [r7, #20]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000174 	.word	0x20000174
 8002a5c:	20000150 	.word	0x20000150
 8002a60:	2000011c 	.word	0x2000011c
 8002a64:	20000120 	.word	0x20000120
 8002a68:	20000164 	.word	0x20000164
 8002a6c:	2000016c 	.word	0x2000016c
 8002a70:	20000154 	.word	0x20000154
 8002a74:	20000090 	.word	0x20000090
 8002a78:	2000008c 	.word	0x2000008c
 8002a7c:	20000160 	.word	0x20000160
 8002a80:	2000015c 	.word	0x2000015c

08002a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <vTaskSwitchContext+0x90>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <vTaskSwitchContext+0x94>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a98:	e038      	b.n	8002b0c <vTaskSwitchContext+0x88>
        xYieldPending = pdFALSE;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <vTaskSwitchContext+0x94>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <vTaskSwitchContext+0x98>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f1c3 031f 	rsb	r3, r3, #31
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <vTaskSwitchContext+0x9c>)
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d104      	bne.n	8002ae6 <vTaskSwitchContext+0x62>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <vTaskSwitchContext+0xa0>)
 8002aee:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <vTaskSwitchContext+0xa0>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <vTaskSwitchContext+0xa4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d102      	bne.n	8002b02 <vTaskSwitchContext+0x7e>
 8002afc:	f002 f92a 	bl	8004d54 <SEGGER_SYSVIEW_OnIdle>
}
 8002b00:	e004      	b.n	8002b0c <vTaskSwitchContext+0x88>
        traceTASK_SWITCHED_IN();
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <vTaskSwitchContext+0xa0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 f982 	bl	8004e10 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000174 	.word	0x20000174
 8002b18:	20000160 	.word	0x20000160
 8002b1c:	20000154 	.word	0x20000154
 8002b20:	20000090 	.word	0x20000090
 8002b24:	2000008c 	.word	0x2000008c
 8002b28:	20000170 	.word	0x20000170

08002b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b34:	f000 f84c 	bl	8002bd0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <prvIdleTask+0x28>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d9f9      	bls.n	8002b34 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <prvIdleTask+0x2c>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b50:	e7f0      	b.n	8002b34 <prvIdleTask+0x8>
 8002b52:	bf00      	nop
 8002b54:	20000090 	.word	0x20000090
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	e00c      	b.n	8002b82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <prvInitialiseTaskLists+0x58>)
 8002b74:	4413      	add	r3, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fa76 	bl	8002068 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d9ef      	bls.n	8002b68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b88:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <prvInitialiseTaskLists+0x5c>)
 8002b8a:	f7ff fa6d 	bl	8002068 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <prvInitialiseTaskLists+0x60>)
 8002b90:	f7ff fa6a 	bl	8002068 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <prvInitialiseTaskLists+0x64>)
 8002b96:	f7ff fa67 	bl	8002068 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b9a:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <prvInitialiseTaskLists+0x68>)
 8002b9c:	f7ff fa64 	bl	8002068 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <prvInitialiseTaskLists+0x6c>)
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <prvInitialiseTaskLists+0x5c>)
 8002ba4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <prvInitialiseTaskLists+0x70>)
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <prvInitialiseTaskLists+0x60>)
 8002baa:	601a      	str	r2, [r3, #0]
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000090 	.word	0x20000090
 8002bb8:	200000f4 	.word	0x200000f4
 8002bbc:	20000108 	.word	0x20000108
 8002bc0:	20000124 	.word	0x20000124
 8002bc4:	20000138 	.word	0x20000138
 8002bc8:	2000011c 	.word	0x2000011c
 8002bcc:	20000120 	.word	0x20000120

08002bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <prvResetNextTaskUnblockTime+0x30>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <prvResetNextTaskUnblockTime+0x34>)
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bf6:	e005      	b.n	8002c04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <prvResetNextTaskUnblockTime+0x30>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <prvResetNextTaskUnblockTime+0x34>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	2000011c 	.word	0x2000011c
 8002c14:	2000016c 	.word	0x2000016c

08002c18 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002c22:	4b32      	ldr	r3, [pc, #200]	; (8002cec <prvAddCurrentTaskToDelayedList+0xd4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff faa4 	bl	800217c <uxListRemove>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2201      	movs	r2, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002c50:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d110      	bne.n	8002c7c <prvAddCurrentTaskToDelayedList+0x64>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	211b      	movs	r1, #27
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 f956 	bl	8004f18 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c6c:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3304      	adds	r3, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4820      	ldr	r0, [pc, #128]	; (8002cf8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002c76:	f7ff fa24 	bl	80020c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002c7a:	e032      	b.n	8002ce2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d20f      	bcs.n	8002cb4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2104      	movs	r1, #4
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 f93c 	bl	8004f18 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f7ff fa2c 	bl	800210a <vListInsert>
}
 8002cb2:	e016      	b.n	8002ce2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2104      	movs	r1, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 f92c 	bl	8004f18 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7ff fa1c 	bl	800210a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <prvAddCurrentTaskToDelayedList+0xec>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d202      	bcs.n	8002ce2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002cdc:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <prvAddCurrentTaskToDelayedList+0xec>)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000150 	.word	0x20000150
 8002cf0:	2000008c 	.word	0x2000008c
 8002cf4:	20000154 	.word	0x20000154
 8002cf8:	20000138 	.word	0x20000138
 8002cfc:	20000120 	.word	0x20000120
 8002d00:	2000011c 	.word	0x2000011c
 8002d04:	2000016c 	.word	0x2000016c

08002d08 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3b04      	subs	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b04      	subs	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 0201 	bic.w	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b04      	subs	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d38:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <pxPortInitialiseStack+0x64>)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3b14      	subs	r3, #20
 8002d42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3b04      	subs	r3, #4
 8002d4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f06f 0202 	mvn.w	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3b20      	subs	r3, #32
 8002d5c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	08002d71 	.word	0x08002d71

08002d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	607b      	str	r3, [r7, #4]
    }
 8002d8c:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d8e:	bf00      	nop
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0fc      	beq.n	8002d90 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
	...

08002db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <pxCurrentTCBConst2>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	f380 8809 	msr	PSP, r0
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	4770      	bx	lr
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst2>:
 8002dd0:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvPortStartFirstTask+0x24>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f380 8808 	msr	MSP, r0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8814 	msr	CONTROL, r0
 8002dea:	b662      	cpsie	i
 8002dec:	b661      	cpsie	f
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	df00      	svc	0
 8002df8:	bf00      	nop
 8002dfa:	0000      	.short	0x0000
 8002dfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop

08002e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <xPortStartScheduler+0x48>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <xPortStartScheduler+0x48>)
 8002e0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e12:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <xPortStartScheduler+0x48>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <xPortStartScheduler+0x48>)
 8002e1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e20:	f000 f8b4 	bl	8002f8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <xPortStartScheduler+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e2a:	f000 f8cb 	bl	8002fc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <xPortStartScheduler+0x50>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <xPortStartScheduler+0x50>)
 8002e34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e38:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e3a:	f7ff ffcd 	bl	8002dd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e3e:	f7ff fe21 	bl	8002a84 <vTaskSwitchContext>
    prvTaskExitError();
 8002e42:	f7ff ff95 	bl	8002d70 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	e000ed20 	.word	0xe000ed20
 8002e50:	20000010 	.word	0x20000010
 8002e54:	e000ef34 	.word	0xe000ef34

08002e58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
    }
 8002e80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <vPortEnterCritical+0x30>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a03      	ldr	r2, [pc, #12]	; (8002e98 <vPortEnterCritical+0x30>)
 8002e8a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	20000010 	.word	0x20000010

08002e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <vPortExitCritical+0x30>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <vPortExitCritical+0x30>)
 8002eaa:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002eac:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <vPortExitCritical+0x30>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <vPortExitCritical+0x24>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	607b      	str	r3, [r7, #4]
        __asm volatile
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f383 8811 	msr	BASEPRI, r3
    }
 8002ebe:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	20000010 	.word	0x20000010

08002ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ed0:	f3ef 8009 	mrs	r0, PSP
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <pxCurrentTCBConst>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f01e 0f10 	tst.w	lr, #16
 8002ee0:	bf08      	it	eq
 8002ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eea:	6010      	str	r0, [r2, #0]
 8002eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ef4:	f380 8811 	msr	BASEPRI, r0
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f7ff fdc0 	bl	8002a84 <vTaskSwitchContext>
 8002f04:	f04f 0000 	mov.w	r0, #0
 8002f08:	f380 8811 	msr	BASEPRI, r0
 8002f0c:	bc09      	pop	{r0, r3}
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	6808      	ldr	r0, [r1, #0]
 8002f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f16:	f01e 0f10 	tst.w	lr, #16
 8002f1a:	bf08      	it	eq
 8002f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f20:	f380 8809 	msr	PSP, r0
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	f3af 8000 	nop.w

08002f30 <pxCurrentTCBConst>:
 8002f30:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop

08002f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	607b      	str	r3, [r7, #4]
    }
 8002f50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002f52:	f001 fe85 	bl	8004c60 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f56:	f7ff fce9 	bl	800292c <xTaskIncrementTick>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002f60:	f001 fedc 	bl	8004d1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <SysTick_Handler+0x50>)
 8002f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e001      	b.n	8002f72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002f6e:	f001 feb9 	bl	8004ce4 <SEGGER_SYSVIEW_RecordExitISR>
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f383 8811 	msr	BASEPRI, r3
    }
 8002f7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <vPortSetupTimerInterrupt+0x28>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <vPortSetupTimerInterrupt+0x2c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <vPortSetupTimerInterrupt+0x30>)
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <vPortSetupTimerInterrupt+0x34>)
 8002fa0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <vPortSetupTimerInterrupt+0x28>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e010 	.word	0xe000e010
 8002fb8:	e000e018 	.word	0xe000e018
 8002fbc:	e000e014 	.word	0xe000e014
 8002fc0:	0001387f 	.word	0x0001387f

08002fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002fd4 <vPortEnableVFP+0x10>
 8002fc8:	6801      	ldr	r1, [r0, #0]
 8002fca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002fce:	6001      	str	r1, [r0, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	0000      	.short	0x0000
 8002fd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop

08002fdc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8002fe8:	f7ff fbee 	bl	80027c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <pvPortMalloc+0x144>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ff4:	f000 f8e0 	bl	80031b8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ff8:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <pvPortMalloc+0x148>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 8086 	bne.w	8003112 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01e      	beq.n	800304a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800300c:	2208      	movs	r2, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d218      	bcs.n	800304a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8003018:	2208      	movs	r2, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	2b00      	cmp	r3, #0
 8003028:	d011      	beq.n	800304e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f023 0307 	bic.w	r3, r3, #7
 8003030:	3308      	adds	r3, #8
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d205      	bcs.n	8003044 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f023 0307 	bic.w	r3, r3, #7
 800303e:	3308      	adds	r3, #8
 8003040:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003042:	e004      	b.n	800304e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003048:	e001      	b.n	800304e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d05e      	beq.n	8003112 <pvPortMalloc+0x136>
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <pvPortMalloc+0x14c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	429a      	cmp	r2, r3
 800305c:	d859      	bhi.n	8003112 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800305e:	4b33      	ldr	r3, [pc, #204]	; (800312c <pvPortMalloc+0x150>)
 8003060:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003062:	4b32      	ldr	r3, [pc, #200]	; (800312c <pvPortMalloc+0x150>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003068:	e004      	b.n	8003074 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d903      	bls.n	8003086 <pvPortMalloc+0xaa>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <pvPortMalloc+0x144>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	d040      	beq.n	8003112 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2208      	movs	r2, #8
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad2      	subs	r2, r2, r3
 80030aa:	2308      	movs	r3, #8
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90f      	bls.n	80030d2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030cc:	68b8      	ldr	r0, [r7, #8]
 80030ce:	f000 f8d5 	bl	800327c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <pvPortMalloc+0x14c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <pvPortMalloc+0x14c>)
 80030de:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <pvPortMalloc+0x14c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <pvPortMalloc+0x154>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d203      	bcs.n	80030f4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <pvPortMalloc+0x14c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <pvPortMalloc+0x154>)
 80030f2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <pvPortMalloc+0x148>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <pvPortMalloc+0x158>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <pvPortMalloc+0x158>)
 8003110:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003112:	f7ff fb67 	bl	80027e4 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20012d80 	.word	0x20012d80
 8003124:	20012d94 	.word	0x20012d94
 8003128:	20012d84 	.word	0x20012d84
 800312c:	20012d78 	.word	0x20012d78
 8003130:	20012d88 	.word	0x20012d88
 8003134:	20012d8c 	.word	0x20012d8c

08003138 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d02c      	beq.n	80031a4 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800314a:	2308      	movs	r3, #8
 800314c:	425b      	negs	r3, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <vPortFree+0x74>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01e      	beq.n	80031a4 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11a      	bne.n	80031a4 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <vPortFree+0x74>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	43db      	mvns	r3, r3
 8003178:	401a      	ands	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800317e:	f7ff fb23 	bl	80027c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <vPortFree+0x78>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <vPortFree+0x78>)
 800318e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003190:	68b8      	ldr	r0, [r7, #8]
 8003192:	f000 f873 	bl	800327c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <vPortFree+0x7c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <vPortFree+0x7c>)
 800319e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031a0:	f7ff fb20 	bl	80027e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20012d94 	.word	0x20012d94
 80031b0:	20012d84 	.word	0x20012d84
 80031b4:	20012d90 	.word	0x20012d90

080031b8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80031c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80031c4:	4b27      	ldr	r3, [pc, #156]	; (8003264 <prvHeapInit+0xac>)
 80031c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3307      	adds	r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0307 	bic.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <prvHeapInit+0xac>)
 80031e8:	4413      	add	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <prvHeapInit+0xb0>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <prvHeapInit+0xb0>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003204:	2208      	movs	r2, #8
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0307 	bic.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a15      	ldr	r2, [pc, #84]	; (800326c <prvHeapInit+0xb4>)
 8003218:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <prvHeapInit+0xb4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <prvHeapInit+0xb4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <prvHeapInit+0xb4>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <prvHeapInit+0xb8>)
 8003246:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a09      	ldr	r2, [pc, #36]	; (8003274 <prvHeapInit+0xbc>)
 800324e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <prvHeapInit+0xc0>)
 8003252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003256:	601a      	str	r2, [r3, #0]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	20000178 	.word	0x20000178
 8003268:	20012d78 	.word	0x20012d78
 800326c:	20012d80 	.word	0x20012d80
 8003270:	20012d88 	.word	0x20012d88
 8003274:	20012d84 	.word	0x20012d84
 8003278:	20012d94 	.word	0x20012d94

0800327c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <prvInsertBlockIntoFreeList+0xac>)
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	e002      	b.n	8003290 <prvInsertBlockIntoFreeList+0x14>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d8f7      	bhi.n	800328a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d108      	bne.n	80032be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	441a      	add	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	441a      	add	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d118      	bne.n	8003304 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b15      	ldr	r3, [pc, #84]	; (800332c <prvInsertBlockIntoFreeList+0xb0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d00d      	beq.n	80032fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e008      	b.n	800330c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <prvInsertBlockIntoFreeList+0xb0>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e003      	b.n	800330c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d002      	beq.n	800331a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20012d78 	.word	0x20012d78
 800332c:	20012d80 	.word	0x20012d80

08003330 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003334:	4803      	ldr	r0, [pc, #12]	; (8003344 <_cbSendSystemDesc+0x14>)
 8003336:	f001 fc3d 	bl	8004bb4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <_cbSendSystemDesc+0x18>)
 800333c:	f001 fc3a 	bl	8004bb4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800541c 	.word	0x0800541c
 8003348:	08005454 	.word	0x08005454

0800334c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <SEGGER_SYSVIEW_Conf+0x1c>)
 8003352:	4a06      	ldr	r2, [pc, #24]	; (800336c <SEGGER_SYSVIEW_Conf+0x20>)
 8003354:	4906      	ldr	r1, [pc, #24]	; (8003370 <SEGGER_SYSVIEW_Conf+0x24>)
 8003356:	4806      	ldr	r0, [pc, #24]	; (8003370 <SEGGER_SYSVIEW_Conf+0x24>)
 8003358:	f001 f8b2 	bl	80044c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800335c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003360:	f001 f8f2 	bl	8004548 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	08003331 	.word	0x08003331
 800336c:	08005524 	.word	0x08005524
 8003370:	04c4b400 	.word	0x04c4b400

08003374 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800337a:	2300      	movs	r3, #0
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	e033      	b.n	80033e8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003380:	491e      	ldr	r1, [pc, #120]	; (80033fc <_cbSendTaskList+0x88>)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	491a      	ldr	r1, [pc, #104]	; (80033fc <_cbSendTaskList+0x88>)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3304      	adds	r3, #4
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	4c16      	ldr	r4, [pc, #88]	; (80033fc <_cbSendTaskList+0x88>)
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4423      	add	r3, r4
 80033b0:	3308      	adds	r3, #8
 80033b2:	681c      	ldr	r4, [r3, #0]
 80033b4:	4d11      	ldr	r5, [pc, #68]	; (80033fc <_cbSendTaskList+0x88>)
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	442b      	add	r3, r5
 80033c2:	330c      	adds	r3, #12
 80033c4:	681d      	ldr	r5, [r3, #0]
 80033c6:	4e0d      	ldr	r6, [pc, #52]	; (80033fc <_cbSendTaskList+0x88>)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4433      	add	r3, r6
 80033d4:	3310      	adds	r3, #16
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	462b      	mov	r3, r5
 80033dc:	4622      	mov	r2, r4
 80033de:	f000 f8bd 	bl	800355c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3301      	adds	r3, #1
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <_cbSendTaskList+0x8c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3c6      	bcc.n	8003380 <_cbSendTaskList+0xc>
  }
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fc:	20012d98 	.word	0x20012d98
 8003400:	20012e38 	.word	0x20012e38

08003404 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800340c:	f7ff fa7c 	bl	8002908 <xTaskGetTickCountFromISR>
 8003410:	4603      	mov	r3, r0
 8003412:	2200      	movs	r2, #0
 8003414:	469a      	mov	sl, r3
 8003416:	4693      	mov	fp, r2
 8003418:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800341c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	f04f 0a00 	mov.w	sl, #0
 8003428:	f04f 0b00 	mov.w	fp, #0
 800342c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003430:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003434:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003438:	4652      	mov	r2, sl
 800343a:	465b      	mov	r3, fp
 800343c:	1a14      	subs	r4, r2, r0
 800343e:	eb63 0501 	sbc.w	r5, r3, r1
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	00ab      	lsls	r3, r5, #2
 800344c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003450:	00a2      	lsls	r2, r4, #2
 8003452:	4614      	mov	r4, r2
 8003454:	461d      	mov	r5, r3
 8003456:	eb14 0800 	adds.w	r8, r4, r0
 800345a:	eb45 0901 	adc.w	r9, r5, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800347a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800348c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800349a:	2205      	movs	r2, #5
 800349c:	492b      	ldr	r1, [pc, #172]	; (800354c <SYSVIEW_AddTask+0xc0>)
 800349e:	68b8      	ldr	r0, [r7, #8]
 80034a0:	f001 ff1a 	bl	80052d8 <memcmp>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04b      	beq.n	8003542 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b07      	cmp	r3, #7
 80034b0:	d903      	bls.n	80034ba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034b2:	4828      	ldr	r0, [pc, #160]	; (8003554 <SYSVIEW_AddTask+0xc8>)
 80034b4:	f001 fe90 	bl	80051d8 <SEGGER_SYSVIEW_Warn>
    return;
 80034b8:	e044      	b.n	8003544 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034ba:	4b25      	ldr	r3, [pc, #148]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4926      	ldr	r1, [pc, #152]	; (8003558 <SYSVIEW_AddTask+0xcc>)
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4921      	ldr	r1, [pc, #132]	; (8003558 <SYSVIEW_AddTask+0xcc>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3304      	adds	r3, #4
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	491b      	ldr	r1, [pc, #108]	; (8003558 <SYSVIEW_AddTask+0xcc>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3308      	adds	r3, #8
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4916      	ldr	r1, [pc, #88]	; (8003558 <SYSVIEW_AddTask+0xcc>)
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	330c      	adds	r3, #12
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4910      	ldr	r1, [pc, #64]	; (8003558 <SYSVIEW_AddTask+0xcc>)
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3310      	adds	r3, #16
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3301      	adds	r3, #1
 800352c:	4a08      	ldr	r2, [pc, #32]	; (8003550 <SYSVIEW_AddTask+0xc4>)
 800352e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f80e 	bl	800355c <SYSVIEW_SendTaskInfo>
 8003540:	e000      	b.n	8003544 <SYSVIEW_AddTask+0xb8>
    return;
 8003542:	bf00      	nop

}
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	08005464 	.word	0x08005464
 8003550:	20012e38 	.word	0x20012e38
 8003554:	0800546c 	.word	0x0800546c
 8003558:	20012d98 	.word	0x20012d98

0800355c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800356a:	f107 0314 	add.w	r3, r7, #20
 800356e:	2214      	movs	r2, #20
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fece 	bl	8005314 <memset>
  TaskInfo.TaskID     = TaskID;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4618      	mov	r0, r3
 8003592:	f001 fa17 	bl	80049c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003596:	bf00      	nop
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <_DoInit+0x98>)
 80035a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2203      	movs	r2, #3
 80035ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2203      	movs	r2, #3
 80035b4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <_DoInit+0x9c>)
 80035ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <_DoInit+0xa0>)
 80035c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <_DoInit+0x9c>)
 80035e0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a17      	ldr	r2, [pc, #92]	; (8003644 <_DoInit+0xa4>)
 80035e6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2210      	movs	r2, #16
 80035ec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3307      	adds	r3, #7
 8003604:	4a10      	ldr	r2, [pc, #64]	; (8003648 <_DoInit+0xa8>)
 8003606:	6810      	ldr	r0, [r2, #0]
 8003608:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800360a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a0e      	ldr	r2, [pc, #56]	; (800364c <_DoInit+0xac>)
 8003612:	6810      	ldr	r0, [r2, #0]
 8003614:	6018      	str	r0, [r3, #0]
 8003616:	8891      	ldrh	r1, [r2, #4]
 8003618:	7992      	ldrb	r2, [r2, #6]
 800361a:	8099      	strh	r1, [r3, #4]
 800361c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800361e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003628:	f3bf 8f5f 	dmb	sy
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	20012e3c 	.word	0x20012e3c
 800363c:	080054bc 	.word	0x080054bc
 8003640:	20012ee4 	.word	0x20012ee4
 8003644:	200132e4 	.word	0x200132e4
 8003648:	080054c8 	.word	0x080054c8
 800364c:	080054cc 	.word	0x080054cc

08003650 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800365c:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <SEGGER_RTT_ReadNoLock+0x108>)
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <SEGGER_RTT_ReadNoLock+0x1e>
 800366a:	f7ff ff99 	bl	80035a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3360      	adds	r3, #96	; 0x60
 800367a:	4a37      	ldr	r2, [pc, #220]	; (8003758 <SEGGER_RTT_ReadNoLock+0x108>)
 800367c:	4413      	add	r3, r2
 800367e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	429a      	cmp	r2, r3
 800369a:	d92b      	bls.n	80036f4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	bf28      	it	cs
 80036ae:	4613      	movcs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	4413      	add	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	6939      	ldr	r1, [r7, #16]
 80036c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036c2:	f001 fe19 	bl	80052f8 <memcpy>
    NumBytesRead += NumBytesRem;
 80036c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4413      	add	r3, r2
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4413      	add	r3, r2
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80036de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4413      	add	r3, r2
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d101      	bne.n	80036f4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4293      	cmp	r3, r2
 8003702:	bf28      	it	cs
 8003704:	4613      	movcs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d019      	beq.n	8003742 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	4413      	add	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	6939      	ldr	r1, [r7, #16]
 800371c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800371e:	f001 fdeb 	bl	80052f8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	4413      	add	r3, r2
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4413      	add	r3, r2
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800373a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4413      	add	r3, r2
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003750:	4618      	mov	r0, r3
 8003752:	3730      	adds	r7, #48	; 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20012e3c 	.word	0x20012e3c

0800375c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003778:	f7ff ff12 	bl	80035a0 <_DoInit>
  SEGGER_RTT_LOCK();
 800377c:	f3ef 8311 	mrs	r3, BASEPRI
 8003780:	f04f 0120 	mov.w	r1, #32
 8003784:	f381 8811 	msr	BASEPRI, r1
 8003788:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800378c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003792:	6939      	ldr	r1, [r7, #16]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	3304      	adds	r3, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	dbeb      	blt.n	8003792 <SEGGER_RTT_AllocUpBuffer+0x36>
 80037ba:	e000      	b.n	80037be <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80037bc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	da3f      	bge.n	8003848 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80037c8:	6939      	ldr	r1, [r7, #16]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	440b      	add	r3, r1
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80037dc:	6939      	ldr	r1, [r7, #16]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	3304      	adds	r3, #4
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80037f2:	6939      	ldr	r1, [r7, #16]
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	4613      	mov	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	3320      	adds	r3, #32
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003806:	6939      	ldr	r1, [r7, #16]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	3328      	adds	r3, #40	; 0x28
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800381a:	6939      	ldr	r1, [r7, #16]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	3324      	adds	r3, #36	; 0x24
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800382e:	6939      	ldr	r1, [r7, #16]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	332c      	adds	r3, #44	; 0x2c
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003842:	f3bf 8f5f 	dmb	sy
 8003846:	e002      	b.n	800384e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003848:	f04f 33ff 	mov.w	r3, #4294967295
 800384c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003854:	69fb      	ldr	r3, [r7, #28]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20012e3c 	.word	0x20012e3c

08003864 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003872:	4b33      	ldr	r3, [pc, #204]	; (8003940 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003880:	f7ff fe8e 	bl	80035a0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003886:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	461a      	mov	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4293      	cmp	r3, r2
 8003892:	d24d      	bcs.n	8003930 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003894:	f3ef 8311 	mrs	r3, BASEPRI
 8003898:	f04f 0120 	mov.w	r1, #32
 800389c:	f381 8811 	msr	BASEPRI, r1
 80038a0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d031      	beq.n	800390c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	3360      	adds	r3, #96	; 0x60
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	3364      	adds	r3, #100	; 0x64
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	3368      	adds	r3, #104	; 0x68
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80038e4:	6979      	ldr	r1, [r7, #20]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	3370      	adds	r3, #112	; 0x70
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80038f8:	6979      	ldr	r1, [r7, #20]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4613      	mov	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4413      	add	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	440b      	add	r3, r1
 8003906:	336c      	adds	r3, #108	; 0x6c
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800390c:	6979      	ldr	r1, [r7, #20]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	3374      	adds	r3, #116	; 0x74
 800391c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800391e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003920:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e002      	b.n	8003936 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003936:	69fb      	ldr	r3, [r7, #28]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20012e3c 	.word	0x20012e3c

08003944 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003954:	e002      	b.n	800395c <_EncodeStr+0x18>
    Len++;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3301      	adds	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f6      	bne.n	8003956 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	d901      	bls.n	8003974 <_EncodeStr+0x30>
    Len = Limit;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2bfe      	cmp	r3, #254	; 0xfe
 8003978:	d806      	bhi.n	8003988 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	60fa      	str	r2, [r7, #12]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e011      	b.n	80039ac <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60fa      	str	r2, [r7, #12]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	60fa      	str	r2, [r7, #12]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	0a19      	lsrs	r1, r3, #8
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	60fa      	str	r2, [r7, #12]
 80039a8:	b2ca      	uxtb	r2, r1
 80039aa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80039b0:	e00a      	b.n	80039c8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	1c53      	adds	r3, r2, #1
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	60f9      	str	r1, [r7, #12]
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	701a      	strb	r2, [r3, #0]
    n++;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3f0      	bcc.n	80039b2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80039d0:	68fb      	ldr	r3, [r7, #12]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80039fe:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <_HandleIncomingPacket+0xe0>)
 8003a00:	7e1b      	ldrb	r3, [r3, #24]
 8003a02:	4618      	mov	r0, r3
 8003a04:	1cfb      	adds	r3, r7, #3
 8003a06:	2201      	movs	r2, #1
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f7ff fe21 	bl	8003650 <SEGGER_RTT_ReadNoLock>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	dd54      	ble.n	8003ac2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d032      	beq.n	8003a84 <_HandleIncomingPacket+0x8c>
 8003a1e:	2b80      	cmp	r3, #128	; 0x80
 8003a20:	dc42      	bgt.n	8003aa8 <_HandleIncomingPacket+0xb0>
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	dc16      	bgt.n	8003a54 <_HandleIncomingPacket+0x5c>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	dd3e      	ble.n	8003aa8 <_HandleIncomingPacket+0xb0>
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	2b06      	cmp	r3, #6
 8003a2e:	d83b      	bhi.n	8003aa8 <_HandleIncomingPacket+0xb0>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <_HandleIncomingPacket+0x40>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a5b 	.word	0x08003a5b
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a67 	.word	0x08003a67
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a73 	.word	0x08003a73
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	2b7f      	cmp	r3, #127	; 0x7f
 8003a56:	d036      	beq.n	8003ac6 <_HandleIncomingPacket+0xce>
 8003a58:	e026      	b.n	8003aa8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003a5a:	f000 fe39 	bl	80046d0 <SEGGER_SYSVIEW_Start>
      break;
 8003a5e:	e037      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003a60:	f000 fef0 	bl	8004844 <SEGGER_SYSVIEW_Stop>
      break;
 8003a64:	e034      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003a66:	f001 f8c9 	bl	8004bfc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003a6a:	e031      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003a6c:	f001 f88e 	bl	8004b8c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003a70:	e02e      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003a72:	f000 ff0d 	bl	8004890 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003a76:	e02b      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003a78:	f001 fb5c 	bl	8005134 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003a7c:	e028      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003a7e:	f001 fb3b 	bl	80050f8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003a82:	e025      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <_HandleIncomingPacket+0xe0>)
 8003a86:	7e1b      	ldrb	r3, [r3, #24]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	1cfb      	adds	r3, r7, #3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7ff fdde 	bl	8003650 <SEGGER_RTT_ReadNoLock>
 8003a94:	4603      	mov	r3, r0
 8003a96:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	dd15      	ble.n	8003aca <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 faa9 	bl	8004ff8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003aa6:	e010      	b.n	8003aca <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da0e      	bge.n	8003ace <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <_HandleIncomingPacket+0xe0>)
 8003ab2:	7e1b      	ldrb	r3, [r3, #24]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	1cfb      	adds	r3, r7, #3
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7ff fdc8 	bl	8003650 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003ac0:	e005      	b.n	8003ace <_HandleIncomingPacket+0xd6>
    }
  }
 8003ac2:	bf00      	nop
 8003ac4:	e004      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e002      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e000      	b.n	8003ad0 <_HandleIncomingPacket+0xd8>
      break;
 8003ace:	bf00      	nop
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200142fc 	.word	0x200142fc

08003adc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	; 0x30
 8003ae0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af0:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af6:	e00b      	b.n	8003b10 <_TrySendOverflowPacket+0x34>
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	1c59      	adds	r1, r3, #1
 8003b00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	09db      	lsrs	r3, r3, #7
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	2b7f      	cmp	r3, #127	; 0x7f
 8003b14:	d8f0      	bhi.n	8003af8 <_TrySendOverflowPacket+0x1c>
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <_TrySendOverflowPacket+0xe0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	e00b      	b.n	8003b58 <_TrySendOverflowPacket+0x7c>
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	6279      	str	r1, [r7, #36]	; 0x24
 8003b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	09db      	lsrs	r3, r3, #7
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5c:	d8f0      	bhi.n	8003b40 <_TrySendOverflowPacket+0x64>
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	627a      	str	r2, [r7, #36]	; 0x24
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	4618      	mov	r0, r3
 8003b74:	1d3b      	adds	r3, r7, #4
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f7fc fb26 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003b84:	4603      	mov	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e004      	b.n	8003bac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <_TrySendOverflowPacket+0xdc>)
 8003baa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003bac:	693b      	ldr	r3, [r7, #16]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3730      	adds	r7, #48	; 0x30
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200142fc 	.word	0x200142fc
 8003bbc:	e0001004 	.word	0xe0001004

08003bc0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003bcc:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <_SendPacket+0x1c0>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d010      	beq.n	8003bf6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <_SendPacket+0x1c0>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a3 	beq.w	8003d24 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003bde:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <_SendPacket+0x1c0>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d109      	bne.n	8003bfa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003be6:	f7ff ff79 	bl	8003adc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <_SendPacket+0x1c0>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	f040 809a 	bne.w	8003d28 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003bf4:	e001      	b.n	8003bfa <_SendPacket+0x3a>
    goto Send;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <_SendPacket+0x3c>
Send:
 8003bfa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b1f      	cmp	r3, #31
 8003c00:	d809      	bhi.n	8003c16 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003c02:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <_SendPacket+0x1c0>)
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 808b 	bne.w	8003d2c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b17      	cmp	r3, #23
 8003c1a:	d807      	bhi.n	8003c2c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e03d      	b.n	8003ca8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b7f      	cmp	r3, #127	; 0x7f
 8003c38:	d912      	bls.n	8003c60 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	09da      	lsrs	r2, r3, #7
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	3a01      	subs	r2, #1
 8003c52:	60fa      	str	r2, [r7, #12]
 8003c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e006      	b.n	8003c6e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b7f      	cmp	r3, #127	; 0x7f
 8003c72:	d912      	bls.n	8003c9a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	09da      	lsrs	r2, r3, #7
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	60fa      	str	r2, [r7, #12]
 8003c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e006      	b.n	8003ca8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ca8:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <_SendPacket+0x1c4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003cae:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <_SendPacket+0x1c0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	e00b      	b.n	8003cda <_SendPacket+0x11a>
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1c59      	adds	r1, r3, #1
 8003cca:	6279      	str	r1, [r7, #36]	; 0x24
 8003ccc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	09db      	lsrs	r3, r3, #7
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cde:	d8f0      	bhi.n	8003cc2 <_SendPacket+0x102>
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003cf0:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <_SendPacket+0x1c0>)
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	f7fc fa66 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d04:	4603      	mov	r3, r0
 8003d06:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <_SendPacket+0x1c0>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	60d3      	str	r3, [r2, #12]
 8003d14:	e00b      	b.n	8003d2e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <_SendPacket+0x1c0>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <_SendPacket+0x1c0>)
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e004      	b.n	8003d2e <_SendPacket+0x16e>
    goto SendDone;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <_SendPacket+0x16e>
      goto SendDone;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <_SendPacket+0x16e>
      goto SendDone;
 8003d2c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <_SendPacket+0x1c0>)
 8003d30:	7e1b      	ldrb	r3, [r3, #24]
 8003d32:	4619      	mov	r1, r3
 8003d34:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <_SendPacket+0x1c8>)
 8003d36:	460b      	mov	r3, r1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	440b      	add	r3, r1
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	336c      	adds	r3, #108	; 0x6c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <_SendPacket+0x1c0>)
 8003d46:	7e1b      	ldrb	r3, [r3, #24]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	490f      	ldr	r1, [pc, #60]	; (8003d88 <_SendPacket+0x1c8>)
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4403      	add	r3, r0
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	3370      	adds	r3, #112	; 0x70
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d00b      	beq.n	8003d76 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <_SendPacket+0x1c0>)
 8003d60:	789b      	ldrb	r3, [r3, #2]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <_SendPacket+0x1c0>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d6c:	f7ff fe44 	bl	80039f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <_SendPacket+0x1c0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d76:	bf00      	nop
 8003d78:	3728      	adds	r7, #40	; 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200142fc 	.word	0x200142fc
 8003d84:	e0001004 	.word	0xe0001004
 8003d88:	20012e3c 	.word	0x20012e3c

08003d8c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d80a      	bhi.n	8003dbc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	1c59      	adds	r1, r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6051      	str	r1, [r2, #4]
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d15a      	bne.n	8003e7a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	e00b      	b.n	8003dfe <_StoreChar+0x72>
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	1c59      	adds	r1, r3, #1
 8003dee:	6279      	str	r1, [r7, #36]	; 0x24
 8003df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	09db      	lsrs	r3, r3, #7
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2b7f      	cmp	r3, #127	; 0x7f
 8003e02:	d8f0      	bhi.n	8003de6 <_StoreChar+0x5a>
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	627a      	str	r2, [r7, #36]	; 0x24
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	e00b      	b.n	8003e36 <_StoreChar+0xaa>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	1c59      	adds	r1, r3, #1
 8003e26:	61f9      	str	r1, [r7, #28]
 8003e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	09db      	lsrs	r3, r3, #7
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b7f      	cmp	r3, #127	; 0x7f
 8003e3a:	d8f0      	bhi.n	8003e1e <_StoreChar+0x92>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	61fa      	str	r2, [r7, #28]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	221a      	movs	r2, #26
 8003e52:	6939      	ldr	r1, [r7, #16]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff feb3 	bl	8003bc0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fdbd 	bl	80039de <_PreparePacket>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3728      	adds	r7, #40	; 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003e96:	2301      	movs	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003e9e:	e007      	b.n	8003eb0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	623b      	str	r3, [r7, #32]
    Width++;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3301      	adds	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d2f3      	bcs.n	8003ea0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d901      	bls.n	8003ec4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11f      	bne.n	8003f0e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <_PrintUnsigned+0x66>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <_PrintUnsigned+0x66>
        c = '0';
 8003ee4:	2330      	movs	r3, #48	; 0x30
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	e001      	b.n	8003eee <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003eea:	2320      	movs	r3, #32
 8003eec:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003eee:	e007      	b.n	8003f00 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003ef6:	7efb      	ldrb	r3, [r7, #27]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff ff46 	bl	8003d8c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <_PrintUnsigned+0x8a>
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3f0      	bcc.n	8003ef0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d903      	bls.n	8003f1c <_PrintUnsigned+0x98>
      NumDigits--;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	e009      	b.n	8003f30 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d200      	bcs.n	8003f30 <_PrintUnsigned+0xac>
        break;
 8003f2e:	e005      	b.n	8003f3c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	fb02 f303 	mul.w	r3, r2, r3
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003f3a:	e7e8      	b.n	8003f0e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <_PrintUnsigned+0x128>)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff ff14 	bl	8003d8c <_StoreChar>
    Digit /= Base;
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e3      	bne.n	8003f3c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d011      	beq.n	8003fa2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f84:	e006      	b.n	8003f94 <_PrintUnsigned+0x110>
        FieldWidth--;
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003f8c:	2120      	movs	r1, #32
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fefc 	bl	8003d8c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <_PrintUnsigned+0x11e>
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3f1      	bcc.n	8003f86 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3728      	adds	r7, #40	; 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	08005538 	.word	0x08005538

08003fb0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bfb8      	it	lt
 8003fc4:	425b      	neglt	r3, r3
 8003fc6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003fcc:	e007      	b.n	8003fde <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fd6:	613b      	str	r3, [r7, #16]
    Width++;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	daf3      	bge.n	8003fce <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d901      	bls.n	8003ff2 <_PrintInt+0x42>
    Width = NumDigits;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <_PrintInt+0x5e>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	db04      	blt.n	8004008 <_PrintInt+0x58>
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <_PrintInt+0x5e>
    FieldWidth--;
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	3b01      	subs	r3, #1
 800400c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <_PrintInt+0x6e>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <_PrintInt+0x9c>
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d111      	bne.n	800404c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00e      	beq.n	800404c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800402e:	e006      	b.n	800403e <_PrintInt+0x8e>
        FieldWidth--;
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	3b01      	subs	r3, #1
 8004034:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004036:	2120      	movs	r1, #32
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff fea7 	bl	8003d8c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <_PrintInt+0x9c>
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	429a      	cmp	r2, r3
 800404a:	d3f1      	bcc.n	8004030 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	da07      	bge.n	8004062 <_PrintInt+0xb2>
    v = -v;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	425b      	negs	r3, r3
 8004056:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004058:	212d      	movs	r1, #45	; 0x2d
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff fe96 	bl	8003d8c <_StoreChar>
 8004060:	e008      	b.n	8004074 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800406c:	212b      	movs	r1, #43	; 0x2b
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fe8c 	bl	8003d8c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <_PrintInt+0x102>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d114      	bne.n	80040b2 <_PrintInt+0x102>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d111      	bne.n	80040b2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004094:	e006      	b.n	80040a4 <_PrintInt+0xf4>
        FieldWidth--;
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	3b01      	subs	r3, #1
 800409a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800409c:	2130      	movs	r1, #48	; 0x30
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff fe74 	bl	8003d8c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <_PrintInt+0x102>
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3f1      	bcc.n	8004096 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff fedf 	bl	8003e84 <_PrintUnsigned>
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b098      	sub	sp, #96	; 0x60
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80040dc:	f3ef 8311 	mrs	r3, BASEPRI
 80040e0:	f04f 0120 	mov.w	r1, #32
 80040e4:	f381 8811 	msr	BASEPRI, r1
 80040e8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ea:	48b7      	ldr	r0, [pc, #732]	; (80043c8 <_VPrintTarget+0x2f8>)
 80040ec:	f7ff fc77 	bl	80039de <_PreparePacket>
 80040f0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80040f2:	4bb5      	ldr	r3, [pc, #724]	; (80043c8 <_VPrintTarget+0x2f8>)
 80040f4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80040f6:	2300      	movs	r3, #0
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004116:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8183 	beq.w	8004426 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004124:	2b25      	cmp	r3, #37	; 0x25
 8004126:	f040 8170 	bne.w	800440a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800412a:	2300      	movs	r3, #0
 800412c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800413a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800413e:	3b23      	subs	r3, #35	; 0x23
 8004140:	2b0d      	cmp	r3, #13
 8004142:	d83f      	bhi.n	80041c4 <_VPrintTarget+0xf4>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <_VPrintTarget+0x7c>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041c5 	.word	0x080041c5
 8004154:	080041c5 	.word	0x080041c5
 8004158:	080041c5 	.word	0x080041c5
 800415c:	080041c5 	.word	0x080041c5
 8004160:	080041c5 	.word	0x080041c5
 8004164:	080041c5 	.word	0x080041c5
 8004168:	080041c5 	.word	0x080041c5
 800416c:	080041a5 	.word	0x080041a5
 8004170:	080041c5 	.word	0x080041c5
 8004174:	08004185 	.word	0x08004185
 8004178:	080041c5 	.word	0x080041c5
 800417c:	080041c5 	.word	0x080041c5
 8004180:	08004195 	.word	0x08004195
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e01a      	b.n	80041ca <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	64bb      	str	r3, [r7, #72]	; 0x48
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e012      	b.n	80041ca <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80041a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e00a      	b.n	80041ca <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80041b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b6:	f043 0308 	orr.w	r3, r3, #8
 80041ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3301      	adds	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e002      	b.n	80041ca <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80041c4:	2300      	movs	r3, #0
 80041c6:	653b      	str	r3, [r7, #80]	; 0x50
 80041c8:	bf00      	nop
        }
      } while (v);
 80041ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1b0      	bne.n	8004132 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80041d0:	2300      	movs	r3, #0
 80041d2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80041dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041e0:	2b2f      	cmp	r3, #47	; 0x2f
 80041e2:	d912      	bls.n	800420a <_VPrintTarget+0x13a>
 80041e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041e8:	2b39      	cmp	r3, #57	; 0x39
 80041ea:	d80e      	bhi.n	800420a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80041f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	461a      	mov	r2, r3
 80041fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004202:	4413      	add	r3, r2
 8004204:	3b30      	subs	r3, #48	; 0x30
 8004206:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004208:	e7e4      	b.n	80041d4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800420a:	2300      	movs	r3, #0
 800420c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800421a:	2b2e      	cmp	r3, #46	; 0x2e
 800421c:	d11d      	bne.n	800425a <_VPrintTarget+0x18a>
        sFormat++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800422c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004230:	2b2f      	cmp	r3, #47	; 0x2f
 8004232:	d912      	bls.n	800425a <_VPrintTarget+0x18a>
 8004234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004238:	2b39      	cmp	r3, #57	; 0x39
 800423a:	d80e      	bhi.n	800425a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	461a      	mov	r2, r3
 800424e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004252:	4413      	add	r3, r2
 8004254:	3b30      	subs	r3, #48	; 0x30
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004258:	e7e4      	b.n	8004224 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004266:	2b6c      	cmp	r3, #108	; 0x6c
 8004268:	d003      	beq.n	8004272 <_VPrintTarget+0x1a2>
 800426a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800426e:	2b68      	cmp	r3, #104	; 0x68
 8004270:	d107      	bne.n	8004282 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3301      	adds	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004280:	e7ef      	b.n	8004262 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004286:	2b25      	cmp	r3, #37	; 0x25
 8004288:	f000 80b3 	beq.w	80043f2 <_VPrintTarget+0x322>
 800428c:	2b25      	cmp	r3, #37	; 0x25
 800428e:	f2c0 80b7 	blt.w	8004400 <_VPrintTarget+0x330>
 8004292:	2b78      	cmp	r3, #120	; 0x78
 8004294:	f300 80b4 	bgt.w	8004400 <_VPrintTarget+0x330>
 8004298:	2b58      	cmp	r3, #88	; 0x58
 800429a:	f2c0 80b1 	blt.w	8004400 <_VPrintTarget+0x330>
 800429e:	3b58      	subs	r3, #88	; 0x58
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	f200 80ad 	bhi.w	8004400 <_VPrintTarget+0x330>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <_VPrintTarget+0x1dc>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080043a3 	.word	0x080043a3
 80042b0:	08004401 	.word	0x08004401
 80042b4:	08004401 	.word	0x08004401
 80042b8:	08004401 	.word	0x08004401
 80042bc:	08004401 	.word	0x08004401
 80042c0:	08004401 	.word	0x08004401
 80042c4:	08004401 	.word	0x08004401
 80042c8:	08004401 	.word	0x08004401
 80042cc:	08004401 	.word	0x08004401
 80042d0:	08004401 	.word	0x08004401
 80042d4:	08004401 	.word	0x08004401
 80042d8:	08004331 	.word	0x08004331
 80042dc:	08004357 	.word	0x08004357
 80042e0:	08004401 	.word	0x08004401
 80042e4:	08004401 	.word	0x08004401
 80042e8:	08004401 	.word	0x08004401
 80042ec:	08004401 	.word	0x08004401
 80042f0:	08004401 	.word	0x08004401
 80042f4:	08004401 	.word	0x08004401
 80042f8:	08004401 	.word	0x08004401
 80042fc:	08004401 	.word	0x08004401
 8004300:	08004401 	.word	0x08004401
 8004304:	08004401 	.word	0x08004401
 8004308:	08004401 	.word	0x08004401
 800430c:	080043cd 	.word	0x080043cd
 8004310:	08004401 	.word	0x08004401
 8004314:	08004401 	.word	0x08004401
 8004318:	08004401 	.word	0x08004401
 800431c:	08004401 	.word	0x08004401
 8004320:	0800437d 	.word	0x0800437d
 8004324:	08004401 	.word	0x08004401
 8004328:	08004401 	.word	0x08004401
 800432c:	080043a3 	.word	0x080043a3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6011      	str	r1, [r2, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004344:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4611      	mov	r1, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff fd1c 	bl	8003d8c <_StoreChar>
        break;
 8004354:	e055      	b.n	8004402 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1d19      	adds	r1, r3, #4
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6011      	str	r1, [r2, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004364:	f107 0014 	add.w	r0, r7, #20
 8004368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004372:	220a      	movs	r2, #10
 8004374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004376:	f7ff fe1b 	bl	8003fb0 <_PrintInt>
        break;
 800437a:	e042      	b.n	8004402 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1d19      	adds	r1, r3, #4
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800438a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800438c:	f107 0014 	add.w	r0, r7, #20
 8004390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439a:	220a      	movs	r2, #10
 800439c:	f7ff fd72 	bl	8003e84 <_PrintUnsigned>
        break;
 80043a0:	e02f      	b.n	8004402 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1d19      	adds	r1, r3, #4
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6011      	str	r1, [r2, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80043b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043b2:	f107 0014 	add.w	r0, r7, #20
 80043b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c0:	2210      	movs	r2, #16
 80043c2:	f7ff fd5f 	bl	8003e84 <_PrintUnsigned>
        break;
 80043c6:	e01c      	b.n	8004402 <_VPrintTarget+0x332>
 80043c8:	2001432c 	.word	0x2001432c
      case 'p':
        v = va_arg(*pParamList, int);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1d19      	adds	r1, r3, #4
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80043da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043dc:	f107 0014 	add.w	r0, r7, #20
 80043e0:	2300      	movs	r3, #0
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2308      	movs	r3, #8
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2308      	movs	r3, #8
 80043ea:	2210      	movs	r2, #16
 80043ec:	f7ff fd4a 	bl	8003e84 <_PrintUnsigned>
        break;
 80043f0:	e007      	b.n	8004402 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80043f2:	f107 0314 	add.w	r3, r7, #20
 80043f6:	2125      	movs	r1, #37	; 0x25
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fcc7 	bl	8003d8c <_StoreChar>
        break;
 80043fe:	e000      	b.n	8004402 <_VPrintTarget+0x332>
      default:
        break;
 8004400:	bf00      	nop
      }
      sFormat++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e007      	b.n	800441a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800440a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fcb9 	bl	8003d8c <_StoreChar>
    }
  } while (*sFormat);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f47f ae72 	bne.w	8004108 <_VPrintTarget+0x38>
 8004424:	e000      	b.n	8004428 <_VPrintTarget+0x358>
      break;
 8004426:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d041      	beq.n	80044b2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443e:	e00b      	b.n	8004458 <_VPrintTarget+0x388>
 8004440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004442:	b2da      	uxtb	r2, r3
 8004444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004446:	1c59      	adds	r1, r3, #1
 8004448:	6439      	str	r1, [r7, #64]	; 0x40
 800444a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	09db      	lsrs	r3, r3, #7
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445a:	2b7f      	cmp	r3, #127	; 0x7f
 800445c:	d8f0      	bhi.n	8004440 <_VPrintTarget+0x370>
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	643a      	str	r2, [r7, #64]	; 0x40
 8004464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
 8004472:	2300      	movs	r3, #0
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	e00b      	b.n	8004490 <_VPrintTarget+0x3c0>
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	63b9      	str	r1, [r7, #56]	; 0x38
 8004482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	09db      	lsrs	r3, r3, #7
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d8f0      	bhi.n	8004478 <_VPrintTarget+0x3a8>
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	63ba      	str	r2, [r7, #56]	; 0x38
 800449c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	69b9      	ldr	r1, [r7, #24]
 80044aa:	221a      	movs	r2, #26
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fb87 	bl	8003bc0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80044b8:	bf00      	nop
 80044ba:	3758      	adds	r7, #88	; 0x58
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044ce:	2300      	movs	r3, #0
 80044d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044d4:	4917      	ldr	r1, [pc, #92]	; (8004534 <SEGGER_SYSVIEW_Init+0x74>)
 80044d6:	4818      	ldr	r0, [pc, #96]	; (8004538 <SEGGER_SYSVIEW_Init+0x78>)
 80044d8:	f7ff f940 	bl	800375c <SEGGER_RTT_AllocUpBuffer>
 80044dc:	4603      	mov	r3, r0
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 80044e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 80044e6:	785a      	ldrb	r2, [r3, #1]
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 80044ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 80044ee:	7e1b      	ldrb	r3, [r3, #24]
 80044f0:	4618      	mov	r0, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2308      	movs	r3, #8
 80044f8:	4a11      	ldr	r2, [pc, #68]	; (8004540 <SEGGER_SYSVIEW_Init+0x80>)
 80044fa:	490f      	ldr	r1, [pc, #60]	; (8004538 <SEGGER_SYSVIEW_Init+0x78>)
 80044fc:	f7ff f9b2 	bl	8003864 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <SEGGER_SYSVIEW_Init+0x84>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 800450c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800450e:	4a0b      	ldr	r2, [pc, #44]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004514:	4a09      	ldr	r2, [pc, #36]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004520:	4a06      	ldr	r2, [pc, #24]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <SEGGER_SYSVIEW_Init+0x7c>)
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	200132f4 	.word	0x200132f4
 8004538:	080054d4 	.word	0x080054d4
 800453c:	200142fc 	.word	0x200142fc
 8004540:	200142f4 	.word	0x200142f4
 8004544:	e0001004 	.word	0xe0001004

08004548 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004550:	4a04      	ldr	r2, [pc, #16]	; (8004564 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6113      	str	r3, [r2, #16]
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200142fc 	.word	0x200142fc

08004568 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004570:	f3ef 8311 	mrs	r3, BASEPRI
 8004574:	f04f 0120 	mov.w	r1, #32
 8004578:	f381 8811 	msr	BASEPRI, r1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4808      	ldr	r0, [pc, #32]	; (80045a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004580:	f7ff fa2d 	bl	80039de <_PreparePacket>
 8004584:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f7ff fb18 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f383 8811 	msr	BASEPRI, r3
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2001432c 	.word	0x2001432c

080045a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045ae:	f3ef 8311 	mrs	r3, BASEPRI
 80045b2:	f04f 0120 	mov.w	r1, #32
 80045b6:	f381 8811 	msr	BASEPRI, r1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	4816      	ldr	r0, [pc, #88]	; (8004618 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80045be:	f7ff fa0e 	bl	80039de <_PreparePacket>
 80045c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e00b      	b.n	80045ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	61f9      	str	r1, [r7, #28]
 80045dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	09db      	lsrs	r3, r3, #7
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b7f      	cmp	r3, #127	; 0x7f
 80045ee:	d8f0      	bhi.n	80045d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	61fa      	str	r2, [r7, #28]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	701a      	strb	r2, [r3, #0]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	6938      	ldr	r0, [r7, #16]
 8004606:	f7ff fadb 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f383 8811 	msr	BASEPRI, r3
}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	2001432c 	.word	0x2001432c

0800461c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004628:	f3ef 8311 	mrs	r3, BASEPRI
 800462c:	f04f 0120 	mov.w	r1, #32
 8004630:	f381 8811 	msr	BASEPRI, r1
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	4825      	ldr	r0, [pc, #148]	; (80046cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004638:	f7ff f9d1 	bl	80039de <_PreparePacket>
 800463c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
 800464a:	e00b      	b.n	8004664 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	1c59      	adds	r1, r3, #1
 8004654:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	09db      	lsrs	r3, r3, #7
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	2b7f      	cmp	r3, #127	; 0x7f
 8004668:	d8f0      	bhi.n	800464c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	e00b      	b.n	800469c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1c59      	adds	r1, r3, #1
 800468c:	6279      	str	r1, [r7, #36]	; 0x24
 800468e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	09db      	lsrs	r3, r3, #7
 800469a:	623b      	str	r3, [r7, #32]
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b7f      	cmp	r3, #127	; 0x7f
 80046a0:	d8f0      	bhi.n	8004684 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	627a      	str	r2, [r7, #36]	; 0x24
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	6979      	ldr	r1, [r7, #20]
 80046b6:	69b8      	ldr	r0, [r7, #24]
 80046b8:	f7ff fa82 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f383 8811 	msr	BASEPRI, r3
}
 80046c2:	bf00      	nop
 80046c4:	3730      	adds	r7, #48	; 0x30
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	2001432c 	.word	0x2001432c

080046d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046dc:	f3ef 8311 	mrs	r3, BASEPRI
 80046e0:	f04f 0120 	mov.w	r1, #32
 80046e4:	f381 8811 	msr	BASEPRI, r1
 80046e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046ea:	4b53      	ldr	r3, [pc, #332]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 80046ec:	785b      	ldrb	r3, [r3, #1]
 80046ee:	220a      	movs	r2, #10
 80046f0:	4952      	ldr	r1, [pc, #328]	; (800483c <SEGGER_SYSVIEW_Start+0x16c>)
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fb fd6c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046fe:	200a      	movs	r0, #10
 8004700:	f7ff ff32 	bl	8004568 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004704:	f3ef 8311 	mrs	r3, BASEPRI
 8004708:	f04f 0120 	mov.w	r1, #32
 800470c:	f381 8811 	msr	BASEPRI, r1
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	484b      	ldr	r0, [pc, #300]	; (8004840 <SEGGER_SYSVIEW_Start+0x170>)
 8004714:	f7ff f963 	bl	80039de <_PreparePacket>
 8004718:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004722:	4b45      	ldr	r3, [pc, #276]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
 8004728:	e00b      	b.n	8004742 <SEGGER_SYSVIEW_Start+0x72>
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	b2da      	uxtb	r2, r3
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	09db      	lsrs	r3, r3, #7
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	2b7f      	cmp	r3, #127	; 0x7f
 8004746:	d8f0      	bhi.n	800472a <SEGGER_SYSVIEW_Start+0x5a>
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800474e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	4b36      	ldr	r3, [pc, #216]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	e00b      	b.n	800477c <SEGGER_SYSVIEW_Start+0xac>
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	1c59      	adds	r1, r3, #1
 800476c:	6279      	str	r1, [r7, #36]	; 0x24
 800476e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	09db      	lsrs	r3, r3, #7
 800477a:	623b      	str	r3, [r7, #32]
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b7f      	cmp	r3, #127	; 0x7f
 8004780:	d8f0      	bhi.n	8004764 <SEGGER_SYSVIEW_Start+0x94>
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	627a      	str	r2, [r7, #36]	; 0x24
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	4b28      	ldr	r3, [pc, #160]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	e00b      	b.n	80047b6 <SEGGER_SYSVIEW_Start+0xe6>
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	1c59      	adds	r1, r3, #1
 80047a6:	61f9      	str	r1, [r7, #28]
 80047a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	09db      	lsrs	r3, r3, #7
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b7f      	cmp	r3, #127	; 0x7f
 80047ba:	d8f0      	bhi.n	800479e <SEGGER_SYSVIEW_Start+0xce>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	61fa      	str	r2, [r7, #28]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	e00b      	b.n	80047ee <SEGGER_SYSVIEW_Start+0x11e>
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	1c59      	adds	r1, r3, #1
 80047de:	6179      	str	r1, [r7, #20]
 80047e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	09db      	lsrs	r3, r3, #7
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b7f      	cmp	r3, #127	; 0x7f
 80047f2:	d8f0      	bhi.n	80047d6 <SEGGER_SYSVIEW_Start+0x106>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	617a      	str	r2, [r7, #20]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004804:	2218      	movs	r2, #24
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff f9d9 	bl	8003bc0 <_SendPacket>
      RECORD_END();
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <SEGGER_SYSVIEW_Start+0x168>)
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004822:	f000 f9eb 	bl	8004bfc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004826:	f000 f9b1 	bl	8004b8c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800482a:	f000 fc83 	bl	8005134 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800482e:	bf00      	nop
 8004830:	3730      	adds	r7, #48	; 0x30
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200142fc 	.word	0x200142fc
 800483c:	0800552c 	.word	0x0800552c
 8004840:	2001432c 	.word	0x2001432c

08004844 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800484a:	f3ef 8311 	mrs	r3, BASEPRI
 800484e:	f04f 0120 	mov.w	r1, #32
 8004852:	f381 8811 	msr	BASEPRI, r1
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	480b      	ldr	r0, [pc, #44]	; (8004888 <SEGGER_SYSVIEW_Stop+0x44>)
 800485a:	f7ff f8c0 	bl	80039de <_PreparePacket>
 800485e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <SEGGER_SYSVIEW_Stop+0x48>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004868:	220b      	movs	r2, #11
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6838      	ldr	r0, [r7, #0]
 800486e:	f7ff f9a7 	bl	8003bc0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <SEGGER_SYSVIEW_Stop+0x48>)
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f383 8811 	msr	BASEPRI, r3
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2001432c 	.word	0x2001432c
 800488c:	200142fc 	.word	0x200142fc

08004890 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	; 0x30
 8004894:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004896:	f3ef 8311 	mrs	r3, BASEPRI
 800489a:	f04f 0120 	mov.w	r1, #32
 800489e:	f381 8811 	msr	BASEPRI, r1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	4845      	ldr	r0, [pc, #276]	; (80049bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048a6:	f7ff f89a 	bl	80039de <_PreparePacket>
 80048aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b4:	4b42      	ldr	r3, [pc, #264]	; (80049c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ba:	e00b      	b.n	80048d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	1c59      	adds	r1, r3, #1
 80048c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	09db      	lsrs	r3, r3, #7
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b7f      	cmp	r3, #127	; 0x7f
 80048d8:	d8f0      	bhi.n	80048bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	e00b      	b.n	800490e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1c59      	adds	r1, r3, #1
 80048fe:	6279      	str	r1, [r7, #36]	; 0x24
 8004900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	09db      	lsrs	r3, r3, #7
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2b7f      	cmp	r3, #127	; 0x7f
 8004912:	d8f0      	bhi.n	80048f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	627a      	str	r2, [r7, #36]	; 0x24
 800491a:	6a3a      	ldr	r2, [r7, #32]
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e00b      	b.n	8004948 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1c59      	adds	r1, r3, #1
 8004938:	61f9      	str	r1, [r7, #28]
 800493a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	09db      	lsrs	r3, r3, #7
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b7f      	cmp	r3, #127	; 0x7f
 800494c:	d8f0      	bhi.n	8004930 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	61fa      	str	r2, [r7, #28]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	e00b      	b.n	8004980 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1c59      	adds	r1, r3, #1
 8004970:	6179      	str	r1, [r7, #20]
 8004972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	09db      	lsrs	r3, r3, #7
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b7f      	cmp	r3, #127	; 0x7f
 8004984:	d8f0      	bhi.n	8004968 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	617a      	str	r2, [r7, #20]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004996:	2218      	movs	r2, #24
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	68b8      	ldr	r0, [r7, #8]
 800499c:	f7ff f910 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049ae:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	4798      	blx	r3
  }
}
 80049b4:	bf00      	nop
 80049b6:	3730      	adds	r7, #48	; 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	2001432c 	.word	0x2001432c
 80049c0:	200142fc 	.word	0x200142fc

080049c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b092      	sub	sp, #72	; 0x48
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049cc:	f3ef 8311 	mrs	r3, BASEPRI
 80049d0:	f04f 0120 	mov.w	r1, #32
 80049d4:	f381 8811 	msr	BASEPRI, r1
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	486a      	ldr	r0, [pc, #424]	; (8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049dc:	f7fe ffff 	bl	80039de <_PreparePacket>
 80049e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b66      	ldr	r3, [pc, #408]	; (8004b88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
 80049f6:	e00b      	b.n	8004a10 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80049f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	6479      	str	r1, [r7, #68]	; 0x44
 8004a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0c:	09db      	lsrs	r3, r3, #7
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a12:	2b7f      	cmp	r3, #127	; 0x7f
 8004a14:	d8f0      	bhi.n	80049f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a30:	e00b      	b.n	8004a4a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	1c59      	adds	r1, r3, #1
 8004a3a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	09db      	lsrs	r3, r3, #7
 8004a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a4e:	d8f0      	bhi.n	8004a32 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	4619      	mov	r1, r3
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7fe ff6b 	bl	8003944 <_EncodeStr>
 8004a6e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a70:	2209      	movs	r2, #9
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	6938      	ldr	r0, [r7, #16]
 8004a76:	f7ff f8a3 	bl	8003bc0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8e:	e00b      	b.n	8004aa8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	1c59      	adds	r1, r3, #1
 8004a98:	6379      	str	r1, [r7, #52]	; 0x34
 8004a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	09db      	lsrs	r3, r3, #7
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8004aac:	d8f0      	bhi.n	8004a90 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac8:	e00b      	b.n	8004ae2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	1c59      	adds	r1, r3, #1
 8004ad2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ad4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	09db      	lsrs	r3, r3, #7
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae6:	d8f0      	bhi.n	8004aca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e00b      	b.n	8004b1c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b20:	d8f0      	bhi.n	8004b04 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	627a      	str	r2, [r7, #36]	; 0x24
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e00b      	b.n	8004b54 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	1c59      	adds	r1, r3, #1
 8004b44:	61f9      	str	r1, [r7, #28]
 8004b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	09db      	lsrs	r3, r3, #7
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b7f      	cmp	r3, #127	; 0x7f
 8004b58:	d8f0      	bhi.n	8004b3c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	61fa      	str	r2, [r7, #28]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b6a:	2215      	movs	r2, #21
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	6938      	ldr	r0, [r7, #16]
 8004b70:	f7ff f826 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f383 8811 	msr	BASEPRI, r3
}
 8004b7a:	bf00      	nop
 8004b7c:	3748      	adds	r7, #72	; 0x48
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2001432c 	.word	0x2001432c
 8004b88:	200142fc 	.word	0x200142fc

08004b8c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004ba2:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4798      	blx	r3
  }
}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200142fc 	.word	0x200142fc

08004bb4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc0:	f04f 0120 	mov.w	r1, #32
 8004bc4:	f381 8811 	msr	BASEPRI, r1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	480b      	ldr	r0, [pc, #44]	; (8004bf8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bcc:	f7fe ff07 	bl	80039de <_PreparePacket>
 8004bd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	6938      	ldr	r0, [r7, #16]
 8004bd8:	f7fe feb4 	bl	8003944 <_EncodeStr>
 8004bdc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bde:	220e      	movs	r2, #14
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f7fe ffec 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	2001432c 	.word	0x2001432c

08004bfc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01a      	beq.n	8004c40 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c14:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4798      	blx	r3
 8004c1c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c20:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	000a      	movs	r2, r1
 8004c30:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c32:	4613      	mov	r3, r2
 8004c34:	461a      	mov	r2, r3
 8004c36:	4621      	mov	r1, r4
 8004c38:	200d      	movs	r0, #13
 8004c3a:	f7ff fcef 	bl	800461c <SEGGER_SYSVIEW_RecordU32x2>
 8004c3e:	e006      	b.n	8004c4e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4619      	mov	r1, r3
 8004c46:	200c      	movs	r0, #12
 8004c48:	f7ff fcac 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200142fc 	.word	0x200142fc
 8004c5c:	e0001004 	.word	0xe0001004

08004c60 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c66:	f3ef 8311 	mrs	r3, BASEPRI
 8004c6a:	f04f 0120 	mov.w	r1, #32
 8004c6e:	f381 8811 	msr	BASEPRI, r1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	4819      	ldr	r0, [pc, #100]	; (8004cdc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c76:	f7fe feb2 	bl	80039de <_PreparePacket>
 8004c7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c88:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e00b      	b.n	8004cac <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1c59      	adds	r1, r3, #1
 8004c9c:	6179      	str	r1, [r7, #20]
 8004c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	09db      	lsrs	r3, r3, #7
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb0:	d8f0      	bhi.n	8004c94 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	617a      	str	r2, [r7, #20]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f7fe ff7a 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f383 8811 	msr	BASEPRI, r3
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	2001432c 	.word	0x2001432c
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cea:	f3ef 8311 	mrs	r3, BASEPRI
 8004cee:	f04f 0120 	mov.w	r1, #32
 8004cf2:	f381 8811 	msr	BASEPRI, r1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	4807      	ldr	r0, [pc, #28]	; (8004d18 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cfa:	f7fe fe70 	bl	80039de <_PreparePacket>
 8004cfe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d00:	2203      	movs	r2, #3
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f7fe ff5b 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f383 8811 	msr	BASEPRI, r3
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	2001432c 	.word	0x2001432c

08004d1c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d22:	f3ef 8311 	mrs	r3, BASEPRI
 8004d26:	f04f 0120 	mov.w	r1, #32
 8004d2a:	f381 8811 	msr	BASEPRI, r1
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	4807      	ldr	r0, [pc, #28]	; (8004d50 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d32:	f7fe fe54 	bl	80039de <_PreparePacket>
 8004d36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d38:	2212      	movs	r2, #18
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6838      	ldr	r0, [r7, #0]
 8004d3e:	f7fe ff3f 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f383 8811 	msr	BASEPRI, r3
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	2001432c 	.word	0x2001432c

08004d54 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5e:	f04f 0120 	mov.w	r1, #32
 8004d62:	f381 8811 	msr	BASEPRI, r1
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	4807      	ldr	r0, [pc, #28]	; (8004d88 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d6a:	f7fe fe38 	bl	80039de <_PreparePacket>
 8004d6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d70:	2211      	movs	r2, #17
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	6838      	ldr	r0, [r7, #0]
 8004d76:	f7fe ff23 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f383 8811 	msr	BASEPRI, r3
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	2001432c 	.word	0x2001432c

08004d8c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d94:	f3ef 8311 	mrs	r3, BASEPRI
 8004d98:	f04f 0120 	mov.w	r1, #32
 8004d9c:	f381 8811 	msr	BASEPRI, r1
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	4819      	ldr	r0, [pc, #100]	; (8004e08 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004da4:	f7fe fe1b 	bl	80039de <_PreparePacket>
 8004da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e00b      	b.n	8004dda <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	61f9      	str	r1, [r7, #28]
 8004dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	09db      	lsrs	r3, r3, #7
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dde:	d8f0      	bhi.n	8004dc2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004df0:	2208      	movs	r2, #8
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	6938      	ldr	r0, [r7, #16]
 8004df6:	f7fe fee3 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f383 8811 	msr	BASEPRI, r3
}
 8004e00:	bf00      	nop
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	2001432c 	.word	0x2001432c
 8004e0c:	200142fc 	.word	0x200142fc

08004e10 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e18:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1c:	f04f 0120 	mov.w	r1, #32
 8004e20:	f381 8811 	msr	BASEPRI, r1
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	4819      	ldr	r0, [pc, #100]	; (8004e8c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e28:	f7fe fdd9 	bl	80039de <_PreparePacket>
 8004e2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e32:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e00b      	b.n	8004e5e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	61f9      	str	r1, [r7, #28]
 8004e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	09db      	lsrs	r3, r3, #7
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b7f      	cmp	r3, #127	; 0x7f
 8004e62:	d8f0      	bhi.n	8004e46 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	61fa      	str	r2, [r7, #28]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e74:	2204      	movs	r2, #4
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	6938      	ldr	r0, [r7, #16]
 8004e7a:	f7fe fea1 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f383 8811 	msr	BASEPRI, r3
}
 8004e84:	bf00      	nop
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	2001432c 	.word	0x2001432c
 8004e90:	200142fc 	.word	0x200142fc

08004e94 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea0:	f04f 0120 	mov.w	r1, #32
 8004ea4:	f381 8811 	msr	BASEPRI, r1
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	4819      	ldr	r0, [pc, #100]	; (8004f10 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004eac:	f7fe fd97 	bl	80039de <_PreparePacket>
 8004eb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eb6:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e00b      	b.n	8004ee2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	1c59      	adds	r1, r3, #1
 8004ed2:	61f9      	str	r1, [r7, #28]
 8004ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	09db      	lsrs	r3, r3, #7
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee6:	d8f0      	bhi.n	8004eca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	61fa      	str	r2, [r7, #28]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ef8:	2206      	movs	r2, #6
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f7fe fe5f 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f383 8811 	msr	BASEPRI, r3
}
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	2001432c 	.word	0x2001432c
 8004f14:	200142fc 	.word	0x200142fc

08004f18 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f22:	f3ef 8311 	mrs	r3, BASEPRI
 8004f26:	f04f 0120 	mov.w	r1, #32
 8004f2a:	f381 8811 	msr	BASEPRI, r1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	4827      	ldr	r0, [pc, #156]	; (8004fd0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004f32:	f7fe fd54 	bl	80039de <_PreparePacket>
 8004f36:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	e00b      	b.n	8004f68 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	1c59      	adds	r1, r3, #1
 8004f58:	6279      	str	r1, [r7, #36]	; 0x24
 8004f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	09db      	lsrs	r3, r3, #7
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6c:	d8f0      	bhi.n	8004f50 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	627a      	str	r2, [r7, #36]	; 0x24
 8004f74:	6a3a      	ldr	r2, [r7, #32]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	e00b      	b.n	8004fa0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	61f9      	str	r1, [r7, #28]
 8004f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	09db      	lsrs	r3, r3, #7
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa4:	d8f0      	bhi.n	8004f88 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	61fa      	str	r2, [r7, #28]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004fb6:	2207      	movs	r2, #7
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	6938      	ldr	r0, [r7, #16]
 8004fbc:	f7fe fe00 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f383 8811 	msr	BASEPRI, r3
}
 8004fc6:	bf00      	nop
 8004fc8:	3728      	adds	r7, #40	; 0x28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	2001432c 	.word	0x2001432c
 8004fd4:	200142fc 	.word	0x200142fc

08004fd8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	1ad3      	subs	r3, r2, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	200142fc 	.word	0x200142fc

08004ff8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08c      	sub	sp, #48	; 0x30
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005002:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d06d      	beq.n	80050e6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800500a:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005010:	2300      	movs	r3, #0
 8005012:	62bb      	str	r3, [r7, #40]	; 0x28
 8005014:	e008      	b.n	8005028 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	3301      	adds	r3, #1
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502c:	429a      	cmp	r2, r3
 800502e:	d3f2      	bcc.n	8005016 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005030:	e000      	b.n	8005034 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005032:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d055      	beq.n	80050e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800503a:	f3ef 8311 	mrs	r3, BASEPRI
 800503e:	f04f 0120 	mov.w	r1, #32
 8005042:	f381 8811 	msr	BASEPRI, r1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	482a      	ldr	r0, [pc, #168]	; (80050f4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800504a:	f7fe fcc8 	bl	80039de <_PreparePacket>
 800504e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	e00b      	b.n	8005076 <SEGGER_SYSVIEW_SendModule+0x7e>
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	6279      	str	r1, [r7, #36]	; 0x24
 8005068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	09db      	lsrs	r3, r3, #7
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	2b7f      	cmp	r3, #127	; 0x7f
 800507a:	d8f0      	bhi.n	800505e <SEGGER_SYSVIEW_SendModule+0x66>
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	627a      	str	r2, [r7, #36]	; 0x24
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	e00b      	b.n	80050b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	61f9      	str	r1, [r7, #28]
 80050a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	09db      	lsrs	r3, r3, #7
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b7f      	cmp	r3, #127	; 0x7f
 80050b4:	d8f0      	bhi.n	8005098 <SEGGER_SYSVIEW_SendModule+0xa0>
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	61fa      	str	r2, [r7, #28]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	4619      	mov	r1, r3
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7fe fc38 	bl	8003944 <_EncodeStr>
 80050d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80050d6:	2216      	movs	r2, #22
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	6938      	ldr	r0, [r7, #16]
 80050dc:	f7fe fd70 	bl	8003bc0 <_SendPacket>
      RECORD_END();
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80050e6:	bf00      	nop
 80050e8:	3730      	adds	r7, #48	; 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20014324 	.word	0x20014324
 80050f4:	2001432c 	.word	0x2001432c

080050f8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00f      	beq.n	8005126 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f2      	bne.n	800510c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20014324 	.word	0x20014324

08005134 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800513a:	f3ef 8311 	mrs	r3, BASEPRI
 800513e:	f04f 0120 	mov.w	r1, #32
 8005142:	f381 8811 	msr	BASEPRI, r1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	4817      	ldr	r0, [pc, #92]	; (80051a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800514a:	f7fe fc48 	bl	80039de <_PreparePacket>
 800514e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	4b14      	ldr	r3, [pc, #80]	; (80051ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	e00b      	b.n	8005178 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	6179      	str	r1, [r7, #20]
 800516a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	09db      	lsrs	r3, r3, #7
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b7f      	cmp	r3, #127	; 0x7f
 800517c:	d8f0      	bhi.n	8005160 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	617a      	str	r2, [r7, #20]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800518e:	221b      	movs	r2, #27
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	68b8      	ldr	r0, [r7, #8]
 8005194:	f7fe fd14 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	2001432c 	.word	0x2001432c
 80051ac:	20014328 	.word	0x20014328

080051b0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80051b0:	b40f      	push	{r0, r1, r2, r3}
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	461a      	mov	r2, r3
 80051c2:	2100      	movs	r1, #0
 80051c4:	6938      	ldr	r0, [r7, #16]
 80051c6:	f7fe ff83 	bl	80040d0 <_VPrintTarget>
  va_end(ParamList);
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d4:	b004      	add	sp, #16
 80051d6:	4770      	bx	lr

080051d8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051e0:	f3ef 8311 	mrs	r3, BASEPRI
 80051e4:	f04f 0120 	mov.w	r1, #32
 80051e8:	f381 8811 	msr	BASEPRI, r1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	4827      	ldr	r0, [pc, #156]	; (800528c <SEGGER_SYSVIEW_Warn+0xb4>)
 80051f0:	f7fe fbf5 	bl	80039de <_PreparePacket>
 80051f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7fe fba2 	bl	8003944 <_EncodeStr>
 8005200:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	2301      	movs	r3, #1
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	e00b      	b.n	8005224 <SEGGER_SYSVIEW_Warn+0x4c>
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	6279      	str	r1, [r7, #36]	; 0x24
 8005216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	09db      	lsrs	r3, r3, #7
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	2b7f      	cmp	r3, #127	; 0x7f
 8005228:	d8f0      	bhi.n	800520c <SEGGER_SYSVIEW_Warn+0x34>
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	627a      	str	r2, [r7, #36]	; 0x24
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e00b      	b.n	800525c <SEGGER_SYSVIEW_Warn+0x84>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	61f9      	str	r1, [r7, #28]
 800524e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	09db      	lsrs	r3, r3, #7
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b7f      	cmp	r3, #127	; 0x7f
 8005260:	d8f0      	bhi.n	8005244 <SEGGER_SYSVIEW_Warn+0x6c>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	61fa      	str	r2, [r7, #28]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005272:	221a      	movs	r2, #26
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f7fe fca2 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f383 8811 	msr	BASEPRI, r3
}
 8005282:	bf00      	nop
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2001432c 	.word	0x2001432c

08005290 <__libc_init_array>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4d0d      	ldr	r5, [pc, #52]	; (80052c8 <__libc_init_array+0x38>)
 8005294:	4c0d      	ldr	r4, [pc, #52]	; (80052cc <__libc_init_array+0x3c>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	2600      	movs	r6, #0
 800529c:	42a6      	cmp	r6, r4
 800529e:	d109      	bne.n	80052b4 <__libc_init_array+0x24>
 80052a0:	4d0b      	ldr	r5, [pc, #44]	; (80052d0 <__libc_init_array+0x40>)
 80052a2:	4c0c      	ldr	r4, [pc, #48]	; (80052d4 <__libc_init_array+0x44>)
 80052a4:	f000 f83e 	bl	8005324 <_init>
 80052a8:	1b64      	subs	r4, r4, r5
 80052aa:	10a4      	asrs	r4, r4, #2
 80052ac:	2600      	movs	r6, #0
 80052ae:	42a6      	cmp	r6, r4
 80052b0:	d105      	bne.n	80052be <__libc_init_array+0x2e>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b8:	4798      	blx	r3
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7ee      	b.n	800529c <__libc_init_array+0xc>
 80052be:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c2:	4798      	blx	r3
 80052c4:	3601      	adds	r6, #1
 80052c6:	e7f2      	b.n	80052ae <__libc_init_array+0x1e>
 80052c8:	08005548 	.word	0x08005548
 80052cc:	08005548 	.word	0x08005548
 80052d0:	08005548 	.word	0x08005548
 80052d4:	0800554c 	.word	0x0800554c

080052d8 <memcmp>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	3901      	subs	r1, #1
 80052dc:	4402      	add	r2, r0
 80052de:	4290      	cmp	r0, r2
 80052e0:	d101      	bne.n	80052e6 <memcmp+0xe>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e005      	b.n	80052f2 <memcmp+0x1a>
 80052e6:	7803      	ldrb	r3, [r0, #0]
 80052e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d001      	beq.n	80052f4 <memcmp+0x1c>
 80052f0:	1b18      	subs	r0, r3, r4
 80052f2:	bd10      	pop	{r4, pc}
 80052f4:	3001      	adds	r0, #1
 80052f6:	e7f2      	b.n	80052de <memcmp+0x6>

080052f8 <memcpy>:
 80052f8:	440a      	add	r2, r1
 80052fa:	4291      	cmp	r1, r2
 80052fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005300:	d100      	bne.n	8005304 <memcpy+0xc>
 8005302:	4770      	bx	lr
 8005304:	b510      	push	{r4, lr}
 8005306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800530e:	4291      	cmp	r1, r2
 8005310:	d1f9      	bne.n	8005306 <memcpy+0xe>
 8005312:	bd10      	pop	{r4, pc}

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
