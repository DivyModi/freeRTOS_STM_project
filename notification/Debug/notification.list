
notification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006498  08006498  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006498  08006498  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080064a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001441c  20000078  08006518  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014494  08006518  00024494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013351  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7a  00000000  00000000  000333f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291f8  00000000  00000000  00038430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001439e  00000000  00000000  00061628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fba89  00000000  00000000  000759c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017144f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  001714a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800625c 	.word	0x0800625c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800625c 	.word	0x0800625c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eac 	.word	0x20012eac
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb3f 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f879 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8c9 	bl	80004b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <main+0xd4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a2f      	ldr	r2, [pc, #188]	; (80003e4 <main+0xd4>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800032e:	f003 fb29 	bl	8003984 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000332:	f004 f9e1 	bl	80046f8 <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, NULL, 2, &task1_handle);
 8000336:	4b2c      	ldr	r3, [pc, #176]	; (80003e8 <main+0xd8>)
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22c8      	movs	r2, #200	; 0xc8
 8000342:	492a      	ldr	r1, [pc, #168]	; (80003ec <main+0xdc>)
 8000344:	482a      	ldr	r0, [pc, #168]	; (80003f0 <main+0xe0>)
 8000346:	f002 f811 	bl	800236c <xTaskCreate>
 800034a:	4603      	mov	r3, r0
 800034c:	4a29      	ldr	r2, [pc, #164]	; (80003f4 <main+0xe4>)
 800034e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000350:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <main+0xe4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d00a      	beq.n	800036e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035c:	f383 8811 	msr	BASEPRI, r3
 8000360:	f3bf 8f6f 	isb	sy
 8000364:	f3bf 8f4f 	dsb	sy
 8000368:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800036a:	bf00      	nop
 800036c:	e7fe      	b.n	800036c <main+0x5c>
  status = xTaskCreate(task2_handler, "Task2", 200, NULL, 2, &task2_handle);
 800036e:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <main+0xe8>)
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2302      	movs	r3, #2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	22c8      	movs	r2, #200	; 0xc8
 800037a:	4920      	ldr	r1, [pc, #128]	; (80003fc <main+0xec>)
 800037c:	4820      	ldr	r0, [pc, #128]	; (8000400 <main+0xf0>)
 800037e:	f001 fff5 	bl	800236c <xTaskCreate>
 8000382:	4603      	mov	r3, r0
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <main+0xe4>)
 8000386:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <main+0xe4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d00a      	beq.n	80003a6 <main+0x96>
        __asm volatile
 8000390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000394:	f383 8811 	msr	BASEPRI, r3
 8000398:	f3bf 8f6f 	isb	sy
 800039c:	f3bf 8f4f 	dsb	sy
 80003a0:	60bb      	str	r3, [r7, #8]
    }
 80003a2:	bf00      	nop
 80003a4:	e7fe      	b.n	80003a4 <main+0x94>
  status = xTaskCreate(task3_handler, "Task3", 200, NULL, 2, &task3_handle);
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0xf4>)
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2302      	movs	r3, #2
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	2300      	movs	r3, #0
 80003b0:	22c8      	movs	r2, #200	; 0xc8
 80003b2:	4915      	ldr	r1, [pc, #84]	; (8000408 <main+0xf8>)
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <main+0xfc>)
 80003b6:	f001 ffd9 	bl	800236c <xTaskCreate>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <main+0xe4>)
 80003be:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <main+0xe4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d00a      	beq.n	80003de <main+0xce>
        __asm volatile
 80003c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003cc:	f383 8811 	msr	BASEPRI, r3
 80003d0:	f3bf 8f6f 	isb	sy
 80003d4:	f3bf 8f4f 	dsb	sy
 80003d8:	607b      	str	r3, [r7, #4]
    }
 80003da:	bf00      	nop
 80003dc:	e7fe      	b.n	80003dc <main+0xcc>
  vTaskStartScheduler();
 80003de:	f002 f961 	bl	80026a4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <main+0xd2>
 80003e4:	e0001000 	.word	0xe0001000
 80003e8:	20000094 	.word	0x20000094
 80003ec:	08006274 	.word	0x08006274
 80003f0:	080005a5 	.word	0x080005a5
 80003f4:	200000a0 	.word	0x200000a0
 80003f8:	20000098 	.word	0x20000098
 80003fc:	0800627c 	.word	0x0800627c
 8000400:	080005f1 	.word	0x080005f1
 8000404:	2000009c 	.word	0x2000009c
 8000408:	08006284 	.word	0x08006284
 800040c:	0800061d 	.word	0x0800061d

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b096      	sub	sp, #88	; 0x58
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	2244      	movs	r2, #68	; 0x44
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f004 ff78 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	463b      	mov	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000432:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000436:	f000 fda1 	bl	8000f7c <HAL_PWREx_ControlVoltageScaling>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000440:	f000 f914 	bl	800066c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000444:	2302      	movs	r3, #2
 8000446:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800044c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044e:	2310      	movs	r3, #16
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000456:	2302      	movs	r3, #2
 8000458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800045a:	2301      	movs	r3, #1
 800045c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800045e:	230a      	movs	r3, #10
 8000460:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000462:	2307      	movs	r3, #7
 8000464:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000466:	2302      	movs	r3, #2
 8000468:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800046a:	2302      	movs	r3, #2
 800046c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fdd8 	bl	8001028 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800047e:	f000 f8f5 	bl	800066c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	230f      	movs	r3, #15
 8000484:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000486:	2303      	movs	r3, #3
 8000488:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	2104      	movs	r1, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f001 f9a0 	bl	80017e0 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004a6:	f000 f8e1 	bl	800066c <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3758      	adds	r7, #88	; 0x58
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	4b34      	ldr	r3, [pc, #208]	; (800059c <MX_GPIO_Init+0xe8>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	4a33      	ldr	r2, [pc, #204]	; (800059c <MX_GPIO_Init+0xe8>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d6:	4b31      	ldr	r3, [pc, #196]	; (800059c <MX_GPIO_Init+0xe8>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	f003 0304 	and.w	r3, r3, #4
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_GPIO_Init+0xe8>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a2d      	ldr	r2, [pc, #180]	; (800059c <MX_GPIO_Init+0xe8>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_GPIO_Init+0xe8>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_GPIO_Init+0xe8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a27      	ldr	r2, [pc, #156]	; (800059c <MX_GPIO_Init+0xe8>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_GPIO_Init+0xe8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_GPIO_Init+0xe8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a21      	ldr	r2, [pc, #132]	; (800059c <MX_GPIO_Init+0xe8>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_GPIO_Init+0xe8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2120      	movs	r1, #32
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fcfd 	bl	8000f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <MX_GPIO_Init+0xec>)
 800054e:	f000 fb45 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000552:	230c      	movs	r3, #12
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055e:	2303      	movs	r3, #3
 8000560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000562:	2307      	movs	r3, #7
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 fb34 	bl	8000bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000574:	2320      	movs	r3, #32
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fb25 	bl	8000bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000592:	bf00      	nop
 8000594:	3728      	adds	r7, #40	; 0x28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000800 	.word	0x48000800

080005a4 <task1_handler>:
/* USER CODE BEGIN 4 */
//----------------------------------------------------------------------------------------------------------
//xxxxxxxxxxxxxxxxxxxxxxxxxxxx Exercise 1 - Single Notification xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
//----------------------------------------------------------------------------------------------------------
void task1_handler(void *parameter)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	6078      	str	r0, [r7, #4]
	while(1){
		xTaskNotifyGive(task2_handle);
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <task1_handler+0x48>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2302      	movs	r3, #2
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	f002 fb99 	bl	8002cf0 <xTaskGenericNotify>
		xTaskNotifyGive(task2_handle);
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <task1_handler+0x48>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	f002 fb90 	bl	8002cf0 <xTaskGenericNotify>
		xTaskNotifyGive(task2_handle);
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <task1_handler+0x48>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2302      	movs	r3, #2
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	f002 fb87 	bl	8002cf0 <xTaskGenericNotify>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f002 f825 	bl	8002634 <vTaskDelay>
		xTaskNotifyGive(task2_handle);
 80005ea:	e7df      	b.n	80005ac <task1_handler+0x8>
 80005ec:	20000098 	.word	0x20000098

080005f0 <task2_handler>:
//		vTaskDelay(pdMS_TO_TICKS(1000));
	}
}

void task2_handler(void *parameter)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	int not_val;
	while(1){
		not_val = ulTaskNotifyTake(pdTRUE, (TickType_t)portMAX_DELAY);   // pdTrue reset the notification value to 0, whereas pdFalse decrements the value in case of multiple values
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295
 80005fc:	2101      	movs	r1, #1
 80005fe:	2000      	movs	r0, #0
 8000600:	f002 fb08 	bl	8002c14 <ulTaskGenericNotifyTake>
 8000604:	4603      	mov	r3, r0
 8000606:	60fb      	str	r3, [r7, #12]
		if(not_val > 0 ){
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b00      	cmp	r3, #0
 800060c:	ddf4      	ble.n	80005f8 <task2_handler+0x8>
			printf("Notification Recieved in Task 2 = %d \n", not_val);
 800060e:	68f9      	ldr	r1, [r7, #12]
 8000610:	4801      	ldr	r0, [pc, #4]	; (8000618 <task2_handler+0x28>)
 8000612:	f004 fe87 	bl	8005324 <iprintf>
		not_val = ulTaskNotifyTake(pdTRUE, (TickType_t)portMAX_DELAY);   // pdTrue reset the notification value to 0, whereas pdFalse decrements the value in case of multiple values
 8000616:	e7ef      	b.n	80005f8 <task2_handler+0x8>
 8000618:	0800628c 	.word	0x0800628c

0800061c <task3_handler>:
		}
	}
}

void task3_handler(void *parameter)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	int not_val;
	while(1){
		not_val = ulTaskNotifyTake(pdTRUE, (TickType_t)portMAX_DELAY);   // pdTrue reset the notification value to 0, whereas pdFalse decrements the value in cas of multiple values
 8000624:	f04f 32ff 	mov.w	r2, #4294967295
 8000628:	2101      	movs	r1, #1
 800062a:	2000      	movs	r0, #0
 800062c:	f002 faf2 	bl	8002c14 <ulTaskGenericNotifyTake>
 8000630:	4603      	mov	r3, r0
 8000632:	60fb      	str	r3, [r7, #12]
		if(not_val > 0 ){
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	ddf4      	ble.n	8000624 <task3_handler+0x8>
			printf("Notification Recieved in task 3 %d \n", not_val);
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	4801      	ldr	r0, [pc, #4]	; (8000644 <task3_handler+0x28>)
 800063e:	f004 fe71 	bl	8005324 <iprintf>
		not_val = ulTaskNotifyTake(pdTRUE, (TickType_t)portMAX_DELAY);   // pdTrue reset the notification value to 0, whereas pdFalse decrements the value in cas of multiple values
 8000642:	e7ef      	b.n	8000624 <task3_handler+0x8>
 8000644:	080062b4 	.word	0x080062b4

08000648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d101      	bne.n	800065e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800065a:	f000 f9bd 	bl	80009d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40001000 	.word	0x40001000

0800066c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000670:	b672      	cpsid	i
}
 8000672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000674:	e7fe      	b.n	8000674 <Error_Handler+0x8>
	...

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6613      	str	r3, [r2, #96]	; 0x60
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	6593      	str	r3, [r2, #88]	; 0x58
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x44>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80006ae:	f002 fdbb 	bl	8003228 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	; 0x38
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <HAL_InitTick+0xe0>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d2:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <HAL_InitTick+0xe0>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6593      	str	r3, [r2, #88]	; 0x58
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <HAL_InitTick+0xe0>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006e6:	f107 0210 	add.w	r2, r7, #16
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4611      	mov	r1, r2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fa23 	bl	8001b3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d103      	bne.n	8000708 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000700:	f001 fa06 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8000704:	6378      	str	r0, [r7, #52]	; 0x34
 8000706:	e004      	b.n	8000712 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000708:	f001 fa02 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 800070c:	4603      	mov	r3, r0
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000714:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <HAL_InitTick+0xe4>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	0c9b      	lsrs	r3, r3, #18
 800071c:	3b01      	subs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <HAL_InitTick+0xe8>)
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <HAL_InitTick+0xec>)
 8000724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <HAL_InitTick+0xe8>)
 8000728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800072c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <HAL_InitTick+0xe8>)
 8000730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000732:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <HAL_InitTick+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <HAL_InitTick+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_InitTick+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000746:	4818      	ldr	r0, [pc, #96]	; (80007a8 <HAL_InitTick+0xe8>)
 8000748:	f001 fa8a 	bl	8001c60 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000756:	2b00      	cmp	r3, #0
 8000758:	d11b      	bne.n	8000792 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800075a:	4813      	ldr	r0, [pc, #76]	; (80007a8 <HAL_InitTick+0xe8>)
 800075c:	f001 fae2 	bl	8001d24 <HAL_TIM_Base_Start_IT>
 8000760:	4603      	mov	r3, r0
 8000762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800076a:	2b00      	cmp	r3, #0
 800076c:	d111      	bne.n	8000792 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800076e:	2036      	movs	r0, #54	; 0x36
 8000770:	f000 fa26 	bl	8000bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b0f      	cmp	r3, #15
 8000778:	d808      	bhi.n	800078c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800077a:	2200      	movs	r2, #0
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	2036      	movs	r0, #54	; 0x36
 8000780:	f000 fa02 	bl	8000b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_InitTick+0xf0>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e002      	b.n	8000792 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800078c:	2301      	movs	r3, #1
 800078e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000796:	4618      	mov	r0, r3
 8000798:	3738      	adds	r7, #56	; 0x38
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	431bde83 	.word	0x431bde83
 80007a8:	200000a4 	.word	0x200000a4
 80007ac:	40001000 	.word	0x40001000
 80007b0:	20000004 	.word	0x20000004

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <TIM6_DAC_IRQHandler+0x10>)
 80007e6:	f001 fb0d 	bl	8001e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000a4 	.word	0x200000a4

080007f4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <ITM_SendChar+0x48>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <ITM_SendChar+0x48>)
 8000804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000808:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <ITM_SendChar+0x4c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <ITM_SendChar+0x4c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000816:	bf00      	nop
 8000818:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f8      	beq.n	8000818 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000826:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	6013      	str	r3, [r2, #0]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000edfc 	.word	0xe000edfc
 8000840:	e0000e00 	.word	0xe0000e00

08000844 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000856:	f3af 8000 	nop.w
 800085a:	4601      	mov	r1, r0
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
  }

  return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e009      	b.n	80008a4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ffab 	bl	80007f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dbf1      	blt.n	8000890 <_write+0x12>
  }
  return len;
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_close>:

int _close(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008de:	605a      	str	r2, [r3, #4]
  return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_isatty>:

int _isatty(int file)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f004 fc8d 	bl	8005290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000976:	f7ff fccb 	bl	8000310 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800097c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000988:	080064a0 	.word	0x080064a0
  ldr r2, =_sbss
 800098c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000990:	20014494 	.word	0x20014494

08000994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC1_2_IRQHandler>
	...

08000998 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_Init+0x3c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <HAL_Init+0x3c>)
 80009a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ae:	2003      	movs	r0, #3
 80009b0:	f000 f8df 	bl	8000b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b4:	200f      	movs	r0, #15
 80009b6:	f7ff fe83 	bl	80006c0 <HAL_InitTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	e001      	b.n	80009ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c6:	f7ff fe57 	bl	8000678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	200000f0 	.word	0x200000f0

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	200000f0 	.word	0x200000f0

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ff4c 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9a:	f7ff ff61 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000b9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	6978      	ldr	r0, [r7, #20]
 8000ba6:	f7ff ffb1 	bl	8000b0c <NVIC_EncodePriority>
 8000baa:	4602      	mov	r2, r0
 8000bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff80 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff54 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e17f      	b.n	8000eec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8171 	beq.w	8000ee6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <HAL_GPIO_Init+0x40>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	f003 0201 	and.w	r2, r3, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d118      	bne.n	8000cbc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c90:	2201      	movs	r2, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	f003 0201 	and.w	r2, r3, #1
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d017      	beq.n	8000cf8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d123      	bne.n	8000d4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	6939      	ldr	r1, [r7, #16]
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0203 	and.w	r2, r3, #3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80ac 	beq.w	8000ee6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b5f      	ldr	r3, [pc, #380]	; (8000f0c <HAL_GPIO_Init+0x330>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a5e      	ldr	r2, [pc, #376]	; (8000f0c <HAL_GPIO_Init+0x330>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b5c      	ldr	r3, [pc, #368]	; (8000f0c <HAL_GPIO_Init+0x330>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da6:	4a5a      	ldr	r2, [pc, #360]	; (8000f10 <HAL_GPIO_Init+0x334>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dd0:	d025      	beq.n	8000e1e <HAL_GPIO_Init+0x242>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4f      	ldr	r2, [pc, #316]	; (8000f14 <HAL_GPIO_Init+0x338>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d01f      	beq.n	8000e1a <HAL_GPIO_Init+0x23e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4e      	ldr	r2, [pc, #312]	; (8000f18 <HAL_GPIO_Init+0x33c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x23a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4d      	ldr	r2, [pc, #308]	; (8000f1c <HAL_GPIO_Init+0x340>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x236>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <HAL_GPIO_Init+0x344>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x232>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4b      	ldr	r2, [pc, #300]	; (8000f24 <HAL_GPIO_Init+0x348>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x22e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <HAL_GPIO_Init+0x34c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x22a>
 8000e02:	2306      	movs	r3, #6
 8000e04:	e00c      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e06:	2307      	movs	r3, #7
 8000e08:	e00a      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	e008      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e004      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x244>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	f002 0203 	and.w	r2, r2, #3
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	4093      	lsls	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e30:	4937      	ldr	r1, [pc, #220]	; (8000f10 <HAL_GPIO_Init+0x334>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e68:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e8c:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eb6:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_GPIO_Init+0x350>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f ae78 	bne.w	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000
 8000f14:	48000400 	.word	0x48000400
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	48000c00 	.word	0x48000c00
 8000f20:	48001000 	.word	0x48001000
 8000f24:	48001400 	.word	0x48001400
 8000f28:	48001800 	.word	0x48001800
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f40:	787b      	ldrb	r3, [r7, #1]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000

08000f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f8a:	d130      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f98:	d038      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2232      	movs	r2, #50	; 0x32
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9b      	lsrs	r3, r3, #18
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc0:	e002      	b.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd4:	d102      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f2      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe8:	d110      	bne.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e00f      	b.n	800100e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffa:	d007      	beq.n	800100c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001004:	4a05      	ldr	r2, [pc, #20]	; (800101c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40007000 	.word	0x40007000
 8001020:	20000000 	.word	0x20000000
 8001024:	431bde83 	.word	0x431bde83

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e3ca      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800103a:	4b97      	ldr	r3, [pc, #604]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001044:	4b94      	ldr	r3, [pc, #592]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80e4 	beq.w	8001224 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <HAL_RCC_OscConfig+0x4a>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	f040 808b 	bne.w	8001180 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b01      	cmp	r3, #1
 800106e:	f040 8087 	bne.w	8001180 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001072:	4b89      	ldr	r3, [pc, #548]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x62>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e3a2      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_RCC_OscConfig+0x7c>
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010a2:	e005      	b.n	80010b0 <HAL_RCC_OscConfig+0x88>
 80010a4:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d223      	bcs.n	80010fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fd71 	bl	8001ba0 <RCC_SetFlashLatencyFromMSIRange>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e383      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a72      	ldr	r2, [pc, #456]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	496d      	ldr	r1, [pc, #436]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e6:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	4968      	ldr	r1, [pc, #416]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	604b      	str	r3, [r1, #4]
 80010fa:	e025      	b.n	8001148 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fc:	4b66      	ldr	r3, [pc, #408]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a65      	ldr	r2, [pc, #404]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4960      	ldr	r1, [pc, #384]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	495b      	ldr	r1, [pc, #364]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fd31 	bl	8001ba0 <RCC_SetFlashLatencyFromMSIRange>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e343      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001148:	f000 fc4a 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800114c:	4602      	mov	r2, r0
 800114e:	4b52      	ldr	r3, [pc, #328]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	4950      	ldr	r1, [pc, #320]	; (800129c <HAL_RCC_OscConfig+0x274>)
 800115a:	5ccb      	ldrb	r3, [r1, r3]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_RCC_OscConfig+0x278>)
 8001166:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001168:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_RCC_OscConfig+0x27c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff faa7 	bl	80006c0 <HAL_InitTick>
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d052      	beq.n	8001222 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	e327      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d032      	beq.n	80011ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001188:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc34 	bl	8000a00 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119c:	f7ff fc30 	bl	8000a00 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e310      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a36      	ldr	r2, [pc, #216]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4931      	ldr	r1, [pc, #196]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	492c      	ldr	r1, [pc, #176]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e01a      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fc01 	bl	8000a00 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001202:	f7ff fbfd 	bl	8000a00 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e2dd      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x1da>
 8001220:	e000      	b.n	8001224 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001222:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d074      	beq.n	800131a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x21a>
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d10e      	bne.n	800125a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d10b      	bne.n	800125a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d064      	beq.n	8001318 <HAL_RCC_OscConfig+0x2f0>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d160      	bne.n	8001318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e2ba      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x24a>
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e026      	b.n	80012c0 <HAL_RCC_OscConfig+0x298>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127a:	d115      	bne.n	80012a8 <HAL_RCC_OscConfig+0x280>
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a02      	ldr	r2, [pc, #8]	; (8001298 <HAL_RCC_OscConfig+0x270>)
 800128e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x298>
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	080063a4 	.word	0x080063a4
 80012a0:	20000000 	.word	0x20000000
 80012a4:	20000004 	.word	0x20000004
 80012a8:	4ba0      	ldr	r3, [pc, #640]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a9f      	ldr	r2, [pc, #636]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b9d      	ldr	r3, [pc, #628]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a9c      	ldr	r2, [pc, #624]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb9a 	bl	8000a00 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fb96 	bl	8000a00 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e276      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e2:	4b92      	ldr	r3, [pc, #584]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x2a8>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb86 	bl	8000a00 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fb82 	bl	8000a00 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e262      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130a:	4b88      	ldr	r3, [pc, #544]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2d0>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d060      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d005      	beq.n	8001338 <HAL_RCC_OscConfig+0x310>
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d119      	bne.n	8001366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d116      	bne.n	8001366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	4b7c      	ldr	r3, [pc, #496]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x328>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e23f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	4973      	ldr	r1, [pc, #460]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	e040      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d023      	beq.n	80013b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136e:	4b6f      	ldr	r3, [pc, #444]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6e      	ldr	r2, [pc, #440]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fb41 	bl	8000a00 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fb3d 	bl	8000a00 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e21d      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001394:	4b65      	ldr	r3, [pc, #404]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b62      	ldr	r3, [pc, #392]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	495f      	ldr	r1, [pc, #380]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e018      	b.n	80013e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5c      	ldr	r2, [pc, #368]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fb1d 	bl	8000a00 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fb19 	bl	8000a00 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1f9      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d03c      	beq.n	800146e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01c      	beq.n	8001436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fc:	4b4b      	ldr	r3, [pc, #300]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80013fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001402:	4a4a      	ldr	r2, [pc, #296]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff faf8 	bl	8000a00 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff faf4 	bl	8000a00 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1d4      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ef      	beq.n	8001414 <HAL_RCC_OscConfig+0x3ec>
 8001434:	e01b      	b.n	800146e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	4a3b      	ldr	r2, [pc, #236]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001446:	f7ff fadb 	bl	8000a00 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144e:	f7ff fad7 	bl	8000a00 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1b7      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ef      	bne.n	800144e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80a6 	beq.w	80015c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10d      	bne.n	80014a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a4:	2301      	movs	r3, #1
 80014a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d118      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa9e 	bl	8000a00 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff fa9a 	bl	8000a00 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e17a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x508>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x4d8>
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_RCC_OscConfig+0x504>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fe:	e029      	b.n	8001554 <HAL_RCC_OscConfig+0x52c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d115      	bne.n	8001534 <HAL_RCC_OscConfig+0x50c>
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_RCC_OscConfig+0x504>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_RCC_OscConfig+0x504>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x52c>
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
 8001534:	4b9c      	ldr	r3, [pc, #624]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	4a9b      	ldr	r2, [pc, #620]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001544:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154a:	4a97      	ldr	r2, [pc, #604]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d016      	beq.n	800158a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fa50 	bl	8000a00 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fa4c 	bl	8000a00 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e12a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157a:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ed      	beq.n	8001564 <HAL_RCC_OscConfig+0x53c>
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fa39 	bl	8000a00 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fa35 	bl	8000a00 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e113      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a8:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ed      	bne.n	8001592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7ffb      	ldrb	r3, [r7, #31]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80fe 	beq.w	80017ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	f040 80d0 	bne.w	800177c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015dc:	4b72      	ldr	r3, [pc, #456]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d130      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	3b01      	subs	r3, #1
 80015fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d127      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d11f      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800161c:	2a07      	cmp	r2, #7
 800161e:	bf14      	ite	ne
 8001620:	2201      	movne	r2, #1
 8001622:	2200      	moveq	r2, #0
 8001624:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001626:	4293      	cmp	r3, r2
 8001628:	d113      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d109      	bne.n	8001652 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d06e      	beq.n	8001730 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d069      	beq.n	800172c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0ad      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4b      	ldr	r2, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800167a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001680:	f7ff f9be 	bl	8000a00 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff f9ba 	bl	8000a00 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e09a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b40      	ldr	r3, [pc, #256]	; (80017ac <HAL_RCC_OscConfig+0x784>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016c0:	0212      	lsls	r2, r2, #8
 80016c2:	4311      	orrs	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016c8:	0852      	lsrs	r2, r2, #1
 80016ca:	3a01      	subs	r2, #1
 80016cc:	0552      	lsls	r2, r2, #21
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016d4:	0852      	lsrs	r2, r2, #1
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0652      	lsls	r2, r2, #25
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016e0:	0912      	lsrs	r2, r2, #4
 80016e2:	0452      	lsls	r2, r2, #17
 80016e4:	430a      	orrs	r2, r1
 80016e6:	4930      	ldr	r1, [pc, #192]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001704:	f7ff f97c 	bl	8000a00 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f978 	bl	8000a00 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e058      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800172a:	e050      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e04f      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d148      	bne.n	80017ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001754:	f7ff f954 	bl	8000a00 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f950 	bl	8000a00 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e030      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x734>
 800177a:	e028      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d023      	beq.n	80017ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_RCC_OscConfig+0x780>)
 8001788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff f937 	bl	8000a00 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	e00c      	b.n	80017b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f933 	bl	8000a00 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d905      	bls.n	80017b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ec      	bne.n	8001796 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4905      	ldr	r1, [pc, #20]	; (80017d8 <HAL_RCC_OscConfig+0x7b0>)
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_RCC_OscConfig+0x7b4>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
 80017c8:	e001      	b.n	80017ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40021000 	.word	0x40021000
 80017dc:	feeefffc 	.word	0xfeeefffc

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0e7      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4970      	ldr	r1, [pc, #448]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0cf      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183c:	429a      	cmp	r2, r3
 800183e:	d908      	bls.n	8001852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d121      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0a6      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e09a      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001896:	4b4e      	ldr	r3, [pc, #312]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e08e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e086      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4943      	ldr	r1, [pc, #268]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7ff f89a 	bl	8000a00 <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff f896 	bl	8000a00 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e06e      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d208      	bcs.n	8001926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	492b      	ldr	r1, [pc, #172]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001926:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d210      	bcs.n	8001956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	4923      	ldr	r1, [pc, #140]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_ClockConfig+0x1ec>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e036      	b.n	80019c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4918      	ldr	r1, [pc, #96]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001994:	f000 f824 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	490b      	ldr	r1, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1f4>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1f8>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1fc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fe81 	bl	80006c0 <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	080063a4 	.word	0x080063a4
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x34>
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d121      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11e      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e005      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a58:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	e004      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d134      	bne.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d003      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0xac>
 8001a84:	e005      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a88:	617b      	str	r3, [r7, #20]
      break;
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a8e:	617b      	str	r3, [r7, #20]
      break;
 8001a90:	e002      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0e5b      	lsrs	r3, r3, #25
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	080063bc 	.word	0x080063bc
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4904      	ldr	r1, [pc, #16]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	080063b4 	.word	0x080063b4

08001b3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	220f      	movs	r2, #15
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_RCC_GetClockConfig+0x60>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0207 	and.w	r2, r3, #7
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bb8:	f7ff f9d2 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001bbc:	6178      	str	r0, [r7, #20]
 8001bbe:	e014      	b.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a24      	ldr	r2, [pc, #144]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f9c2 	bl	8000f60 <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf0:	d10b      	bne.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d919      	bls.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2ba0      	cmp	r3, #160	; 0xa0
 8001bfc:	d902      	bls.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bfe:	2302      	movs	r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e013      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c04:	2301      	movs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e010      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b80      	cmp	r3, #128	; 0x80
 8001c0e:	d902      	bls.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c10:	2303      	movs	r3, #3
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e00a      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d102      	bne.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e004      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b70      	cmp	r3, #112	; 0x70
 8001c26:	d101      	bne.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 0207 	bic.w	r2, r3, #7
 8001c34:	4909      	ldr	r1, [pc, #36]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40022000 	.word	0x40022000

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e049      	b.n	8001d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f841 	bl	8001d0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f9f8 	bl	8002094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d001      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04f      	b.n	8001ddc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_TIM_Base_Start_IT+0x76>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d66:	d018      	beq.n	8001d9a <HAL_TIM_Base_Start_IT+0x76>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_TIM_Base_Start_IT+0xc8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_TIM_Base_Start_IT+0x76>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_TIM_Base_Start_IT+0x76>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_TIM_Base_Start_IT+0x76>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_TIM_Base_Start_IT+0x76>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d115      	bne.n	8001dc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	d015      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db2:	d011      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc4:	e008      	b.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e000      	b.n	8001dda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40013400 	.word	0x40013400
 8001dfc:	40014000 	.word	0x40014000
 8001e00:	00010007 	.word	0x00010007

08001e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0202 	mvn.w	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f905 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8f7 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f908 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0204 	mvn.w	r2, #4
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8db 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8cd 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8de 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0208 	mvn.w	r2, #8
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8b1 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8a3 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8b4 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0210 	mvn.w	r2, #16
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2208      	movs	r2, #8
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f887 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f879 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f88a 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0201 	mvn.w	r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fb60 	bl	8000648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f914 	bl	80021dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc2:	d10e      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b80      	cmp	r3, #128	; 0x80
 8001fd0:	d107      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f907 	bl	80021f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d10e      	bne.n	800200e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d107      	bne.n	800200e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f838 	bl	800207e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b20      	cmp	r3, #32
 800201a:	d10e      	bne.n	800203a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b20      	cmp	r3, #32
 8002028:	d107      	bne.n	800203a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f06f 0220 	mvn.w	r2, #32
 8002032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8c7 	bl	80021c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a40      	ldr	r2, [pc, #256]	; (80021a8 <TIM_Base_SetConfig+0x114>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b2:	d00f      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <TIM_Base_SetConfig+0x118>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00b      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3c      	ldr	r2, [pc, #240]	; (80021b0 <TIM_Base_SetConfig+0x11c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <TIM_Base_SetConfig+0x120>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3a      	ldr	r2, [pc, #232]	; (80021b8 <TIM_Base_SetConfig+0x124>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d108      	bne.n	80020e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <TIM_Base_SetConfig+0x114>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d01b      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <TIM_Base_SetConfig+0x118>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d017      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <TIM_Base_SetConfig+0x11c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <TIM_Base_SetConfig+0x120>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00f      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <TIM_Base_SetConfig+0x124>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00b      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <TIM_Base_SetConfig+0x128>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <TIM_Base_SetConfig+0x12c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0x9a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <TIM_Base_SetConfig+0x130>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d108      	bne.n	8002140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <TIM_Base_SetConfig+0x114>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00f      	beq.n	800218c <TIM_Base_SetConfig+0xf8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <TIM_Base_SetConfig+0x124>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00b      	beq.n	800218c <TIM_Base_SetConfig+0xf8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <TIM_Base_SetConfig+0x128>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <TIM_Base_SetConfig+0xf8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <TIM_Base_SetConfig+0x12c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <TIM_Base_SetConfig+0xf8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <TIM_Base_SetConfig+0x130>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	615a      	str	r2, [r3, #20]
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40000c00 	.word	0x40000c00
 80021b8:	40013400 	.word	0x40013400
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800

080021c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 0208 	add.w	r2, r3, #8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f103 0208 	add.w	r2, r3, #8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d103      	bne.n	80022c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e00c      	b.n	80022e0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3308      	adds	r3, #8
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e002      	b.n	80022d4 <vListInsert+0x2e>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d2f6      	bcs.n	80022ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6892      	ldr	r2, [r2, #8]
 800232e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6852      	ldr	r2, [r2, #4]
 8002338:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d103      	bne.n	800234c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f8f3 	bl	800356c <pvPortMalloc>
 8002386:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00e      	beq.n	80023ac <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800238e:	2058      	movs	r0, #88	; 0x58
 8002390:	f001 f8ec 	bl	800356c <pvPortMalloc>
 8002394:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
 80023a2:	e005      	b.n	80023b0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80023a4:	6978      	ldr	r0, [r7, #20]
 80023a6:	f001 f9c1 	bl	800372c <vPortFree>
 80023aa:	e001      	b.n	80023b0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d013      	beq.n	80023de <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f80e 	bl	80023ee <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023d2:	69f8      	ldr	r0, [r7, #28]
 80023d4:	f000 f8a2 	bl	800251c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023d8:	2301      	movs	r3, #1
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e002      	b.n	80023e4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023e4:	69bb      	ldr	r3, [r7, #24]
    }
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b088      	sub	sp, #32
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	461a      	mov	r2, r3
 8002406:	21a5      	movs	r1, #165	; 0xa5
 8002408:	f002 ff84 	bl	8005314 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002416:	3b01      	subs	r3, #1
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f023 0307 	bic.w	r3, r3, #7
 8002424:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	617b      	str	r3, [r7, #20]
    }
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01f      	beq.n	800248c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	e012      	b.n	8002478 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	7819      	ldrb	r1, [r3, #0]
 800245a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	3334      	adds	r3, #52	; 0x34
 8002462:	460a      	mov	r2, r1
 8002464:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3301      	adds	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b09      	cmp	r3, #9
 800247c:	d9e9      	bls.n	8002452 <prvInitialiseNewTask+0x64>
 800247e:	e000      	b.n	8002482 <prvInitialiseNewTask+0x94>
            {
                break;
 8002480:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800248a:	e003      	b.n	8002494 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	2b04      	cmp	r3, #4
 8002498:	d901      	bls.n	800249e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800249a:	2304      	movs	r3, #4
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2200      	movs	r2, #0
 80024ae:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	3304      	adds	r3, #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fec5 	bl	8002244 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	3318      	adds	r3, #24
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fec0 	bl	8002244 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	f1c3 0205 	rsb	r2, r3, #5
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	3350      	adds	r3, #80	; 0x50
 80024de:	2204      	movs	r2, #4
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 ff16 	bl	8005314 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	3354      	adds	r3, #84	; 0x54
 80024ec:	2201      	movs	r2, #1
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 ff0f 	bl	8005314 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	69b8      	ldr	r0, [r7, #24]
 80024fc:	f000 fd62 	bl	8002fc4 <pxPortInitialiseStack>
 8002500:	4602      	mov	r2, r0
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002510:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af02      	add	r7, sp, #8
 8002522:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002524:	f000 fefe 	bl	8003324 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <prvAddNewTaskToReadyList+0xfc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <prvAddNewTaskToReadyList+0xfc>)
 8002530:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <prvAddNewTaskToReadyList+0x100>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800253a:	4a38      	ldr	r2, [pc, #224]	; (800261c <prvAddNewTaskToReadyList+0x100>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002540:	4b35      	ldr	r3, [pc, #212]	; (8002618 <prvAddNewTaskToReadyList+0xfc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d110      	bne.n	800256a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002548:	f000 fb06 	bl	8002b58 <prvInitialiseTaskLists>
 800254c:	e00d      	b.n	800256a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <prvAddNewTaskToReadyList+0x104>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <prvAddNewTaskToReadyList+0x100>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d802      	bhi.n	800256a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002564:	4a2d      	ldr	r2, [pc, #180]	; (800261c <prvAddNewTaskToReadyList+0x100>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <prvAddNewTaskToReadyList+0x108>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <prvAddNewTaskToReadyList+0x108>)
 8002572:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <prvAddNewTaskToReadyList+0x108>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <prvAddNewTaskToReadyList+0x94>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	f002 fc15 	bl	8004db4 <SEGGER_SYSVIEW_OnTaskCreate>
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	461d      	mov	r5, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461c      	mov	r4, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	1ae3      	subs	r3, r4, r3
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	462b      	mov	r3, r5
 80025ac:	f001 fa8a 	bl	8003ac4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fc82 	bl	8004ebc <SEGGER_SYSVIEW_OnTaskStartReady>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2201      	movs	r2, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <prvAddNewTaskToReadyList+0x10c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <prvAddNewTaskToReadyList+0x10c>)
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <prvAddNewTaskToReadyList+0x110>)
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7ff fe3c 	bl	800225e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025e6:	f000 fecd 	bl	8003384 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <prvAddNewTaskToReadyList+0x104>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00e      	beq.n	8002610 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <prvAddNewTaskToReadyList+0x100>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <prvAddNewTaskToReadyList+0x114>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bdb0      	pop	{r4, r5, r7, pc}
 8002618:	200001b4 	.word	0x200001b4
 800261c:	200000f4 	.word	0x200000f4
 8002620:	200001c0 	.word	0x200001c0
 8002624:	200001d0 	.word	0x200001d0
 8002628:	200001bc 	.word	0x200001bc
 800262c:	200000f8 	.word	0x200000f8
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01b      	beq.n	800267e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <vTaskDelay+0x68>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <vTaskDelay+0x30>
        __asm volatile
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	60bb      	str	r3, [r7, #8]
    }
 8002660:	bf00      	nop
 8002662:	e7fe      	b.n	8002662 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002664:	f000 f87a 	bl	800275c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	2023      	movs	r0, #35	; 0x23
 800266c:	f001 ff1c 	bl	80044a8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002670:	2100      	movs	r1, #0
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 fc2e 	bl	8002ed4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002678:	f000 f87e 	bl	8002778 <xTaskResumeAll>
 800267c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <vTaskDelay+0x6c>)
 8002686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200001dc 	.word	0x200001dc
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <vTaskStartScheduler+0x98>)
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b8:	4921      	ldr	r1, [pc, #132]	; (8002740 <vTaskStartScheduler+0x9c>)
 80026ba:	4822      	ldr	r0, [pc, #136]	; (8002744 <vTaskStartScheduler+0xa0>)
 80026bc:	f7ff fe56 	bl	800236c <xTaskCreate>
 80026c0:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d124      	bne.n	8002712 <vTaskStartScheduler+0x6e>
        __asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	60bb      	str	r3, [r7, #8]
    }
 80026da:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <vTaskStartScheduler+0xa4>)
 80026de:	f04f 32ff 	mov.w	r2, #4294967295
 80026e2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <vTaskStartScheduler+0xa8>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <vTaskStartScheduler+0xac>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <vTaskStartScheduler+0xb0>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <vTaskStartScheduler+0x98>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d102      	bne.n	8002702 <vTaskStartScheduler+0x5e>
 80026fc:	f002 fb3e 	bl	8004d7c <SEGGER_SYSVIEW_OnIdle>
 8002700:	e004      	b.n	800270c <vTaskStartScheduler+0x68>
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <vTaskStartScheduler+0xb0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fb96 	bl	8004e38 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800270c:	f000 fcea 	bl	80030e4 <xPortStartScheduler>
 8002710:	e00e      	b.n	8002730 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d10a      	bne.n	8002730 <vTaskStartScheduler+0x8c>
        __asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	607b      	str	r3, [r7, #4]
    }
 800272c:	bf00      	nop
 800272e:	e7fe      	b.n	800272e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <vTaskStartScheduler+0xb4>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200001d8 	.word	0x200001d8
 8002740:	080062dc 	.word	0x080062dc
 8002744:	08002b29 	.word	0x08002b29
 8002748:	200001d4 	.word	0x200001d4
 800274c:	200001c0 	.word	0x200001c0
 8002750:	200001b8 	.word	0x200001b8
 8002754:	200000f4 	.word	0x200000f4
 8002758:	2000000c 	.word	0x2000000c

0800275c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <vTaskSuspendAll+0x18>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a03      	ldr	r2, [pc, #12]	; (8002774 <vTaskSuspendAll+0x18>)
 8002768:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	200001dc 	.word	0x200001dc

08002778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002786:	4b43      	ldr	r3, [pc, #268]	; (8002894 <xTaskResumeAll+0x11c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	603b      	str	r3, [r7, #0]
    }
 80027a0:	bf00      	nop
 80027a2:	e7fe      	b.n	80027a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027a4:	f000 fdbe 	bl	8003324 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <xTaskResumeAll+0x11c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	4a39      	ldr	r2, [pc, #228]	; (8002894 <xTaskResumeAll+0x11c>)
 80027b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <xTaskResumeAll+0x11c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d165      	bne.n	8002886 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027ba:	4b37      	ldr	r3, [pc, #220]	; (8002898 <xTaskResumeAll+0x120>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d061      	beq.n	8002886 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c2:	e032      	b.n	800282a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <xTaskResumeAll+0x124>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3318      	adds	r3, #24
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fda1 	bl	8002318 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3304      	adds	r3, #4
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fd9c 	bl	8002318 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fb6a 	bl	8004ebc <SEGGER_SYSVIEW_OnTaskStartReady>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <xTaskResumeAll+0x128>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <xTaskResumeAll+0x128>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <xTaskResumeAll+0x12c>)
 8002808:	441a      	add	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7ff fd24 	bl	800225e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <xTaskResumeAll+0x130>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <xTaskResumeAll+0x134>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <xTaskResumeAll+0x124>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1c8      	bne.n	80027c4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002838:	f000 f9d0 	bl	8002bdc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <xTaskResumeAll+0x138>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002848:	f000 f848 	bl	80028dc <xTaskIncrementTick>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <xTaskResumeAll+0x134>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f1      	bne.n	8002848 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <xTaskResumeAll+0x138>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <xTaskResumeAll+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002872:	2301      	movs	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <xTaskResumeAll+0x13c>)
 8002878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002886:	f000 fd7d 	bl	8003384 <vPortExitCritical>

    return xAlreadyYielded;
 800288a:	68bb      	ldr	r3, [r7, #8]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200001dc 	.word	0x200001dc
 8002898:	200001b4 	.word	0x200001b4
 800289c:	2000018c 	.word	0x2000018c
 80028a0:	200001bc 	.word	0x200001bc
 80028a4:	200000f8 	.word	0x200000f8
 80028a8:	200000f4 	.word	0x200000f4
 80028ac:	200001c8 	.word	0x200001c8
 80028b0:	200001c4 	.word	0x200001c4
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028be:	f000 fe15 	bl	80034ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80028c6:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <xTaskGetTickCountFromISR+0x20>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80028cc:	683b      	ldr	r3, [r7, #0]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200001b8 	.word	0x200001b8

080028dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <xTaskIncrementTick+0x14c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 8092 	bne.w	8002a14 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028f0:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <xTaskIncrementTick+0x150>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <xTaskIncrementTick+0x150>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d120      	bne.n	8002946 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <xTaskIncrementTick+0x48>
        __asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	603b      	str	r3, [r7, #0]
    }
 8002920:	bf00      	nop
 8002922:	e7fe      	b.n	8002922 <xTaskIncrementTick+0x46>
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <xTaskIncrementTick+0x158>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a40      	ldr	r2, [pc, #256]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <xTaskIncrementTick+0x158>)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <xTaskIncrementTick+0x15c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a3e      	ldr	r2, [pc, #248]	; (8002a38 <xTaskIncrementTick+0x15c>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	f000 f94b 	bl	8002bdc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <xTaskIncrementTick+0x160>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	429a      	cmp	r2, r3
 800294e:	d34c      	bcc.n	80029ea <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <xTaskIncrementTick+0x160>)
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	601a      	str	r2, [r3, #0]
                    break;
 8002962:	e042      	b.n	80029ea <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <xTaskIncrementTick+0x154>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d203      	bcs.n	8002984 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800297c:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <xTaskIncrementTick+0x160>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002982:	e032      	b.n	80029ea <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3304      	adds	r3, #4
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fcc5 	bl	8002318 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3318      	adds	r3, #24
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fcbc 	bl	8002318 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fa8a 	bl	8004ebc <SEGGER_SYSVIEW_OnTaskStartReady>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <xTaskIncrementTick+0x164>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <xTaskIncrementTick+0x164>)
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <xTaskIncrementTick+0x168>)
 80029c8:	441a      	add	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f7ff fc44 	bl	800225e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <xTaskIncrementTick+0x16c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3b5      	bcc.n	8002950 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029e8:	e7b2      	b.n	8002950 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029ea:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <xTaskIncrementTick+0x16c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	4914      	ldr	r1, [pc, #80]	; (8002a44 <xTaskIncrementTick+0x168>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d901      	bls.n	8002a06 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <xTaskIncrementTick+0x170>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e004      	b.n	8002a1e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <xTaskIncrementTick+0x174>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <xTaskIncrementTick+0x174>)
 8002a1c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a1e:	697b      	ldr	r3, [r7, #20]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200001dc 	.word	0x200001dc
 8002a2c:	200001b8 	.word	0x200001b8
 8002a30:	20000184 	.word	0x20000184
 8002a34:	20000188 	.word	0x20000188
 8002a38:	200001cc 	.word	0x200001cc
 8002a3c:	200001d4 	.word	0x200001d4
 8002a40:	200001bc 	.word	0x200001bc
 8002a44:	200000f8 	.word	0x200000f8
 8002a48:	200000f4 	.word	0x200000f4
 8002a4c:	200001c8 	.word	0x200001c8
 8002a50:	200001c4 	.word	0x200001c4

08002a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <vTaskSwitchContext+0xbc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <vTaskSwitchContext+0xc0>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a68:	e04d      	b.n	8002b06 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <vTaskSwitchContext+0xc0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <vTaskSwitchContext+0xc4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a7e:	7afb      	ldrb	r3, [r7, #11]
 8002a80:	f1c3 031f 	rsb	r3, r3, #31
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	4925      	ldr	r1, [pc, #148]	; (8002b1c <vTaskSwitchContext+0xc8>)
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	607b      	str	r3, [r7, #4]
    }
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <vTaskSwitchContext+0x5a>
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <vTaskSwitchContext+0xc8>)
 8002abc:	4413      	add	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d104      	bne.n	8002ae0 <vTaskSwitchContext+0x8c>
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <vTaskSwitchContext+0xcc>)
 8002ae8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <vTaskSwitchContext+0xcc>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <vTaskSwitchContext+0xd0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d102      	bne.n	8002afc <vTaskSwitchContext+0xa8>
 8002af6:	f002 f941 	bl	8004d7c <SEGGER_SYSVIEW_OnIdle>
}
 8002afa:	e004      	b.n	8002b06 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <vTaskSwitchContext+0xcc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 f999 	bl	8004e38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200001dc 	.word	0x200001dc
 8002b14:	200001c8 	.word	0x200001c8
 8002b18:	200001bc 	.word	0x200001bc
 8002b1c:	200000f8 	.word	0x200000f8
 8002b20:	200000f4 	.word	0x200000f4
 8002b24:	200001d8 	.word	0x200001d8

08002b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b30:	f000 f84c 	bl	8002bcc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <prvIdleTask+0x28>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d9f9      	bls.n	8002b30 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <prvIdleTask+0x2c>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b4c:	e7f0      	b.n	8002b30 <prvIdleTask+0x8>
 8002b4e:	bf00      	nop
 8002b50:	200000f8 	.word	0x200000f8
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e00c      	b.n	8002b7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <prvInitialiseTaskLists+0x58>)
 8002b70:	4413      	add	r3, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fb46 	bl	8002204 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d9ef      	bls.n	8002b64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b84:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <prvInitialiseTaskLists+0x5c>)
 8002b86:	f7ff fb3d 	bl	8002204 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <prvInitialiseTaskLists+0x60>)
 8002b8c:	f7ff fb3a 	bl	8002204 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b90:	480a      	ldr	r0, [pc, #40]	; (8002bbc <prvInitialiseTaskLists+0x64>)
 8002b92:	f7ff fb37 	bl	8002204 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b96:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <prvInitialiseTaskLists+0x68>)
 8002b98:	f7ff fb34 	bl	8002204 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <prvInitialiseTaskLists+0x6c>)
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <prvInitialiseTaskLists+0x5c>)
 8002ba0:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <prvInitialiseTaskLists+0x70>)
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <prvInitialiseTaskLists+0x60>)
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200000f8 	.word	0x200000f8
 8002bb4:	2000015c 	.word	0x2000015c
 8002bb8:	20000170 	.word	0x20000170
 8002bbc:	2000018c 	.word	0x2000018c
 8002bc0:	200001a0 	.word	0x200001a0
 8002bc4:	20000184 	.word	0x20000184
 8002bc8:	20000188 	.word	0x20000188

08002bcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <prvResetNextTaskUnblockTime+0x30>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <prvResetNextTaskUnblockTime+0x34>)
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bf2:	e005      	b.n	8002c00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <prvResetNextTaskUnblockTime+0x30>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <prvResetNextTaskUnblockTime+0x34>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000184 	.word	0x20000184
 8002c10:	200001d4 	.word	0x200001d4

08002c14 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	613b      	str	r3, [r7, #16]
    }
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8002c3c:	f000 fb72 	bl	8003324 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <ulTaskGenericNotifyTake+0xd4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	3214      	adds	r2, #20
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <ulTaskGenericNotifyTake+0xd4>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	3354      	adds	r3, #84	; 0x54
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c64:	2101      	movs	r1, #1
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f934 	bl	8002ed4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <ulTaskGenericNotifyTake+0xd8>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002c7c:	f000 fb82 	bl	8003384 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002c80:	f000 fb50 	bl	8003324 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE(  );
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2042      	movs	r0, #66	; 0x42
 8002c8c:	f001 fc48 	bl	8004520 <SEGGER_SYSVIEW_RecordU32x2>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <ulTaskGenericNotifyTake+0xd4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	3214      	adds	r2, #20
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d012      	beq.n	8002cca <ulTaskGenericNotifyTake+0xb6>
            {
                if( xClearCountOnExit != pdFALSE )
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <ulTaskGenericNotifyTake+0xa6>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <ulTaskGenericNotifyTake+0xd4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	3214      	adds	r2, #20
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002cb8:	e007      	b.n	8002cca <ulTaskGenericNotifyTake+0xb6>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <ulTaskGenericNotifyTake+0xd4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	1e51      	subs	r1, r2, #1
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	3214      	adds	r2, #20
 8002cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <ulTaskGenericNotifyTake+0xd4>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3354      	adds	r3, #84	; 0x54
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002cd8:	f000 fb54 	bl	8003384 <vPortExitCritical>

        return ulReturn;
 8002cdc:	697b      	ldr	r3, [r7, #20]
    }
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200000f4 	.word	0x200000f4
 8002cec:	e000ed04 	.word	0xe000ed04

08002cf0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <xTaskGenericNotify+0x2e>
        __asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	623b      	str	r3, [r7, #32]
    }
 8002d1a:	bf00      	nop
 8002d1c:	e7fe      	b.n	8002d1c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <xTaskGenericNotify+0x4a>
        __asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	61fb      	str	r3, [r7, #28]
    }
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002d3e:	f000 faf1 	bl	8003324 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	3214      	adds	r2, #20
 8002d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3354      	adds	r3, #84	; 0x54
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3354      	adds	r3, #84	; 0x54
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d83b      	bhi.n	8002dee <xTaskGenericNotify+0xfe>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <xTaskGenericNotify+0x8c>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002e0d 	.word	0x08002e0d
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002dad 	.word	0x08002dad
 8002d88:	08002dc5 	.word	0x08002dc5
 8002d8c:	08002dd3 	.word	0x08002dd3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	3214      	adds	r2, #20
 8002d96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	ea42 0103 	orr.w	r1, r2, r3
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	3214      	adds	r2, #20
 8002da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002daa:	e032      	b.n	8002e12 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	3214      	adds	r2, #20
 8002db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	3214      	adds	r2, #20
 8002dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002dc2:	e026      	b.n	8002e12 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	3214      	adds	r2, #20
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002dd0:	e01f      	b.n	8002e12 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d006      	beq.n	8002de8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	3214      	adds	r2, #20
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002de6:	e014      	b.n	8002e12 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002dec:	e011      	b.n	8002e12 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <xTaskGenericNotify+0x1d0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <xTaskGenericNotify+0x120>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	61bb      	str	r3, [r7, #24]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <xTaskGenericNotify+0x11a>
                    break;
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <xTaskGenericNotify+0x122>

                    break;
 8002e10:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 f8f3 	bl	8005000 <SEGGER_SYSVIEW_ShrinkId>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	203e      	movs	r0, #62	; 0x3e
 8002e28:	f001 fbd4 	bl	80045d4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d13d      	bne.n	8002eb0 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	3304      	adds	r3, #4
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fa6d 	bl	8002318 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 f83b 	bl	8004ebc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <xTaskGenericNotify+0x1d4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <xTaskGenericNotify+0x1d4>)
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <xTaskGenericNotify+0x1d8>)
 8002e66:	441a      	add	r2, r3
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f7ff f9f5 	bl	800225e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	617b      	str	r3, [r7, #20]
    }
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <xTaskGenericNotify+0x1dc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d907      	bls.n	8002eb0 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <xTaskGenericNotify+0x1e0>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002eb0:	f000 fa68 	bl	8003384 <vPortExitCritical>

        return xReturn;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3730      	adds	r7, #48	; 0x30
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200001b8 	.word	0x200001b8
 8002ec4:	200001bc 	.word	0x200001bc
 8002ec8:	200000f8 	.word	0x200000f8
 8002ecc:	200000f4 	.word	0x200000f4
 8002ed0:	e000ed04 	.word	0xe000ed04

08002ed4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002ede:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fa14 	bl	8002318 <uxListRemove>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10b      	bne.n	8002f0e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2201      	movs	r2, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f0c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d110      	bne.n	8002f38 <prvAddCurrentTaskToDelayedList+0x64>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	211b      	movs	r1, #27
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 f80c 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4820      	ldr	r0, [pc, #128]	; (8002fb4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002f32:	f7ff f994 	bl	800225e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f36:	e032      	b.n	8002f9e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d20f      	bcs.n	8002f70 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2104      	movs	r1, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 fff2 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3304      	adds	r3, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f7ff f99c 	bl	80022a6 <vListInsert>
}
 8002f6e:	e016      	b.n	8002f9e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2104      	movs	r1, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 ffe2 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3304      	adds	r3, #4
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f7ff f98c 	bl	80022a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d202      	bcs.n	8002f9e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002f98:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6013      	str	r3, [r2, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200001b8 	.word	0x200001b8
 8002fac:	200000f4 	.word	0x200000f4
 8002fb0:	200001bc 	.word	0x200001bc
 8002fb4:	200001a0 	.word	0x200001a0
 8002fb8:	20000188 	.word	0x20000188
 8002fbc:	20000184 	.word	0x20000184
 8002fc0:	200001d4 	.word	0x200001d4

08002fc4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3b04      	subs	r3, #4
 8002fe2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f023 0201 	bic.w	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3b04      	subs	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <pxPortInitialiseStack+0x64>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3b14      	subs	r3, #20
 8002ffe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b04      	subs	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f06f 0202 	mvn.w	r2, #2
 8003012:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3b20      	subs	r3, #32
 8003018:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	0800302d 	.word	0x0800302d

0800302c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <prvTaskExitError+0x54>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d00a      	beq.n	8003056 <prvTaskExitError+0x2a>
        __asm volatile
 8003040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003044:	f383 8811 	msr	BASEPRI, r3
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	60fb      	str	r3, [r7, #12]
    }
 8003052:	bf00      	nop
 8003054:	e7fe      	b.n	8003054 <prvTaskExitError+0x28>
        __asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	60bb      	str	r3, [r7, #8]
    }
 8003068:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800306a:	bf00      	nop
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0fc      	beq.n	800306c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	20000010 	.word	0x20000010
	...

08003090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <pxCurrentTCBConst2>)
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	6808      	ldr	r0, [r1, #0]
 8003096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309a:	f380 8809 	msr	PSP, r0
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f380 8811 	msr	BASEPRI, r0
 80030aa:	4770      	bx	lr
 80030ac:	f3af 8000 	nop.w

080030b0 <pxCurrentTCBConst2>:
 80030b0:	200000f4 	.word	0x200000f4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop

080030b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <prvPortStartFirstTask+0x24>)
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	6800      	ldr	r0, [r0, #0]
 80030be:	f380 8808 	msr	MSP, r0
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8814 	msr	CONTROL, r0
 80030ca:	b662      	cpsie	i
 80030cc:	b661      	cpsie	f
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	df00      	svc	0
 80030d8:	bf00      	nop
 80030da:	0000      	.short	0x0000
 80030dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop

080030e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030ea:	4b46      	ldr	r3, [pc, #280]	; (8003204 <xPortStartScheduler+0x120>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a46      	ldr	r2, [pc, #280]	; (8003208 <xPortStartScheduler+0x124>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10a      	bne.n	800310a <xPortStartScheduler+0x26>
        __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	613b      	str	r3, [r7, #16]
    }
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <xPortStartScheduler+0x120>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3f      	ldr	r2, [pc, #252]	; (800320c <xPortStartScheduler+0x128>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10a      	bne.n	800312a <xPortStartScheduler+0x46>
        __asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	60fb      	str	r3, [r7, #12]
    }
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <xPortStartScheduler+0x12c>)
 800312c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	22ff      	movs	r2, #255	; 0xff
 800313a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b31      	ldr	r3, [pc, #196]	; (8003214 <xPortStartScheduler+0x130>)
 8003150:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <xPortStartScheduler+0x134>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003158:	e009      	b.n	800316e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800315a:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <xPortStartScheduler+0x134>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3b01      	subs	r3, #1
 8003160:	4a2d      	ldr	r2, [pc, #180]	; (8003218 <xPortStartScheduler+0x134>)
 8003162:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b80      	cmp	r3, #128	; 0x80
 8003178:	d0ef      	beq.n	800315a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <xPortStartScheduler+0x134>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00a      	beq.n	800319c <xPortStartScheduler+0xb8>
        __asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	60bb      	str	r3, [r7, #8]
    }
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <xPortStartScheduler+0x134>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <xPortStartScheduler+0x134>)
 80031a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <xPortStartScheduler+0x134>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <xPortStartScheduler+0x134>)
 80031b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <xPortStartScheduler+0x138>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a17      	ldr	r2, [pc, #92]	; (800321c <xPortStartScheduler+0x138>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <xPortStartScheduler+0x138>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <xPortStartScheduler+0x138>)
 80031cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80031d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80031d2:	f000 f963 	bl	800349c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <xPortStartScheduler+0x13c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80031dc:	f000 f97a 	bl	80034d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <xPortStartScheduler+0x140>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <xPortStartScheduler+0x140>)
 80031e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80031ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80031ec:	f7ff ff64 	bl	80030b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80031f0:	f7ff fc30 	bl	8002a54 <vTaskSwitchContext>
    prvTaskExitError();
 80031f4:	f7ff ff1a 	bl	800302c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	410fc271 	.word	0x410fc271
 800320c:	410fc270 	.word	0x410fc270
 8003210:	e000e400 	.word	0xe000e400
 8003214:	200001e0 	.word	0x200001e0
 8003218:	200001e4 	.word	0x200001e4
 800321c:	e000ed20 	.word	0xe000ed20
 8003220:	20000010 	.word	0x20000010
 8003224:	e000ef34 	.word	0xe000ef34

08003228 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <vInitPrioGroupValue+0xe4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a37      	ldr	r2, [pc, #220]	; (8003310 <vInitPrioGroupValue+0xe8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10a      	bne.n	800324e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	613b      	str	r3, [r7, #16]
    }
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <vInitPrioGroupValue+0xe4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a30      	ldr	r2, [pc, #192]	; (8003314 <vInitPrioGroupValue+0xec>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10a      	bne.n	800326e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	60fb      	str	r3, [r7, #12]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800326e:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <vInitPrioGroupValue+0xf0>)
 8003270:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	22ff      	movs	r2, #255	; 0xff
 800327e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <vInitPrioGroupValue+0xf4>)
 8003294:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <vInitPrioGroupValue+0xf8>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800329c:	e009      	b.n	80032b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800329e:	4b20      	ldr	r3, [pc, #128]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d0ef      	beq.n	800329e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00a      	beq.n	80032e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	60bb      	str	r3, [r7, #8]
    }
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <vInitPrioGroupValue+0xf8>)
 80032f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000ed00 	.word	0xe000ed00
 8003310:	410fc271 	.word	0x410fc271
 8003314:	410fc270 	.word	0x410fc270
 8003318:	e000e400 	.word	0xe000e400
 800331c:	200001e0 	.word	0x200001e0
 8003320:	200001e4 	.word	0x200001e4

08003324 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
        __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	607b      	str	r3, [r7, #4]
    }
 800333c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <vPortEnterCritical+0x58>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	4a0d      	ldr	r2, [pc, #52]	; (800337c <vPortEnterCritical+0x58>)
 8003346:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <vPortEnterCritical+0x58>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10f      	bne.n	8003370 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <vPortEnterCritical+0x5c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <vPortEnterCritical+0x4c>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	603b      	str	r3, [r7, #0]
    }
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <vPortEnterCritical+0x4a>
    }
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000010 	.word	0x20000010
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <vPortExitCritical+0x50>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <vPortExitCritical+0x24>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <vPortExitCritical+0x50>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <vPortExitCritical+0x50>)
 80033b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <vPortExitCritical+0x50>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <vPortExitCritical+0x42>
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80033c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000010 	.word	0x20000010
	...

080033e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80033e0:	f3ef 8009 	mrs	r0, PSP
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <pxCurrentTCBConst>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f01e 0f10 	tst.w	lr, #16
 80033f0:	bf08      	it	eq
 80033f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80033f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fa:	6010      	str	r0, [r2, #0]
 80033fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003404:	f380 8811 	msr	BASEPRI, r0
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f7ff fb20 	bl	8002a54 <vTaskSwitchContext>
 8003414:	f04f 0000 	mov.w	r0, #0
 8003418:	f380 8811 	msr	BASEPRI, r0
 800341c:	bc09      	pop	{r0, r3}
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	6808      	ldr	r0, [r1, #0]
 8003422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003426:	f01e 0f10 	tst.w	lr, #16
 800342a:	bf08      	it	eq
 800342c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003430:	f380 8809 	msr	PSP, r0
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	f3af 8000 	nop.w

08003440 <pxCurrentTCBConst>:
 8003440:	200000f4 	.word	0x200000f4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop

08003448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
        __asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	607b      	str	r3, [r7, #4]
    }
 8003460:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003462:	f001 fc11 	bl	8004c88 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003466:	f7ff fa39 	bl	80028dc <xTaskIncrementTick>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003470:	f001 fc68 	bl	8004d44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <SysTick_Handler+0x50>)
 8003476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e001      	b.n	8003482 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800347e:	f001 fc45 	bl	8004d0c <SEGGER_SYSVIEW_RecordExitISR>
 8003482:	2300      	movs	r3, #0
 8003484:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f383 8811 	msr	BASEPRI, r3
    }
 800348c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000ed04 	.word	0xe000ed04

0800349c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <vPortSetupTimerInterrupt+0x28>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034a6:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <vPortSetupTimerInterrupt+0x2c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <vPortSetupTimerInterrupt+0x30>)
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <vPortSetupTimerInterrupt+0x34>)
 80034b0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <vPortSetupTimerInterrupt+0x28>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000e010 	.word	0xe000e010
 80034c8:	e000e018 	.word	0xe000e018
 80034cc:	e000e014 	.word	0xe000e014
 80034d0:	0001387f 	.word	0x0001387f

080034d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80034d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80034e4 <vPortEnableVFP+0x10>
 80034d8:	6801      	ldr	r1, [r0, #0]
 80034da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80034de:	6001      	str	r1, [r0, #0]
 80034e0:	4770      	bx	lr
 80034e2:	0000      	.short	0x0000
 80034e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop

080034ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80034f2:	f3ef 8305 	mrs	r3, IPSR
 80034f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d914      	bls.n	8003528 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <vPortValidateInterruptPriority+0x70>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <vPortValidateInterruptPriority+0x74>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	7afa      	ldrb	r2, [r7, #11]
 800350e:	429a      	cmp	r2, r3
 8003510:	d20a      	bcs.n	8003528 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	607b      	str	r3, [r7, #4]
    }
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <vPortValidateInterruptPriority+0x78>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <vPortValidateInterruptPriority+0x7c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d90a      	bls.n	800354e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	603b      	str	r3, [r7, #0]
    }
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <vPortValidateInterruptPriority+0x60>
    }
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e3f0 	.word	0xe000e3f0
 8003560:	200001e0 	.word	0x200001e0
 8003564:	e000ed0c 	.word	0xe000ed0c
 8003568:	200001e4 	.word	0x200001e4

0800356c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003578:	f7ff f8f0 	bl	800275c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800357c:	4b65      	ldr	r3, [pc, #404]	; (8003714 <pvPortMalloc+0x1a8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003584:	f000 f934 	bl	80037f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003588:	4b63      	ldr	r3, [pc, #396]	; (8003718 <pvPortMalloc+0x1ac>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 80a7 	bne.w	80036e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d02d      	beq.n	80035f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800359c:	2208      	movs	r2, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d227      	bcs.n	80035f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80035a8:	2208      	movs	r2, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d021      	beq.n	80035fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	3308      	adds	r3, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d214      	bcs.n	80035f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f023 0307 	bic.w	r3, r3, #7
 80035ce:	3308      	adds	r3, #8
 80035d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <pvPortMalloc+0x92>
        __asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	617b      	str	r3, [r7, #20]
    }
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035f6:	e002      	b.n	80035fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	e000      	b.n	8003600 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d06e      	beq.n	80036e4 <pvPortMalloc+0x178>
 8003606:	4b45      	ldr	r3, [pc, #276]	; (800371c <pvPortMalloc+0x1b0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d869      	bhi.n	80036e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003610:	4b43      	ldr	r3, [pc, #268]	; (8003720 <pvPortMalloc+0x1b4>)
 8003612:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <pvPortMalloc+0x1b4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800361a:	e004      	b.n	8003626 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d903      	bls.n	8003638 <pvPortMalloc+0xcc>
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f1      	bne.n	800361c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <pvPortMalloc+0x1a8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	429a      	cmp	r2, r3
 8003640:	d050      	beq.n	80036e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2208      	movs	r2, #8
 8003648:	4413      	add	r3, r2
 800364a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad2      	subs	r2, r2, r3
 800365c:	2308      	movs	r3, #8
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	429a      	cmp	r2, r3
 8003662:	d91f      	bls.n	80036a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <pvPortMalloc+0x120>
        __asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	613b      	str	r3, [r7, #16]
    }
 8003688:	bf00      	nop
 800368a:	e7fe      	b.n	800368a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800369e:	69b8      	ldr	r0, [r7, #24]
 80036a0:	f000 f908 	bl	80038b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <pvPortMalloc+0x1b0>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <pvPortMalloc+0x1b0>)
 80036b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <pvPortMalloc+0x1b0>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <pvPortMalloc+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d203      	bcs.n	80036c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036be:	4b17      	ldr	r3, [pc, #92]	; (800371c <pvPortMalloc+0x1b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <pvPortMalloc+0x1b8>)
 80036c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <pvPortMalloc+0x1ac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <pvPortMalloc+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	4a11      	ldr	r2, [pc, #68]	; (8003728 <pvPortMalloc+0x1bc>)
 80036e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80036e4:	f7ff f848 	bl	8002778 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <pvPortMalloc+0x19c>
        __asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60fb      	str	r3, [r7, #12]
    }
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <pvPortMalloc+0x19a>
    return pvReturn;
 8003708:	69fb      	ldr	r3, [r7, #28]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3728      	adds	r7, #40	; 0x28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20012df0 	.word	0x20012df0
 8003718:	20012e04 	.word	0x20012e04
 800371c:	20012df4 	.word	0x20012df4
 8003720:	20012de8 	.word	0x20012de8
 8003724:	20012df8 	.word	0x20012df8
 8003728:	20012dfc 	.word	0x20012dfc

0800372c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04d      	beq.n	80037da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800373e:	2308      	movs	r3, #8
 8003740:	425b      	negs	r3, r3
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4413      	add	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <vPortFree+0xb8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <vPortFree+0x44>
        __asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60fb      	str	r3, [r7, #12]
    }
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <vPortFree+0x62>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	60bb      	str	r3, [r7, #8]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <vPortFree+0xb8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01e      	beq.n	80037da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11a      	bne.n	80037da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <vPortFree+0xb8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80037b4:	f7fe ffd2 	bl	800275c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <vPortFree+0xbc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4413      	add	r3, r2
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <vPortFree+0xbc>)
 80037c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037c6:	6938      	ldr	r0, [r7, #16]
 80037c8:	f000 f874 	bl	80038b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <vPortFree+0xc0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a06      	ldr	r2, [pc, #24]	; (80037ec <vPortFree+0xc0>)
 80037d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80037d6:	f7fe ffcf 	bl	8002778 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20012e04 	.word	0x20012e04
 80037e8:	20012df4 	.word	0x20012df4
 80037ec:	20012e00 	.word	0x20012e00

080037f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <prvHeapInit+0xac>)
 80037fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3307      	adds	r3, #7
 800380e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0307 	bic.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <prvHeapInit+0xac>)
 8003820:	4413      	add	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003828:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <prvHeapInit+0xb0>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <prvHeapInit+0xb0>)
 8003830:	2200      	movs	r2, #0
 8003832:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800383c:	2208      	movs	r2, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0307 	bic.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <prvHeapInit+0xb4>)
 8003850:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <prvHeapInit+0xb4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <prvHeapInit+0xb4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <prvHeapInit+0xb4>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <prvHeapInit+0xb8>)
 800387e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <prvHeapInit+0xbc>)
 8003886:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <prvHeapInit+0xc0>)
 800388a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	200001e8 	.word	0x200001e8
 80038a0:	20012de8 	.word	0x20012de8
 80038a4:	20012df0 	.word	0x20012df0
 80038a8:	20012df8 	.word	0x20012df8
 80038ac:	20012df4 	.word	0x20012df4
 80038b0:	20012e04 	.word	0x20012e04

080038b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <prvInsertBlockIntoFreeList+0xac>)
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e002      	b.n	80038c8 <prvInsertBlockIntoFreeList+0x14>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d8f7      	bhi.n	80038c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d108      	bne.n	80038f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	441a      	add	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d118      	bne.n	800393c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <prvInsertBlockIntoFreeList+0xb0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d00d      	beq.n	8003932 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	441a      	add	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e008      	b.n	8003944 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <prvInsertBlockIntoFreeList+0xb0>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e003      	b.n	8003944 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d002      	beq.n	8003952 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20012de8 	.word	0x20012de8
 8003964:	20012df0 	.word	0x20012df0

08003968 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <_cbSendSystemDesc+0x14>)
 800396e:	f001 f935 	bl	8004bdc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003972:	4803      	ldr	r0, [pc, #12]	; (8003980 <_cbSendSystemDesc+0x18>)
 8003974:	f001 f932 	bl	8004bdc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	080062e4 	.word	0x080062e4
 8003980:	0800631c 	.word	0x0800631c

08003984 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <SEGGER_SYSVIEW_Conf+0x1c>)
 800398a:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800398c:	4906      	ldr	r1, [pc, #24]	; (80039a8 <SEGGER_SYSVIEW_Conf+0x24>)
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <SEGGER_SYSVIEW_Conf+0x24>)
 8003990:	f000 fd18 	bl	80043c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003994:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003998:	f000 fd58 	bl	800444c <SEGGER_SYSVIEW_SetRAMBase>
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08003969 	.word	0x08003969
 80039a4:	080063ec 	.word	0x080063ec
 80039a8:	04c4b400 	.word	0x04c4b400

080039ac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	e033      	b.n	8003a20 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80039b8:	491e      	ldr	r1, [pc, #120]	; (8003a34 <_cbSendTaskList+0x88>)
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	491a      	ldr	r1, [pc, #104]	; (8003a34 <_cbSendTaskList+0x88>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3304      	adds	r3, #4
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	4c16      	ldr	r4, [pc, #88]	; (8003a34 <_cbSendTaskList+0x88>)
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4423      	add	r3, r4
 80039e8:	3308      	adds	r3, #8
 80039ea:	681c      	ldr	r4, [r3, #0]
 80039ec:	4d11      	ldr	r5, [pc, #68]	; (8003a34 <_cbSendTaskList+0x88>)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	442b      	add	r3, r5
 80039fa:	330c      	adds	r3, #12
 80039fc:	681d      	ldr	r5, [r3, #0]
 80039fe:	4e0d      	ldr	r6, [pc, #52]	; (8003a34 <_cbSendTaskList+0x88>)
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4433      	add	r3, r6
 8003a0c:	3310      	adds	r3, #16
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	462b      	mov	r3, r5
 8003a14:	4622      	mov	r2, r4
 8003a16:	f000 f8bd 	bl	8003b94 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <_cbSendTaskList+0x8c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3c6      	bcc.n	80039b8 <_cbSendTaskList+0xc>
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a34:	20012e08 	.word	0x20012e08
 8003a38:	20012ea8 	.word	0x20012ea8

08003a3c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003a44:	f7fe ff38 	bl	80028b8 <xTaskGetTickCountFromISR>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	469a      	mov	sl, r3
 8003a4e:	4693      	mov	fp, r2
 8003a50:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	f04f 0a00 	mov.w	sl, #0
 8003a60:	f04f 0b00 	mov.w	fp, #0
 8003a64:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003a68:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003a6c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003a70:	4652      	mov	r2, sl
 8003a72:	465b      	mov	r3, fp
 8003a74:	1a14      	subs	r4, r2, r0
 8003a76:	eb63 0501 	sbc.w	r5, r3, r1
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	00ab      	lsls	r3, r5, #2
 8003a84:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a88:	00a2      	lsls	r2, r4, #2
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	eb14 0800 	adds.w	r8, r4, r0
 8003a92:	eb45 0901 	adc.w	r9, r5, r1
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aaa:	4690      	mov	r8, r2
 8003aac:	4699      	mov	r9, r3
 8003aae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003ac4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003ad2:	2205      	movs	r2, #5
 8003ad4:	492b      	ldr	r1, [pc, #172]	; (8003b84 <SYSVIEW_AddTask+0xc0>)
 8003ad6:	68b8      	ldr	r0, [r7, #8]
 8003ad8:	f001 fbfe 	bl	80052d8 <memcmp>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d04b      	beq.n	8003b7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003ae2:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b07      	cmp	r3, #7
 8003ae8:	d903      	bls.n	8003af2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003aea:	4828      	ldr	r0, [pc, #160]	; (8003b8c <SYSVIEW_AddTask+0xc8>)
 8003aec:	f001 fb74 	bl	80051d8 <SEGGER_SYSVIEW_Warn>
    return;
 8003af0:	e044      	b.n	8003b7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003af2:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4926      	ldr	r1, [pc, #152]	; (8003b90 <SYSVIEW_AddTask+0xcc>)
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4921      	ldr	r1, [pc, #132]	; (8003b90 <SYSVIEW_AddTask+0xcc>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3304      	adds	r3, #4
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	491b      	ldr	r1, [pc, #108]	; (8003b90 <SYSVIEW_AddTask+0xcc>)
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4916      	ldr	r1, [pc, #88]	; (8003b90 <SYSVIEW_AddTask+0xcc>)
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	330c      	adds	r3, #12
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4910      	ldr	r1, [pc, #64]	; (8003b90 <SYSVIEW_AddTask+0xcc>)
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3310      	adds	r3, #16
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <SYSVIEW_AddTask+0xc4>)
 8003b66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f80e 	bl	8003b94 <SYSVIEW_SendTaskInfo>
 8003b78:	e000      	b.n	8003b7c <SYSVIEW_AddTask+0xb8>
    return;
 8003b7a:	bf00      	nop

}
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	0800632c 	.word	0x0800632c
 8003b88:	20012ea8 	.word	0x20012ea8
 8003b8c:	08006334 	.word	0x08006334
 8003b90:	20012e08 	.word	0x20012e08

08003b94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	2214      	movs	r2, #20
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 fbb2 	bl	8005314 <memset>
  TaskInfo.TaskID     = TaskID;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 ff0f 	bl	80049ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003bce:	bf00      	nop
 8003bd0:	3728      	adds	r7, #40	; 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <_DoInit+0x98>)
 8003be0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2203      	movs	r2, #3
 8003be6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	; (8003c74 <_DoInit+0x9c>)
 8003bf2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <_DoInit+0xa0>)
 8003bf8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c00:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <_DoInit+0x9c>)
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <_DoInit+0xa4>)
 8003c1e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2210      	movs	r2, #16
 8003c24:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3307      	adds	r3, #7
 8003c3c:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <_DoInit+0xa8>)
 8003c3e:	6810      	ldr	r0, [r2, #0]
 8003c40:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c42:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a0e      	ldr	r2, [pc, #56]	; (8003c84 <_DoInit+0xac>)
 8003c4a:	6810      	ldr	r0, [r2, #0]
 8003c4c:	6018      	str	r0, [r3, #0]
 8003c4e:	8891      	ldrh	r1, [r2, #4]
 8003c50:	7992      	ldrb	r2, [r2, #6]
 8003c52:	8099      	strh	r1, [r3, #4]
 8003c54:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c56:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c60:	f3bf 8f5f 	dmb	sy
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	20012eac 	.word	0x20012eac
 8003c74:	08006384 	.word	0x08006384
 8003c78:	20012f54 	.word	0x20012f54
 8003c7c:	20013354 	.word	0x20013354
 8003c80:	08006390 	.word	0x08006390
 8003c84:	08006394 	.word	0x08006394

08003c88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c94:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003ca2:	f7ff ff99 	bl	8003bd8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3360      	adds	r3, #96	; 0x60
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <SEGGER_RTT_ReadNoLock+0x108>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d92b      	bls.n	8003d2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bf28      	it	cs
 8003ce6:	4613      	movcs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	4413      	add	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	6939      	ldr	r1, [r7, #16]
 8003cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cfa:	f001 fafd 	bl	80052f8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d101      	bne.n	8003d2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	bf28      	it	cs
 8003d3c:	4613      	movcs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d019      	beq.n	8003d7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	4413      	add	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d56:	f001 facf 	bl	80052f8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	4413      	add	r3, r2
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4413      	add	r3, r2
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3730      	adds	r7, #48	; 0x30
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20012eac 	.word	0x20012eac

08003d94 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003db0:	f7ff ff12 	bl	8003bd8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003db4:	f3ef 8311 	mrs	r3, BASEPRI
 8003db8:	f04f 0120 	mov.w	r1, #32
 8003dbc:	f381 8811 	msr	BASEPRI, r1
 8003dc0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dc2:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003dc4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003dca:	6939      	ldr	r1, [r7, #16]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	3304      	adds	r3, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	dbeb      	blt.n	8003dca <SEGGER_RTT_AllocUpBuffer+0x36>
 8003df2:	e000      	b.n	8003df6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003df4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	da3f      	bge.n	8003e80 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e00:	6939      	ldr	r1, [r7, #16]
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	440b      	add	r3, r1
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e14:	6939      	ldr	r1, [r7, #16]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	3304      	adds	r3, #4
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e2a:	6939      	ldr	r1, [r7, #16]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	3320      	adds	r3, #32
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e3e:	6939      	ldr	r1, [r7, #16]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3328      	adds	r3, #40	; 0x28
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003e52:	6939      	ldr	r1, [r7, #16]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	4613      	mov	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	3324      	adds	r3, #36	; 0x24
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e66:	6939      	ldr	r1, [r7, #16]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	440b      	add	r3, r1
 8003e74:	332c      	adds	r3, #44	; 0x2c
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e7a:	f3bf 8f5f 	dmb	sy
 8003e7e:	e002      	b.n	8003e86 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
 8003e84:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20012eac 	.word	0x20012eac

08003e9c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003eaa:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003eb8:	f7ff fe8e 	bl	8003bd8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003ebe:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d24d      	bcs.n	8003f68 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed0:	f04f 0120 	mov.w	r1, #32
 8003ed4:	f381 8811 	msr	BASEPRI, r1
 8003ed8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d031      	beq.n	8003f44 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	3364      	adds	r3, #100	; 0x64
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003f08:	6979      	ldr	r1, [r7, #20]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	3368      	adds	r3, #104	; 0x68
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	3370      	adds	r3, #112	; 0x70
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	336c      	adds	r3, #108	; 0x6c
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	3374      	adds	r3, #116	; 0x74
 8003f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f56:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f58:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e002      	b.n	8003f6e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20012eac 	.word	0x20012eac

08003f7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f8c:	e002      	b.n	8003f94 <_EncodeStr+0x18>
    Len++;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3301      	adds	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f6      	bne.n	8003f8e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d901      	bls.n	8003fac <_EncodeStr+0x30>
    Len = Limit;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2bfe      	cmp	r3, #254	; 0xfe
 8003fb0:	d806      	bhi.n	8003fc0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	60fa      	str	r2, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e011      	b.n	8003fe4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	60fa      	str	r2, [r7, #12]
 8003fc6:	22ff      	movs	r2, #255	; 0xff
 8003fc8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	60fa      	str	r2, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	0a19      	lsrs	r1, r3, #8
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	60fa      	str	r2, [r7, #12]
 8003fe0:	b2ca      	uxtb	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003fe8:	e00a      	b.n	8004000 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	1c53      	adds	r3, r2, #1
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	60f9      	str	r1, [r7, #12]
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	701a      	strb	r2, [r3, #0]
    n++;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3f0      	bcc.n	8003fea <_EncodeStr+0x6e>
  }
  return pPayload;
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	4618      	mov	r0, r3
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <_HandleIncomingPacket+0xe0>)
 8004038:	7e1b      	ldrb	r3, [r3, #24]
 800403a:	4618      	mov	r0, r3
 800403c:	1cfb      	adds	r3, r7, #3
 800403e:	2201      	movs	r2, #1
 8004040:	4619      	mov	r1, r3
 8004042:	f7ff fe21 	bl	8003c88 <SEGGER_RTT_ReadNoLock>
 8004046:	4603      	mov	r3, r0
 8004048:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	dd54      	ble.n	80040fa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d032      	beq.n	80040bc <_HandleIncomingPacket+0x8c>
 8004056:	2b80      	cmp	r3, #128	; 0x80
 8004058:	dc42      	bgt.n	80040e0 <_HandleIncomingPacket+0xb0>
 800405a:	2b07      	cmp	r3, #7
 800405c:	dc16      	bgt.n	800408c <_HandleIncomingPacket+0x5c>
 800405e:	2b00      	cmp	r3, #0
 8004060:	dd3e      	ble.n	80040e0 <_HandleIncomingPacket+0xb0>
 8004062:	3b01      	subs	r3, #1
 8004064:	2b06      	cmp	r3, #6
 8004066:	d83b      	bhi.n	80040e0 <_HandleIncomingPacket+0xb0>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <_HandleIncomingPacket+0x40>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004093 	.word	0x08004093
 8004074:	08004099 	.word	0x08004099
 8004078:	0800409f 	.word	0x0800409f
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ab 	.word	0x080040ab
 8004084:	080040b1 	.word	0x080040b1
 8004088:	080040b7 	.word	0x080040b7
 800408c:	2b7f      	cmp	r3, #127	; 0x7f
 800408e:	d036      	beq.n	80040fe <_HandleIncomingPacket+0xce>
 8004090:	e026      	b.n	80040e0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004092:	f000 fb31 	bl	80046f8 <SEGGER_SYSVIEW_Start>
      break;
 8004096:	e037      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004098:	f000 fbe8 	bl	800486c <SEGGER_SYSVIEW_Stop>
      break;
 800409c:	e034      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800409e:	f000 fdc1 	bl	8004c24 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040a2:	e031      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040a4:	f000 fd86 	bl	8004bb4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80040a8:	e02e      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80040aa:	f000 fc05 	bl	80048b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80040ae:	e02b      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80040b0:	f001 f854 	bl	800515c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80040b4:	e028      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80040b6:	f001 f833 	bl	8005120 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80040ba:	e025      	b.n	8004108 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <_HandleIncomingPacket+0xe0>)
 80040be:	7e1b      	ldrb	r3, [r3, #24]
 80040c0:	4618      	mov	r0, r3
 80040c2:	1cfb      	adds	r3, r7, #3
 80040c4:	2201      	movs	r2, #1
 80040c6:	4619      	mov	r1, r3
 80040c8:	f7ff fdde 	bl	8003c88 <SEGGER_RTT_ReadNoLock>
 80040cc:	4603      	mov	r3, r0
 80040ce:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	dd15      	ble.n	8004102 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 ffa1 	bl	8005020 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80040de:	e010      	b.n	8004102 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	b25b      	sxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da0e      	bge.n	8004106 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <_HandleIncomingPacket+0xe0>)
 80040ea:	7e1b      	ldrb	r3, [r3, #24]
 80040ec:	4618      	mov	r0, r3
 80040ee:	1cfb      	adds	r3, r7, #3
 80040f0:	2201      	movs	r2, #1
 80040f2:	4619      	mov	r1, r3
 80040f4:	f7ff fdc8 	bl	8003c88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80040f8:	e005      	b.n	8004106 <_HandleIncomingPacket+0xd6>
    }
  }
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <_HandleIncomingPacket+0xd8>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <_HandleIncomingPacket+0xd8>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <_HandleIncomingPacket+0xd8>
      break;
 8004106:	bf00      	nop
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	2001436c 	.word	0x2001436c

08004114 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800411a:	2301      	movs	r3, #1
 800411c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	3301      	adds	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	e00b      	b.n	8004148 <_TrySendOverflowPacket+0x34>
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	b2da      	uxtb	r2, r3
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	1c59      	adds	r1, r3, #1
 8004138:	62f9      	str	r1, [r7, #44]	; 0x2c
 800413a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	09db      	lsrs	r3, r3, #7
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2b7f      	cmp	r3, #127	; 0x7f
 800414c:	d8f0      	bhi.n	8004130 <_TrySendOverflowPacket+0x1c>
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <_TrySendOverflowPacket+0xe0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	623b      	str	r3, [r7, #32]
 8004176:	e00b      	b.n	8004190 <_TrySendOverflowPacket+0x7c>
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	1c59      	adds	r1, r3, #1
 8004180:	6279      	str	r1, [r7, #36]	; 0x24
 8004182:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	09db      	lsrs	r3, r3, #7
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b7f      	cmp	r3, #127	; 0x7f
 8004194:	d8f0      	bhi.n	8004178 <_TrySendOverflowPacket+0x64>
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	627a      	str	r2, [r7, #36]	; 0x24
 800419c:	6a3a      	ldr	r2, [r7, #32]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	4618      	mov	r0, r3
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7fc f80a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041bc:	4603      	mov	r3, r0
 80041be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e004      	b.n	80041e4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	3301      	adds	r3, #1
 80041e0:	4a03      	ldr	r2, [pc, #12]	; (80041f0 <_TrySendOverflowPacket+0xdc>)
 80041e2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80041e4:	693b      	ldr	r3, [r7, #16]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3730      	adds	r7, #48	; 0x30
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2001436c 	.word	0x2001436c
 80041f4:	e0001004 	.word	0xe0001004

080041f8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004204:	4b6c      	ldr	r3, [pc, #432]	; (80043b8 <_SendPacket+0x1c0>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d010      	beq.n	800422e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800420c:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <_SendPacket+0x1c0>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80a3 	beq.w	800435c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004216:	4b68      	ldr	r3, [pc, #416]	; (80043b8 <_SendPacket+0x1c0>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d109      	bne.n	8004232 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800421e:	f7ff ff79 	bl	8004114 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004222:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <_SendPacket+0x1c0>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	f040 809a 	bne.w	8004360 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800422c:	e001      	b.n	8004232 <_SendPacket+0x3a>
    goto Send;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <_SendPacket+0x3c>
Send:
 8004232:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b1f      	cmp	r3, #31
 8004238:	d809      	bhi.n	800424e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800423a:	4b5f      	ldr	r3, [pc, #380]	; (80043b8 <_SendPacket+0x1c0>)
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 808b 	bne.w	8004364 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b17      	cmp	r3, #23
 8004252:	d807      	bhi.n	8004264 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b01      	subs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e03d      	b.n	80042e0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b7f      	cmp	r3, #127	; 0x7f
 8004270:	d912      	bls.n	8004298 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	09da      	lsrs	r2, r3, #7
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3b01      	subs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	3a01      	subs	r2, #1
 800428a:	60fa      	str	r2, [r7, #12]
 800428c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e006      	b.n	80042a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3b01      	subs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b7f      	cmp	r3, #127	; 0x7f
 80042aa:	d912      	bls.n	80042d2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	09da      	lsrs	r2, r3, #7
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	3a01      	subs	r2, #1
 80042c4:	60fa      	str	r2, [r7, #12]
 80042c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e006      	b.n	80042e0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <_SendPacket+0x1c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80042e6:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <_SendPacket+0x1c0>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	e00b      	b.n	8004312 <_SendPacket+0x11a>
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	1c59      	adds	r1, r3, #1
 8004302:	6279      	str	r1, [r7, #36]	; 0x24
 8004304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	09db      	lsrs	r3, r3, #7
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2b7f      	cmp	r3, #127	; 0x7f
 8004316:	d8f0      	bhi.n	80042fa <_SendPacket+0x102>
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	627a      	str	r2, [r7, #36]	; 0x24
 800431e:	6a3a      	ldr	r2, [r7, #32]
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <_SendPacket+0x1c0>)
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	4618      	mov	r0, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	461a      	mov	r2, r3
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	f7fb ff4a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800433c:	4603      	mov	r3, r0
 800433e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <_SendPacket+0x1c0>)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	60d3      	str	r3, [r2, #12]
 800434c:	e00b      	b.n	8004366 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <_SendPacket+0x1c0>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	b2da      	uxtb	r2, r3
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <_SendPacket+0x1c0>)
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	e004      	b.n	8004366 <_SendPacket+0x16e>
    goto SendDone;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <_SendPacket+0x16e>
      goto SendDone;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <_SendPacket+0x16e>
      goto SendDone;
 8004364:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <_SendPacket+0x1c0>)
 8004368:	7e1b      	ldrb	r3, [r3, #24]
 800436a:	4619      	mov	r1, r3
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <_SendPacket+0x1c8>)
 800436e:	460b      	mov	r3, r1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	440b      	add	r3, r1
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	336c      	adds	r3, #108	; 0x6c
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b0e      	ldr	r3, [pc, #56]	; (80043b8 <_SendPacket+0x1c0>)
 800437e:	7e1b      	ldrb	r3, [r3, #24]
 8004380:	4618      	mov	r0, r3
 8004382:	490f      	ldr	r1, [pc, #60]	; (80043c0 <_SendPacket+0x1c8>)
 8004384:	4603      	mov	r3, r0
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4403      	add	r3, r0
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	3370      	adds	r3, #112	; 0x70
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d00b      	beq.n	80043ae <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004396:	4b08      	ldr	r3, [pc, #32]	; (80043b8 <_SendPacket+0x1c0>)
 8004398:	789b      	ldrb	r3, [r3, #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <_SendPacket+0x1c0>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80043a4:	f7ff fe44 	bl	8004030 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <_SendPacket+0x1c0>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80043ae:	bf00      	nop
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2001436c 	.word	0x2001436c
 80043bc:	e0001004 	.word	0xe0001004
 80043c0:	20012eac 	.word	0x20012eac

080043c4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80043d2:	2300      	movs	r3, #0
 80043d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043d8:	4917      	ldr	r1, [pc, #92]	; (8004438 <SEGGER_SYSVIEW_Init+0x74>)
 80043da:	4818      	ldr	r0, [pc, #96]	; (800443c <SEGGER_SYSVIEW_Init+0x78>)
 80043dc:	f7ff fcda 	bl	8003d94 <SEGGER_RTT_AllocUpBuffer>
 80043e0:	4603      	mov	r3, r0
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 80043e6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 80043ea:	785a      	ldrb	r2, [r3, #1]
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 80043ee:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 80043f2:	7e1b      	ldrb	r3, [r3, #24]
 80043f4:	4618      	mov	r0, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2308      	movs	r3, #8
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <SEGGER_SYSVIEW_Init+0x80>)
 80043fe:	490f      	ldr	r1, [pc, #60]	; (800443c <SEGGER_SYSVIEW_Init+0x78>)
 8004400:	f7ff fd4c 	bl	8003e9c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <SEGGER_SYSVIEW_Init+0x84>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 8004410:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004412:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004418:	4a09      	ldr	r2, [pc, #36]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004424:	4a06      	ldr	r2, [pc, #24]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SEGGER_SYSVIEW_Init+0x7c>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20013364 	.word	0x20013364
 800443c:	0800639c 	.word	0x0800639c
 8004440:	2001436c 	.word	0x2001436c
 8004444:	20014364 	.word	0x20014364
 8004448:	e0001004 	.word	0xe0001004

0800444c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004454:	4a04      	ldr	r2, [pc, #16]	; (8004468 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6113      	str	r3, [r2, #16]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	2001436c 	.word	0x2001436c

0800446c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004474:	f3ef 8311 	mrs	r3, BASEPRI
 8004478:	f04f 0120 	mov.w	r1, #32
 800447c:	f381 8811 	msr	BASEPRI, r1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4808      	ldr	r0, [pc, #32]	; (80044a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004484:	f7ff fdc7 	bl	8004016 <_PreparePacket>
 8004488:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f7ff feb2 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f383 8811 	msr	BASEPRI, r3
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	2001439c 	.word	0x2001439c

080044a8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044b2:	f3ef 8311 	mrs	r3, BASEPRI
 80044b6:	f04f 0120 	mov.w	r1, #32
 80044ba:	f381 8811 	msr	BASEPRI, r1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	4816      	ldr	r0, [pc, #88]	; (800451c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80044c2:	f7ff fda8 	bl	8004016 <_PreparePacket>
 80044c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	e00b      	b.n	80044ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	61f9      	str	r1, [r7, #28]
 80044e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	09db      	lsrs	r3, r3, #7
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b7f      	cmp	r3, #127	; 0x7f
 80044f2:	d8f0      	bhi.n	80044d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	61fa      	str	r2, [r7, #28]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	6938      	ldr	r0, [r7, #16]
 800450a:	f7ff fe75 	bl	80041f8 <_SendPacket>
  RECORD_END();
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f383 8811 	msr	BASEPRI, r3
}
 8004514:	bf00      	nop
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	2001439c 	.word	0x2001439c

08004520 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800452c:	f3ef 8311 	mrs	r3, BASEPRI
 8004530:	f04f 0120 	mov.w	r1, #32
 8004534:	f381 8811 	msr	BASEPRI, r1
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	4825      	ldr	r0, [pc, #148]	; (80045d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800453c:	f7ff fd6b 	bl	8004016 <_PreparePacket>
 8004540:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
 800454e:	e00b      	b.n	8004568 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	b2da      	uxtb	r2, r3
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	62f9      	str	r1, [r7, #44]	; 0x2c
 800455a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	09db      	lsrs	r3, r3, #7
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b7f      	cmp	r3, #127	; 0x7f
 800456c:	d8f0      	bhi.n	8004550 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	e00b      	b.n	80045a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	6279      	str	r1, [r7, #36]	; 0x24
 8004592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	09db      	lsrs	r3, r3, #7
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2b7f      	cmp	r3, #127	; 0x7f
 80045a4:	d8f0      	bhi.n	8004588 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	627a      	str	r2, [r7, #36]	; 0x24
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	6979      	ldr	r1, [r7, #20]
 80045ba:	69b8      	ldr	r0, [r7, #24]
 80045bc:	f7ff fe1c 	bl	80041f8 <_SendPacket>
  RECORD_END();
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f383 8811 	msr	BASEPRI, r3
}
 80045c6:	bf00      	nop
 80045c8:	3730      	adds	r7, #48	; 0x30
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	2001439c 	.word	0x2001439c

080045d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b090      	sub	sp, #64	; 0x40
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045e2:	f3ef 8311 	mrs	r3, BASEPRI
 80045e6:	f04f 0120 	mov.w	r1, #32
 80045ea:	f381 8811 	msr	BASEPRI, r1
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	4840      	ldr	r0, [pc, #256]	; (80046f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80045f2:	f7ff fd10 	bl	8004016 <_PreparePacket>
 80045f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38
 8004604:	e00b      	b.n	800461e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	b2da      	uxtb	r2, r3
 800460a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	09db      	lsrs	r3, r3, #7
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b7f      	cmp	r3, #127	; 0x7f
 8004622:	d8f0      	bhi.n	8004606 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800462a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	e00b      	b.n	8004656 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	b2da      	uxtb	r2, r3
 8004642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004644:	1c59      	adds	r1, r3, #1
 8004646:	6379      	str	r1, [r7, #52]	; 0x34
 8004648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	09db      	lsrs	r3, r3, #7
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2b7f      	cmp	r3, #127	; 0x7f
 800465a:	d8f0      	bhi.n	800463e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	637a      	str	r2, [r7, #52]	; 0x34
 8004662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
 8004674:	e00b      	b.n	800468e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	b2da      	uxtb	r2, r3
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	09db      	lsrs	r3, r3, #7
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b7f      	cmp	r3, #127	; 0x7f
 8004692:	d8f0      	bhi.n	8004676 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
 80046a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	e00b      	b.n	80046c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	6279      	str	r1, [r7, #36]	; 0x24
 80046b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	623b      	str	r3, [r7, #32]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ca:	d8f0      	bhi.n	80046ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	627a      	str	r2, [r7, #36]	; 0x24
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	69b8      	ldr	r0, [r7, #24]
 80046e2:	f7ff fd89 	bl	80041f8 <_SendPacket>
  RECORD_END();
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	f383 8811 	msr	BASEPRI, r3
}
 80046ec:	bf00      	nop
 80046ee:	3740      	adds	r7, #64	; 0x40
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2001439c 	.word	0x2001439c

080046f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046fe:	4b58      	ldr	r3, [pc, #352]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004704:	f3ef 8311 	mrs	r3, BASEPRI
 8004708:	f04f 0120 	mov.w	r1, #32
 800470c:	f381 8811 	msr	BASEPRI, r1
 8004710:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004712:	4b53      	ldr	r3, [pc, #332]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 8004714:	785b      	ldrb	r3, [r3, #1]
 8004716:	220a      	movs	r2, #10
 8004718:	4952      	ldr	r1, [pc, #328]	; (8004864 <SEGGER_SYSVIEW_Start+0x16c>)
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fd58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004726:	200a      	movs	r0, #10
 8004728:	f7ff fea0 	bl	800446c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800472c:	f3ef 8311 	mrs	r3, BASEPRI
 8004730:	f04f 0120 	mov.w	r1, #32
 8004734:	f381 8811 	msr	BASEPRI, r1
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	484b      	ldr	r0, [pc, #300]	; (8004868 <SEGGER_SYSVIEW_Start+0x170>)
 800473c:	f7ff fc6b 	bl	8004016 <_PreparePacket>
 8004740:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800474a:	4b45      	ldr	r3, [pc, #276]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004750:	e00b      	b.n	800476a <SEGGER_SYSVIEW_Start+0x72>
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	b2da      	uxtb	r2, r3
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800475c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	09db      	lsrs	r3, r3, #7
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2b7f      	cmp	r3, #127	; 0x7f
 800476e:	d8f0      	bhi.n	8004752 <SEGGER_SYSVIEW_Start+0x5a>
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	623b      	str	r3, [r7, #32]
 800478a:	e00b      	b.n	80047a4 <SEGGER_SYSVIEW_Start+0xac>
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	6279      	str	r1, [r7, #36]	; 0x24
 8004796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	09db      	lsrs	r3, r3, #7
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2b7f      	cmp	r3, #127	; 0x7f
 80047a8:	d8f0      	bhi.n	800478c <SEGGER_SYSVIEW_Start+0x94>
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	627a      	str	r2, [r7, #36]	; 0x24
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	e00b      	b.n	80047de <SEGGER_SYSVIEW_Start+0xe6>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	61f9      	str	r1, [r7, #28]
 80047d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	09db      	lsrs	r3, r3, #7
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b7f      	cmp	r3, #127	; 0x7f
 80047e2:	d8f0      	bhi.n	80047c6 <SEGGER_SYSVIEW_Start+0xce>
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	61fa      	str	r2, [r7, #28]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	e00b      	b.n	8004816 <SEGGER_SYSVIEW_Start+0x11e>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1c59      	adds	r1, r3, #1
 8004806:	6179      	str	r1, [r7, #20]
 8004808:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b7f      	cmp	r3, #127	; 0x7f
 800481a:	d8f0      	bhi.n	80047fe <SEGGER_SYSVIEW_Start+0x106>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	617a      	str	r2, [r7, #20]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800482c:	2218      	movs	r2, #24
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fce1 	bl	80041f8 <_SendPacket>
      RECORD_END();
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800483c:	4b08      	ldr	r3, [pc, #32]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <SEGGER_SYSVIEW_Start+0x168>)
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800484a:	f000 f9eb 	bl	8004c24 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800484e:	f000 f9b1 	bl	8004bb4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004852:	f000 fc83 	bl	800515c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004856:	bf00      	nop
 8004858:	3730      	adds	r7, #48	; 0x30
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2001436c 	.word	0x2001436c
 8004864:	080063f4 	.word	0x080063f4
 8004868:	2001439c 	.word	0x2001439c

0800486c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004872:	f3ef 8311 	mrs	r3, BASEPRI
 8004876:	f04f 0120 	mov.w	r1, #32
 800487a:	f381 8811 	msr	BASEPRI, r1
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	480b      	ldr	r0, [pc, #44]	; (80048b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004882:	f7ff fbc8 	bl	8004016 <_PreparePacket>
 8004886:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004890:	220b      	movs	r2, #11
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	f7ff fcaf 	bl	80041f8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f383 8811 	msr	BASEPRI, r3
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2001439c 	.word	0x2001439c
 80048b4:	2001436c 	.word	0x2001436c

080048b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08c      	sub	sp, #48	; 0x30
 80048bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048be:	f3ef 8311 	mrs	r3, BASEPRI
 80048c2:	f04f 0120 	mov.w	r1, #32
 80048c6:	f381 8811 	msr	BASEPRI, r1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	4845      	ldr	r0, [pc, #276]	; (80049e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048ce:	f7ff fba2 	bl	8004016 <_PreparePacket>
 80048d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e2:	e00b      	b.n	80048fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	1c59      	adds	r1, r3, #1
 80048ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	09db      	lsrs	r3, r3, #7
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004900:	d8f0      	bhi.n	80048e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	623b      	str	r3, [r7, #32]
 800491c:	e00b      	b.n	8004936 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1c59      	adds	r1, r3, #1
 8004926:	6279      	str	r1, [r7, #36]	; 0x24
 8004928:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	09db      	lsrs	r3, r3, #7
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2b7f      	cmp	r3, #127	; 0x7f
 800493a:	d8f0      	bhi.n	800491e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	627a      	str	r2, [r7, #36]	; 0x24
 8004942:	6a3a      	ldr	r2, [r7, #32]
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e00b      	b.n	8004970 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	61f9      	str	r1, [r7, #28]
 8004962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	09db      	lsrs	r3, r3, #7
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b7f      	cmp	r3, #127	; 0x7f
 8004974:	d8f0      	bhi.n	8004958 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	61fa      	str	r2, [r7, #28]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e00b      	b.n	80049a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	6179      	str	r1, [r7, #20]
 800499a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	09db      	lsrs	r3, r3, #7
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b7f      	cmp	r3, #127	; 0x7f
 80049ac:	d8f0      	bhi.n	8004990 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	617a      	str	r2, [r7, #20]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049be:	2218      	movs	r2, #24
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	68b8      	ldr	r0, [r7, #8]
 80049c4:	f7ff fc18 	bl	80041f8 <_SendPacket>
  RECORD_END();
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	4798      	blx	r3
  }
}
 80049dc:	bf00      	nop
 80049de:	3730      	adds	r7, #48	; 0x30
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	2001439c 	.word	0x2001439c
 80049e8:	2001436c 	.word	0x2001436c

080049ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b092      	sub	sp, #72	; 0x48
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049f4:	f3ef 8311 	mrs	r3, BASEPRI
 80049f8:	f04f 0120 	mov.w	r1, #32
 80049fc:	f381 8811 	msr	BASEPRI, r1
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	486a      	ldr	r0, [pc, #424]	; (8004bac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a04:	f7ff fb07 	bl	8004016 <_PreparePacket>
 8004a08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b66      	ldr	r3, [pc, #408]	; (8004bb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1e:	e00b      	b.n	8004a38 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	6479      	str	r1, [r7, #68]	; 0x44
 8004a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	09db      	lsrs	r3, r3, #7
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
 8004a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a3c:	d8f0      	bhi.n	8004a20 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	647a      	str	r2, [r7, #68]	; 0x44
 8004a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a58:	e00b      	b.n	8004a72 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	09db      	lsrs	r3, r3, #7
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b7f      	cmp	r3, #127	; 0x7f
 8004a76:	d8f0      	bhi.n	8004a5a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a86:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff fa73 	bl	8003f7c <_EncodeStr>
 8004a96:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a98:	2209      	movs	r2, #9
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	6938      	ldr	r0, [r7, #16]
 8004a9e:	f7ff fbab 	bl	80041f8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab6:	e00b      	b.n	8004ad0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	6379      	str	r1, [r7, #52]	; 0x34
 8004ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	09db      	lsrs	r3, r3, #7
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad4:	d8f0      	bhi.n	8004ab8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	637a      	str	r2, [r7, #52]	; 0x34
 8004adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af0:	e00b      	b.n	8004b0a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0e:	d8f0      	bhi.n	8004af2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	623b      	str	r3, [r7, #32]
 8004b2a:	e00b      	b.n	8004b44 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	6279      	str	r1, [r7, #36]	; 0x24
 8004b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	09db      	lsrs	r3, r3, #7
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	2b7f      	cmp	r3, #127	; 0x7f
 8004b48:	d8f0      	bhi.n	8004b2c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e00b      	b.n	8004b7c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	61f9      	str	r1, [r7, #28]
 8004b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	09db      	lsrs	r3, r3, #7
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b80:	d8f0      	bhi.n	8004b64 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	61fa      	str	r2, [r7, #28]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b92:	2215      	movs	r2, #21
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	6938      	ldr	r0, [r7, #16]
 8004b98:	f7ff fb2e 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f383 8811 	msr	BASEPRI, r3
}
 8004ba2:	bf00      	nop
 8004ba4:	3748      	adds	r7, #72	; 0x48
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	2001439c 	.word	0x2001439c
 8004bb0:	2001436c 	.word	0x2001436c

08004bb4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004bca:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4798      	blx	r3
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2001436c 	.word	0x2001436c

08004bdc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004be4:	f3ef 8311 	mrs	r3, BASEPRI
 8004be8:	f04f 0120 	mov.w	r1, #32
 8004bec:	f381 8811 	msr	BASEPRI, r1
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	480b      	ldr	r0, [pc, #44]	; (8004c20 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bf4:	f7ff fa0f 	bl	8004016 <_PreparePacket>
 8004bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	6938      	ldr	r0, [r7, #16]
 8004c00:	f7ff f9bc 	bl	8003f7c <_EncodeStr>
 8004c04:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c06:	220e      	movs	r2, #14
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	6938      	ldr	r0, [r7, #16]
 8004c0c:	f7ff faf4 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f383 8811 	msr	BASEPRI, r3
}
 8004c16:	bf00      	nop
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2001439c 	.word	0x2001439c

08004c24 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01a      	beq.n	8004c68 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4798      	blx	r3
 8004c44:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c48:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	000a      	movs	r2, r1
 8004c58:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4621      	mov	r1, r4
 8004c60:	200d      	movs	r0, #13
 8004c62:	f7ff fc5d 	bl	8004520 <SEGGER_SYSVIEW_RecordU32x2>
 8004c66:	e006      	b.n	8004c76 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	200c      	movs	r0, #12
 8004c70:	f7ff fc1a 	bl	80044a8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	2001436c 	.word	0x2001436c
 8004c84:	e0001004 	.word	0xe0001004

08004c88 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c92:	f04f 0120 	mov.w	r1, #32
 8004c96:	f381 8811 	msr	BASEPRI, r1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	4819      	ldr	r0, [pc, #100]	; (8004d04 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c9e:	f7ff f9ba 	bl	8004016 <_PreparePacket>
 8004ca2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	e00b      	b.n	8004cd4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	6179      	str	r1, [r7, #20]
 8004cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd8:	d8f0      	bhi.n	8004cbc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	617a      	str	r2, [r7, #20]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004cea:	2202      	movs	r2, #2
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	68b8      	ldr	r0, [r7, #8]
 8004cf0:	f7ff fa82 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f383 8811 	msr	BASEPRI, r3
}
 8004cfa:	bf00      	nop
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	2001439c 	.word	0x2001439c
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d12:	f3ef 8311 	mrs	r3, BASEPRI
 8004d16:	f04f 0120 	mov.w	r1, #32
 8004d1a:	f381 8811 	msr	BASEPRI, r1
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	4807      	ldr	r0, [pc, #28]	; (8004d40 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d22:	f7ff f978 	bl	8004016 <_PreparePacket>
 8004d26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d28:	2203      	movs	r2, #3
 8004d2a:	6839      	ldr	r1, [r7, #0]
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f7ff fa63 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f383 8811 	msr	BASEPRI, r3
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2001439c 	.word	0x2001439c

08004d44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d4e:	f04f 0120 	mov.w	r1, #32
 8004d52:	f381 8811 	msr	BASEPRI, r1
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	4807      	ldr	r0, [pc, #28]	; (8004d78 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d5a:	f7ff f95c 	bl	8004016 <_PreparePacket>
 8004d5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d60:	2212      	movs	r2, #18
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f7ff fa47 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f383 8811 	msr	BASEPRI, r3
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	2001439c 	.word	0x2001439c

08004d7c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d82:	f3ef 8311 	mrs	r3, BASEPRI
 8004d86:	f04f 0120 	mov.w	r1, #32
 8004d8a:	f381 8811 	msr	BASEPRI, r1
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	4807      	ldr	r0, [pc, #28]	; (8004db0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d92:	f7ff f940 	bl	8004016 <_PreparePacket>
 8004d96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d98:	2211      	movs	r2, #17
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6838      	ldr	r0, [r7, #0]
 8004d9e:	f7ff fa2b 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f383 8811 	msr	BASEPRI, r3
}
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2001439c 	.word	0x2001439c

08004db4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc0:	f04f 0120 	mov.w	r1, #32
 8004dc4:	f381 8811 	msr	BASEPRI, r1
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	4819      	ldr	r0, [pc, #100]	; (8004e30 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004dcc:	f7ff f923 	bl	8004016 <_PreparePacket>
 8004dd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004dd6:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	e00b      	b.n	8004e02 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	1c59      	adds	r1, r3, #1
 8004df2:	61f9      	str	r1, [r7, #28]
 8004df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	09db      	lsrs	r3, r3, #7
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b7f      	cmp	r3, #127	; 0x7f
 8004e06:	d8f0      	bhi.n	8004dea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	61fa      	str	r2, [r7, #28]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e18:	2208      	movs	r2, #8
 8004e1a:	68f9      	ldr	r1, [r7, #12]
 8004e1c:	6938      	ldr	r0, [r7, #16]
 8004e1e:	f7ff f9eb 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f383 8811 	msr	BASEPRI, r3
}
 8004e28:	bf00      	nop
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	2001439c 	.word	0x2001439c
 8004e34:	2001436c 	.word	0x2001436c

08004e38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e40:	f3ef 8311 	mrs	r3, BASEPRI
 8004e44:	f04f 0120 	mov.w	r1, #32
 8004e48:	f381 8811 	msr	BASEPRI, r1
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	4819      	ldr	r0, [pc, #100]	; (8004eb4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e50:	f7ff f8e1 	bl	8004016 <_PreparePacket>
 8004e54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e5a:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e00b      	b.n	8004e86 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	61f9      	str	r1, [r7, #28]
 8004e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8a:	d8f0      	bhi.n	8004e6e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	61fa      	str	r2, [r7, #28]
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	6938      	ldr	r0, [r7, #16]
 8004ea2:	f7ff f9a9 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f383 8811 	msr	BASEPRI, r3
}
 8004eac:	bf00      	nop
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	2001439c 	.word	0x2001439c
 8004eb8:	2001436c 	.word	0x2001436c

08004ebc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec8:	f04f 0120 	mov.w	r1, #32
 8004ecc:	f381 8811 	msr	BASEPRI, r1
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	4819      	ldr	r0, [pc, #100]	; (8004f38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ed4:	f7ff f89f 	bl	8004016 <_PreparePacket>
 8004ed8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ede:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e00b      	b.n	8004f0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	1c59      	adds	r1, r3, #1
 8004efa:	61f9      	str	r1, [r7, #28]
 8004efc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	09db      	lsrs	r3, r3, #7
 8004f08:	61bb      	str	r3, [r7, #24]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0e:	d8f0      	bhi.n	8004ef2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	61fa      	str	r2, [r7, #28]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f20:	2206      	movs	r2, #6
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	6938      	ldr	r0, [r7, #16]
 8004f26:	f7ff f967 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f383 8811 	msr	BASEPRI, r3
}
 8004f30:	bf00      	nop
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	2001439c 	.word	0x2001439c
 8004f3c:	2001436c 	.word	0x2001436c

08004f40 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08a      	sub	sp, #40	; 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4e:	f04f 0120 	mov.w	r1, #32
 8004f52:	f381 8811 	msr	BASEPRI, r1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	4827      	ldr	r0, [pc, #156]	; (8004ff8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004f5a:	f7ff f85c 	bl	8004016 <_PreparePacket>
 8004f5e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	e00b      	b.n	8004f90 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	6279      	str	r1, [r7, #36]	; 0x24
 8004f82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	09db      	lsrs	r3, r3, #7
 8004f8e:	623b      	str	r3, [r7, #32]
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	2b7f      	cmp	r3, #127	; 0x7f
 8004f94:	d8f0      	bhi.n	8004f78 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	e00b      	b.n	8004fc8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	1c59      	adds	r1, r3, #1
 8004fb8:	61f9      	str	r1, [r7, #28]
 8004fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	09db      	lsrs	r3, r3, #7
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b7f      	cmp	r3, #127	; 0x7f
 8004fcc:	d8f0      	bhi.n	8004fb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	61fa      	str	r2, [r7, #28]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004fde:	2207      	movs	r2, #7
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	6938      	ldr	r0, [r7, #16]
 8004fe4:	f7ff f908 	bl	80041f8 <_SendPacket>
  RECORD_END();
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f383 8811 	msr	BASEPRI, r3
}
 8004fee:	bf00      	nop
 8004ff0:	3728      	adds	r7, #40	; 0x28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	2001439c 	.word	0x2001439c
 8004ffc:	2001436c 	.word	0x2001436c

08005000 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	1ad3      	subs	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	2001436c 	.word	0x2001436c

08005020 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	; 0x30
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800502a:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d06d      	beq.n	800510e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005032:	4b39      	ldr	r3, [pc, #228]	; (8005118 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
 800503c:	e008      	b.n	8005050 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	3301      	adds	r3, #1
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005054:	429a      	cmp	r2, r3
 8005056:	d3f2      	bcc.n	800503e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005058:	e000      	b.n	800505c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800505a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d055      	beq.n	800510e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005062:	f3ef 8311 	mrs	r3, BASEPRI
 8005066:	f04f 0120 	mov.w	r1, #32
 800506a:	f381 8811 	msr	BASEPRI, r1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	482a      	ldr	r0, [pc, #168]	; (800511c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005072:	f7fe ffd0 	bl	8004016 <_PreparePacket>
 8005076:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	e00b      	b.n	800509e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	6279      	str	r1, [r7, #36]	; 0x24
 8005090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	09db      	lsrs	r3, r3, #7
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	2b7f      	cmp	r3, #127	; 0x7f
 80050a2:	d8f0      	bhi.n	8005086 <SEGGER_SYSVIEW_SendModule+0x66>
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	627a      	str	r2, [r7, #36]	; 0x24
 80050aa:	6a3a      	ldr	r2, [r7, #32]
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	e00b      	b.n	80050d8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	61f9      	str	r1, [r7, #28]
 80050ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	09db      	lsrs	r3, r3, #7
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b7f      	cmp	r3, #127	; 0x7f
 80050dc:	d8f0      	bhi.n	80050c0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	61fa      	str	r2, [r7, #28]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	4619      	mov	r1, r3
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f7fe ff40 	bl	8003f7c <_EncodeStr>
 80050fc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80050fe:	2216      	movs	r2, #22
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	6938      	ldr	r0, [r7, #16]
 8005104:	f7ff f878 	bl	80041f8 <_SendPacket>
      RECORD_END();
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800510e:	bf00      	nop
 8005110:	3730      	adds	r7, #48	; 0x30
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20014394 	.word	0x20014394
 800511c:	2001439c 	.word	0x2001439c

08005120 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00f      	beq.n	800514e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f2      	bne.n	8005134 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20014394 	.word	0x20014394

0800515c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005162:	f3ef 8311 	mrs	r3, BASEPRI
 8005166:	f04f 0120 	mov.w	r1, #32
 800516a:	f381 8811 	msr	BASEPRI, r1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	4817      	ldr	r0, [pc, #92]	; (80051d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005172:	f7fe ff50 	bl	8004016 <_PreparePacket>
 8005176:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e00b      	b.n	80051a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	6179      	str	r1, [r7, #20]
 8005192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	09db      	lsrs	r3, r3, #7
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b7f      	cmp	r3, #127	; 0x7f
 80051a4:	d8f0      	bhi.n	8005188 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	617a      	str	r2, [r7, #20]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80051b6:	221b      	movs	r2, #27
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f7ff f81c 	bl	80041f8 <_SendPacket>
  RECORD_END();
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f383 8811 	msr	BASEPRI, r3
}
 80051c6:	bf00      	nop
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	2001439c 	.word	0x2001439c
 80051d4:	20014398 	.word	0x20014398

080051d8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051e0:	f3ef 8311 	mrs	r3, BASEPRI
 80051e4:	f04f 0120 	mov.w	r1, #32
 80051e8:	f381 8811 	msr	BASEPRI, r1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	4827      	ldr	r0, [pc, #156]	; (800528c <SEGGER_SYSVIEW_Warn+0xb4>)
 80051f0:	f7fe ff11 	bl	8004016 <_PreparePacket>
 80051f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7fe febe 	bl	8003f7c <_EncodeStr>
 8005200:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	2301      	movs	r3, #1
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	e00b      	b.n	8005224 <SEGGER_SYSVIEW_Warn+0x4c>
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	6279      	str	r1, [r7, #36]	; 0x24
 8005216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	09db      	lsrs	r3, r3, #7
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	2b7f      	cmp	r3, #127	; 0x7f
 8005228:	d8f0      	bhi.n	800520c <SEGGER_SYSVIEW_Warn+0x34>
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	627a      	str	r2, [r7, #36]	; 0x24
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e00b      	b.n	800525c <SEGGER_SYSVIEW_Warn+0x84>
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	61f9      	str	r1, [r7, #28]
 800524e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	09db      	lsrs	r3, r3, #7
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b7f      	cmp	r3, #127	; 0x7f
 8005260:	d8f0      	bhi.n	8005244 <SEGGER_SYSVIEW_Warn+0x6c>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	61fa      	str	r2, [r7, #28]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005272:	221a      	movs	r2, #26
 8005274:	68f9      	ldr	r1, [r7, #12]
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f7fe ffbe 	bl	80041f8 <_SendPacket>
  RECORD_END();
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f383 8811 	msr	BASEPRI, r3
}
 8005282:	bf00      	nop
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2001439c 	.word	0x2001439c

08005290 <__libc_init_array>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4d0d      	ldr	r5, [pc, #52]	; (80052c8 <__libc_init_array+0x38>)
 8005294:	4c0d      	ldr	r4, [pc, #52]	; (80052cc <__libc_init_array+0x3c>)
 8005296:	1b64      	subs	r4, r4, r5
 8005298:	10a4      	asrs	r4, r4, #2
 800529a:	2600      	movs	r6, #0
 800529c:	42a6      	cmp	r6, r4
 800529e:	d109      	bne.n	80052b4 <__libc_init_array+0x24>
 80052a0:	4d0b      	ldr	r5, [pc, #44]	; (80052d0 <__libc_init_array+0x40>)
 80052a2:	4c0c      	ldr	r4, [pc, #48]	; (80052d4 <__libc_init_array+0x44>)
 80052a4:	f000 ffda 	bl	800625c <_init>
 80052a8:	1b64      	subs	r4, r4, r5
 80052aa:	10a4      	asrs	r4, r4, #2
 80052ac:	2600      	movs	r6, #0
 80052ae:	42a6      	cmp	r6, r4
 80052b0:	d105      	bne.n	80052be <__libc_init_array+0x2e>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b8:	4798      	blx	r3
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7ee      	b.n	800529c <__libc_init_array+0xc>
 80052be:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c2:	4798      	blx	r3
 80052c4:	3601      	adds	r6, #1
 80052c6:	e7f2      	b.n	80052ae <__libc_init_array+0x1e>
 80052c8:	08006498 	.word	0x08006498
 80052cc:	08006498 	.word	0x08006498
 80052d0:	08006498 	.word	0x08006498
 80052d4:	0800649c 	.word	0x0800649c

080052d8 <memcmp>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	3901      	subs	r1, #1
 80052dc:	4402      	add	r2, r0
 80052de:	4290      	cmp	r0, r2
 80052e0:	d101      	bne.n	80052e6 <memcmp+0xe>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e005      	b.n	80052f2 <memcmp+0x1a>
 80052e6:	7803      	ldrb	r3, [r0, #0]
 80052e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d001      	beq.n	80052f4 <memcmp+0x1c>
 80052f0:	1b18      	subs	r0, r3, r4
 80052f2:	bd10      	pop	{r4, pc}
 80052f4:	3001      	adds	r0, #1
 80052f6:	e7f2      	b.n	80052de <memcmp+0x6>

080052f8 <memcpy>:
 80052f8:	440a      	add	r2, r1
 80052fa:	4291      	cmp	r1, r2
 80052fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005300:	d100      	bne.n	8005304 <memcpy+0xc>
 8005302:	4770      	bx	lr
 8005304:	b510      	push	{r4, lr}
 8005306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800530e:	4291      	cmp	r1, r2
 8005310:	d1f9      	bne.n	8005306 <memcpy+0xe>
 8005312:	bd10      	pop	{r4, pc}

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <iprintf>:
 8005324:	b40f      	push	{r0, r1, r2, r3}
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <iprintf+0x2c>)
 8005328:	b513      	push	{r0, r1, r4, lr}
 800532a:	681c      	ldr	r4, [r3, #0]
 800532c:	b124      	cbz	r4, 8005338 <iprintf+0x14>
 800532e:	69a3      	ldr	r3, [r4, #24]
 8005330:	b913      	cbnz	r3, 8005338 <iprintf+0x14>
 8005332:	4620      	mov	r0, r4
 8005334:	f000 f866 	bl	8005404 <__sinit>
 8005338:	ab05      	add	r3, sp, #20
 800533a:	9a04      	ldr	r2, [sp, #16]
 800533c:	68a1      	ldr	r1, [r4, #8]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	4620      	mov	r0, r4
 8005342:	f000 f9bd 	bl	80056c0 <_vfiprintf_r>
 8005346:	b002      	add	sp, #8
 8005348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr
 8005350:	20000014 	.word	0x20000014

08005354 <std>:
 8005354:	2300      	movs	r3, #0
 8005356:	b510      	push	{r4, lr}
 8005358:	4604      	mov	r4, r0
 800535a:	e9c0 3300 	strd	r3, r3, [r0]
 800535e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005362:	6083      	str	r3, [r0, #8]
 8005364:	8181      	strh	r1, [r0, #12]
 8005366:	6643      	str	r3, [r0, #100]	; 0x64
 8005368:	81c2      	strh	r2, [r0, #14]
 800536a:	6183      	str	r3, [r0, #24]
 800536c:	4619      	mov	r1, r3
 800536e:	2208      	movs	r2, #8
 8005370:	305c      	adds	r0, #92	; 0x5c
 8005372:	f7ff ffcf 	bl	8005314 <memset>
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <std+0x38>)
 8005378:	6263      	str	r3, [r4, #36]	; 0x24
 800537a:	4b05      	ldr	r3, [pc, #20]	; (8005390 <std+0x3c>)
 800537c:	62a3      	str	r3, [r4, #40]	; 0x28
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <std+0x40>)
 8005380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <std+0x44>)
 8005384:	6224      	str	r4, [r4, #32]
 8005386:	6323      	str	r3, [r4, #48]	; 0x30
 8005388:	bd10      	pop	{r4, pc}
 800538a:	bf00      	nop
 800538c:	08005c69 	.word	0x08005c69
 8005390:	08005c8b 	.word	0x08005c8b
 8005394:	08005cc3 	.word	0x08005cc3
 8005398:	08005ce7 	.word	0x08005ce7

0800539c <_cleanup_r>:
 800539c:	4901      	ldr	r1, [pc, #4]	; (80053a4 <_cleanup_r+0x8>)
 800539e:	f000 b8af 	b.w	8005500 <_fwalk_reent>
 80053a2:	bf00      	nop
 80053a4:	08005fc1 	.word	0x08005fc1

080053a8 <__sfmoreglue>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	2268      	movs	r2, #104	; 0x68
 80053ac:	1e4d      	subs	r5, r1, #1
 80053ae:	4355      	muls	r5, r2
 80053b0:	460e      	mov	r6, r1
 80053b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053b6:	f000 f8e5 	bl	8005584 <_malloc_r>
 80053ba:	4604      	mov	r4, r0
 80053bc:	b140      	cbz	r0, 80053d0 <__sfmoreglue+0x28>
 80053be:	2100      	movs	r1, #0
 80053c0:	e9c0 1600 	strd	r1, r6, [r0]
 80053c4:	300c      	adds	r0, #12
 80053c6:	60a0      	str	r0, [r4, #8]
 80053c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053cc:	f7ff ffa2 	bl	8005314 <memset>
 80053d0:	4620      	mov	r0, r4
 80053d2:	bd70      	pop	{r4, r5, r6, pc}

080053d4 <__sfp_lock_acquire>:
 80053d4:	4801      	ldr	r0, [pc, #4]	; (80053dc <__sfp_lock_acquire+0x8>)
 80053d6:	f000 b8b3 	b.w	8005540 <__retarget_lock_acquire_recursive>
 80053da:	bf00      	nop
 80053dc:	20014480 	.word	0x20014480

080053e0 <__sfp_lock_release>:
 80053e0:	4801      	ldr	r0, [pc, #4]	; (80053e8 <__sfp_lock_release+0x8>)
 80053e2:	f000 b8ae 	b.w	8005542 <__retarget_lock_release_recursive>
 80053e6:	bf00      	nop
 80053e8:	20014480 	.word	0x20014480

080053ec <__sinit_lock_acquire>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__sinit_lock_acquire+0x8>)
 80053ee:	f000 b8a7 	b.w	8005540 <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	20014481 	.word	0x20014481

080053f8 <__sinit_lock_release>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__sinit_lock_release+0x8>)
 80053fa:	f000 b8a2 	b.w	8005542 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	20014481 	.word	0x20014481

08005404 <__sinit>:
 8005404:	b510      	push	{r4, lr}
 8005406:	4604      	mov	r4, r0
 8005408:	f7ff fff0 	bl	80053ec <__sinit_lock_acquire>
 800540c:	69a3      	ldr	r3, [r4, #24]
 800540e:	b11b      	cbz	r3, 8005418 <__sinit+0x14>
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f7ff bff0 	b.w	80053f8 <__sinit_lock_release>
 8005418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800541c:	6523      	str	r3, [r4, #80]	; 0x50
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <__sinit+0x68>)
 8005420:	4a13      	ldr	r2, [pc, #76]	; (8005470 <__sinit+0x6c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	62a2      	str	r2, [r4, #40]	; 0x28
 8005426:	42a3      	cmp	r3, r4
 8005428:	bf04      	itt	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	61a3      	streq	r3, [r4, #24]
 800542e:	4620      	mov	r0, r4
 8005430:	f000 f820 	bl	8005474 <__sfp>
 8005434:	6060      	str	r0, [r4, #4]
 8005436:	4620      	mov	r0, r4
 8005438:	f000 f81c 	bl	8005474 <__sfp>
 800543c:	60a0      	str	r0, [r4, #8]
 800543e:	4620      	mov	r0, r4
 8005440:	f000 f818 	bl	8005474 <__sfp>
 8005444:	2200      	movs	r2, #0
 8005446:	60e0      	str	r0, [r4, #12]
 8005448:	2104      	movs	r1, #4
 800544a:	6860      	ldr	r0, [r4, #4]
 800544c:	f7ff ff82 	bl	8005354 <std>
 8005450:	68a0      	ldr	r0, [r4, #8]
 8005452:	2201      	movs	r2, #1
 8005454:	2109      	movs	r1, #9
 8005456:	f7ff ff7d 	bl	8005354 <std>
 800545a:	68e0      	ldr	r0, [r4, #12]
 800545c:	2202      	movs	r2, #2
 800545e:	2112      	movs	r1, #18
 8005460:	f7ff ff78 	bl	8005354 <std>
 8005464:	2301      	movs	r3, #1
 8005466:	61a3      	str	r3, [r4, #24]
 8005468:	e7d2      	b.n	8005410 <__sinit+0xc>
 800546a:	bf00      	nop
 800546c:	08006400 	.word	0x08006400
 8005470:	0800539d 	.word	0x0800539d

08005474 <__sfp>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	4607      	mov	r7, r0
 8005478:	f7ff ffac 	bl	80053d4 <__sfp_lock_acquire>
 800547c:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <__sfp+0x84>)
 800547e:	681e      	ldr	r6, [r3, #0]
 8005480:	69b3      	ldr	r3, [r6, #24]
 8005482:	b913      	cbnz	r3, 800548a <__sfp+0x16>
 8005484:	4630      	mov	r0, r6
 8005486:	f7ff ffbd 	bl	8005404 <__sinit>
 800548a:	3648      	adds	r6, #72	; 0x48
 800548c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005490:	3b01      	subs	r3, #1
 8005492:	d503      	bpl.n	800549c <__sfp+0x28>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	b30b      	cbz	r3, 80054dc <__sfp+0x68>
 8005498:	6836      	ldr	r6, [r6, #0]
 800549a:	e7f7      	b.n	800548c <__sfp+0x18>
 800549c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054a0:	b9d5      	cbnz	r5, 80054d8 <__sfp+0x64>
 80054a2:	4b16      	ldr	r3, [pc, #88]	; (80054fc <__sfp+0x88>)
 80054a4:	60e3      	str	r3, [r4, #12]
 80054a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054aa:	6665      	str	r5, [r4, #100]	; 0x64
 80054ac:	f000 f847 	bl	800553e <__retarget_lock_init_recursive>
 80054b0:	f7ff ff96 	bl	80053e0 <__sfp_lock_release>
 80054b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054bc:	6025      	str	r5, [r4, #0]
 80054be:	61a5      	str	r5, [r4, #24]
 80054c0:	2208      	movs	r2, #8
 80054c2:	4629      	mov	r1, r5
 80054c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054c8:	f7ff ff24 	bl	8005314 <memset>
 80054cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054d4:	4620      	mov	r0, r4
 80054d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d8:	3468      	adds	r4, #104	; 0x68
 80054da:	e7d9      	b.n	8005490 <__sfp+0x1c>
 80054dc:	2104      	movs	r1, #4
 80054de:	4638      	mov	r0, r7
 80054e0:	f7ff ff62 	bl	80053a8 <__sfmoreglue>
 80054e4:	4604      	mov	r4, r0
 80054e6:	6030      	str	r0, [r6, #0]
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d1d5      	bne.n	8005498 <__sfp+0x24>
 80054ec:	f7ff ff78 	bl	80053e0 <__sfp_lock_release>
 80054f0:	230c      	movs	r3, #12
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	e7ee      	b.n	80054d4 <__sfp+0x60>
 80054f6:	bf00      	nop
 80054f8:	08006400 	.word	0x08006400
 80054fc:	ffff0001 	.word	0xffff0001

08005500 <_fwalk_reent>:
 8005500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005504:	4606      	mov	r6, r0
 8005506:	4688      	mov	r8, r1
 8005508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800550c:	2700      	movs	r7, #0
 800550e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005512:	f1b9 0901 	subs.w	r9, r9, #1
 8005516:	d505      	bpl.n	8005524 <_fwalk_reent+0x24>
 8005518:	6824      	ldr	r4, [r4, #0]
 800551a:	2c00      	cmp	r4, #0
 800551c:	d1f7      	bne.n	800550e <_fwalk_reent+0xe>
 800551e:	4638      	mov	r0, r7
 8005520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005524:	89ab      	ldrh	r3, [r5, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d907      	bls.n	800553a <_fwalk_reent+0x3a>
 800552a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800552e:	3301      	adds	r3, #1
 8005530:	d003      	beq.n	800553a <_fwalk_reent+0x3a>
 8005532:	4629      	mov	r1, r5
 8005534:	4630      	mov	r0, r6
 8005536:	47c0      	blx	r8
 8005538:	4307      	orrs	r7, r0
 800553a:	3568      	adds	r5, #104	; 0x68
 800553c:	e7e9      	b.n	8005512 <_fwalk_reent+0x12>

0800553e <__retarget_lock_init_recursive>:
 800553e:	4770      	bx	lr

08005540 <__retarget_lock_acquire_recursive>:
 8005540:	4770      	bx	lr

08005542 <__retarget_lock_release_recursive>:
 8005542:	4770      	bx	lr

08005544 <sbrk_aligned>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4e0e      	ldr	r6, [pc, #56]	; (8005580 <sbrk_aligned+0x3c>)
 8005548:	460c      	mov	r4, r1
 800554a:	6831      	ldr	r1, [r6, #0]
 800554c:	4605      	mov	r5, r0
 800554e:	b911      	cbnz	r1, 8005556 <sbrk_aligned+0x12>
 8005550:	f000 fb7a 	bl	8005c48 <_sbrk_r>
 8005554:	6030      	str	r0, [r6, #0]
 8005556:	4621      	mov	r1, r4
 8005558:	4628      	mov	r0, r5
 800555a:	f000 fb75 	bl	8005c48 <_sbrk_r>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d00a      	beq.n	8005578 <sbrk_aligned+0x34>
 8005562:	1cc4      	adds	r4, r0, #3
 8005564:	f024 0403 	bic.w	r4, r4, #3
 8005568:	42a0      	cmp	r0, r4
 800556a:	d007      	beq.n	800557c <sbrk_aligned+0x38>
 800556c:	1a21      	subs	r1, r4, r0
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fb6a 	bl	8005c48 <_sbrk_r>
 8005574:	3001      	adds	r0, #1
 8005576:	d101      	bne.n	800557c <sbrk_aligned+0x38>
 8005578:	f04f 34ff 	mov.w	r4, #4294967295
 800557c:	4620      	mov	r0, r4
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	20014488 	.word	0x20014488

08005584 <_malloc_r>:
 8005584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005588:	1ccd      	adds	r5, r1, #3
 800558a:	f025 0503 	bic.w	r5, r5, #3
 800558e:	3508      	adds	r5, #8
 8005590:	2d0c      	cmp	r5, #12
 8005592:	bf38      	it	cc
 8005594:	250c      	movcc	r5, #12
 8005596:	2d00      	cmp	r5, #0
 8005598:	4607      	mov	r7, r0
 800559a:	db01      	blt.n	80055a0 <_malloc_r+0x1c>
 800559c:	42a9      	cmp	r1, r5
 800559e:	d905      	bls.n	80055ac <_malloc_r+0x28>
 80055a0:	230c      	movs	r3, #12
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	2600      	movs	r6, #0
 80055a6:	4630      	mov	r0, r6
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ac:	4e2e      	ldr	r6, [pc, #184]	; (8005668 <_malloc_r+0xe4>)
 80055ae:	f000 fdbb 	bl	8006128 <__malloc_lock>
 80055b2:	6833      	ldr	r3, [r6, #0]
 80055b4:	461c      	mov	r4, r3
 80055b6:	bb34      	cbnz	r4, 8005606 <_malloc_r+0x82>
 80055b8:	4629      	mov	r1, r5
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff ffc2 	bl	8005544 <sbrk_aligned>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	4604      	mov	r4, r0
 80055c4:	d14d      	bne.n	8005662 <_malloc_r+0xde>
 80055c6:	6834      	ldr	r4, [r6, #0]
 80055c8:	4626      	mov	r6, r4
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	d140      	bne.n	8005650 <_malloc_r+0xcc>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	4631      	mov	r1, r6
 80055d2:	4638      	mov	r0, r7
 80055d4:	eb04 0803 	add.w	r8, r4, r3
 80055d8:	f000 fb36 	bl	8005c48 <_sbrk_r>
 80055dc:	4580      	cmp	r8, r0
 80055de:	d13a      	bne.n	8005656 <_malloc_r+0xd2>
 80055e0:	6821      	ldr	r1, [r4, #0]
 80055e2:	3503      	adds	r5, #3
 80055e4:	1a6d      	subs	r5, r5, r1
 80055e6:	f025 0503 	bic.w	r5, r5, #3
 80055ea:	3508      	adds	r5, #8
 80055ec:	2d0c      	cmp	r5, #12
 80055ee:	bf38      	it	cc
 80055f0:	250c      	movcc	r5, #12
 80055f2:	4629      	mov	r1, r5
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff ffa5 	bl	8005544 <sbrk_aligned>
 80055fa:	3001      	adds	r0, #1
 80055fc:	d02b      	beq.n	8005656 <_malloc_r+0xd2>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	442b      	add	r3, r5
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	e00e      	b.n	8005624 <_malloc_r+0xa0>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	1b52      	subs	r2, r2, r5
 800560a:	d41e      	bmi.n	800564a <_malloc_r+0xc6>
 800560c:	2a0b      	cmp	r2, #11
 800560e:	d916      	bls.n	800563e <_malloc_r+0xba>
 8005610:	1961      	adds	r1, r4, r5
 8005612:	42a3      	cmp	r3, r4
 8005614:	6025      	str	r5, [r4, #0]
 8005616:	bf18      	it	ne
 8005618:	6059      	strne	r1, [r3, #4]
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	bf08      	it	eq
 800561e:	6031      	streq	r1, [r6, #0]
 8005620:	5162      	str	r2, [r4, r5]
 8005622:	604b      	str	r3, [r1, #4]
 8005624:	4638      	mov	r0, r7
 8005626:	f104 060b 	add.w	r6, r4, #11
 800562a:	f000 fd83 	bl	8006134 <__malloc_unlock>
 800562e:	f026 0607 	bic.w	r6, r6, #7
 8005632:	1d23      	adds	r3, r4, #4
 8005634:	1af2      	subs	r2, r6, r3
 8005636:	d0b6      	beq.n	80055a6 <_malloc_r+0x22>
 8005638:	1b9b      	subs	r3, r3, r6
 800563a:	50a3      	str	r3, [r4, r2]
 800563c:	e7b3      	b.n	80055a6 <_malloc_r+0x22>
 800563e:	6862      	ldr	r2, [r4, #4]
 8005640:	42a3      	cmp	r3, r4
 8005642:	bf0c      	ite	eq
 8005644:	6032      	streq	r2, [r6, #0]
 8005646:	605a      	strne	r2, [r3, #4]
 8005648:	e7ec      	b.n	8005624 <_malloc_r+0xa0>
 800564a:	4623      	mov	r3, r4
 800564c:	6864      	ldr	r4, [r4, #4]
 800564e:	e7b2      	b.n	80055b6 <_malloc_r+0x32>
 8005650:	4634      	mov	r4, r6
 8005652:	6876      	ldr	r6, [r6, #4]
 8005654:	e7b9      	b.n	80055ca <_malloc_r+0x46>
 8005656:	230c      	movs	r3, #12
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	4638      	mov	r0, r7
 800565c:	f000 fd6a 	bl	8006134 <__malloc_unlock>
 8005660:	e7a1      	b.n	80055a6 <_malloc_r+0x22>
 8005662:	6025      	str	r5, [r4, #0]
 8005664:	e7de      	b.n	8005624 <_malloc_r+0xa0>
 8005666:	bf00      	nop
 8005668:	20014484 	.word	0x20014484

0800566c <__sfputc_r>:
 800566c:	6893      	ldr	r3, [r2, #8]
 800566e:	3b01      	subs	r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	b410      	push	{r4}
 8005674:	6093      	str	r3, [r2, #8]
 8005676:	da08      	bge.n	800568a <__sfputc_r+0x1e>
 8005678:	6994      	ldr	r4, [r2, #24]
 800567a:	42a3      	cmp	r3, r4
 800567c:	db01      	blt.n	8005682 <__sfputc_r+0x16>
 800567e:	290a      	cmp	r1, #10
 8005680:	d103      	bne.n	800568a <__sfputc_r+0x1e>
 8005682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005686:	f000 bb33 	b.w	8005cf0 <__swbuf_r>
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	1c58      	adds	r0, r3, #1
 800568e:	6010      	str	r0, [r2, #0]
 8005690:	7019      	strb	r1, [r3, #0]
 8005692:	4608      	mov	r0, r1
 8005694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005698:	4770      	bx	lr

0800569a <__sfputs_r>:
 800569a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	4614      	mov	r4, r2
 80056a2:	18d5      	adds	r5, r2, r3
 80056a4:	42ac      	cmp	r4, r5
 80056a6:	d101      	bne.n	80056ac <__sfputs_r+0x12>
 80056a8:	2000      	movs	r0, #0
 80056aa:	e007      	b.n	80056bc <__sfputs_r+0x22>
 80056ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b0:	463a      	mov	r2, r7
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7ff ffda 	bl	800566c <__sfputc_r>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d1f3      	bne.n	80056a4 <__sfputs_r+0xa>
 80056bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056c0 <_vfiprintf_r>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	460d      	mov	r5, r1
 80056c6:	b09d      	sub	sp, #116	; 0x74
 80056c8:	4614      	mov	r4, r2
 80056ca:	4698      	mov	r8, r3
 80056cc:	4606      	mov	r6, r0
 80056ce:	b118      	cbz	r0, 80056d8 <_vfiprintf_r+0x18>
 80056d0:	6983      	ldr	r3, [r0, #24]
 80056d2:	b90b      	cbnz	r3, 80056d8 <_vfiprintf_r+0x18>
 80056d4:	f7ff fe96 	bl	8005404 <__sinit>
 80056d8:	4b89      	ldr	r3, [pc, #548]	; (8005900 <_vfiprintf_r+0x240>)
 80056da:	429d      	cmp	r5, r3
 80056dc:	d11b      	bne.n	8005716 <_vfiprintf_r+0x56>
 80056de:	6875      	ldr	r5, [r6, #4]
 80056e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e2:	07d9      	lsls	r1, r3, #31
 80056e4:	d405      	bmi.n	80056f2 <_vfiprintf_r+0x32>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	059a      	lsls	r2, r3, #22
 80056ea:	d402      	bmi.n	80056f2 <_vfiprintf_r+0x32>
 80056ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ee:	f7ff ff27 	bl	8005540 <__retarget_lock_acquire_recursive>
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	071b      	lsls	r3, r3, #28
 80056f6:	d501      	bpl.n	80056fc <_vfiprintf_r+0x3c>
 80056f8:	692b      	ldr	r3, [r5, #16]
 80056fa:	b9eb      	cbnz	r3, 8005738 <_vfiprintf_r+0x78>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 fb5a 	bl	8005db8 <__swsetup_r>
 8005704:	b1c0      	cbz	r0, 8005738 <_vfiprintf_r+0x78>
 8005706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005708:	07dc      	lsls	r4, r3, #31
 800570a:	d50e      	bpl.n	800572a <_vfiprintf_r+0x6a>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	b01d      	add	sp, #116	; 0x74
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	4b7b      	ldr	r3, [pc, #492]	; (8005904 <_vfiprintf_r+0x244>)
 8005718:	429d      	cmp	r5, r3
 800571a:	d101      	bne.n	8005720 <_vfiprintf_r+0x60>
 800571c:	68b5      	ldr	r5, [r6, #8]
 800571e:	e7df      	b.n	80056e0 <_vfiprintf_r+0x20>
 8005720:	4b79      	ldr	r3, [pc, #484]	; (8005908 <_vfiprintf_r+0x248>)
 8005722:	429d      	cmp	r5, r3
 8005724:	bf08      	it	eq
 8005726:	68f5      	ldreq	r5, [r6, #12]
 8005728:	e7da      	b.n	80056e0 <_vfiprintf_r+0x20>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	0598      	lsls	r0, r3, #22
 800572e:	d4ed      	bmi.n	800570c <_vfiprintf_r+0x4c>
 8005730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005732:	f7ff ff06 	bl	8005542 <__retarget_lock_release_recursive>
 8005736:	e7e9      	b.n	800570c <_vfiprintf_r+0x4c>
 8005738:	2300      	movs	r3, #0
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	2320      	movs	r3, #32
 800573e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005742:	f8cd 800c 	str.w	r8, [sp, #12]
 8005746:	2330      	movs	r3, #48	; 0x30
 8005748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800590c <_vfiprintf_r+0x24c>
 800574c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005750:	f04f 0901 	mov.w	r9, #1
 8005754:	4623      	mov	r3, r4
 8005756:	469a      	mov	sl, r3
 8005758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800575c:	b10a      	cbz	r2, 8005762 <_vfiprintf_r+0xa2>
 800575e:	2a25      	cmp	r2, #37	; 0x25
 8005760:	d1f9      	bne.n	8005756 <_vfiprintf_r+0x96>
 8005762:	ebba 0b04 	subs.w	fp, sl, r4
 8005766:	d00b      	beq.n	8005780 <_vfiprintf_r+0xc0>
 8005768:	465b      	mov	r3, fp
 800576a:	4622      	mov	r2, r4
 800576c:	4629      	mov	r1, r5
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff ff93 	bl	800569a <__sfputs_r>
 8005774:	3001      	adds	r0, #1
 8005776:	f000 80aa 	beq.w	80058ce <_vfiprintf_r+0x20e>
 800577a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800577c:	445a      	add	r2, fp
 800577e:	9209      	str	r2, [sp, #36]	; 0x24
 8005780:	f89a 3000 	ldrb.w	r3, [sl]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a2 	beq.w	80058ce <_vfiprintf_r+0x20e>
 800578a:	2300      	movs	r3, #0
 800578c:	f04f 32ff 	mov.w	r2, #4294967295
 8005790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005794:	f10a 0a01 	add.w	sl, sl, #1
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	9307      	str	r3, [sp, #28]
 800579c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057a0:	931a      	str	r3, [sp, #104]	; 0x68
 80057a2:	4654      	mov	r4, sl
 80057a4:	2205      	movs	r2, #5
 80057a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057aa:	4858      	ldr	r0, [pc, #352]	; (800590c <_vfiprintf_r+0x24c>)
 80057ac:	f7fa fd60 	bl	8000270 <memchr>
 80057b0:	9a04      	ldr	r2, [sp, #16]
 80057b2:	b9d8      	cbnz	r0, 80057ec <_vfiprintf_r+0x12c>
 80057b4:	06d1      	lsls	r1, r2, #27
 80057b6:	bf44      	itt	mi
 80057b8:	2320      	movmi	r3, #32
 80057ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057be:	0713      	lsls	r3, r2, #28
 80057c0:	bf44      	itt	mi
 80057c2:	232b      	movmi	r3, #43	; 0x2b
 80057c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c8:	f89a 3000 	ldrb.w	r3, [sl]
 80057cc:	2b2a      	cmp	r3, #42	; 0x2a
 80057ce:	d015      	beq.n	80057fc <_vfiprintf_r+0x13c>
 80057d0:	9a07      	ldr	r2, [sp, #28]
 80057d2:	4654      	mov	r4, sl
 80057d4:	2000      	movs	r0, #0
 80057d6:	f04f 0c0a 	mov.w	ip, #10
 80057da:	4621      	mov	r1, r4
 80057dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057e0:	3b30      	subs	r3, #48	; 0x30
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d94e      	bls.n	8005884 <_vfiprintf_r+0x1c4>
 80057e6:	b1b0      	cbz	r0, 8005816 <_vfiprintf_r+0x156>
 80057e8:	9207      	str	r2, [sp, #28]
 80057ea:	e014      	b.n	8005816 <_vfiprintf_r+0x156>
 80057ec:	eba0 0308 	sub.w	r3, r0, r8
 80057f0:	fa09 f303 	lsl.w	r3, r9, r3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	46a2      	mov	sl, r4
 80057fa:	e7d2      	b.n	80057a2 <_vfiprintf_r+0xe2>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	1d19      	adds	r1, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9103      	str	r1, [sp, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfbb      	ittet	lt
 8005808:	425b      	neglt	r3, r3
 800580a:	f042 0202 	orrlt.w	r2, r2, #2
 800580e:	9307      	strge	r3, [sp, #28]
 8005810:	9307      	strlt	r3, [sp, #28]
 8005812:	bfb8      	it	lt
 8005814:	9204      	strlt	r2, [sp, #16]
 8005816:	7823      	ldrb	r3, [r4, #0]
 8005818:	2b2e      	cmp	r3, #46	; 0x2e
 800581a:	d10c      	bne.n	8005836 <_vfiprintf_r+0x176>
 800581c:	7863      	ldrb	r3, [r4, #1]
 800581e:	2b2a      	cmp	r3, #42	; 0x2a
 8005820:	d135      	bne.n	800588e <_vfiprintf_r+0x1ce>
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	9203      	str	r2, [sp, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	bfb8      	it	lt
 800582e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005832:	3402      	adds	r4, #2
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800591c <_vfiprintf_r+0x25c>
 800583a:	7821      	ldrb	r1, [r4, #0]
 800583c:	2203      	movs	r2, #3
 800583e:	4650      	mov	r0, sl
 8005840:	f7fa fd16 	bl	8000270 <memchr>
 8005844:	b140      	cbz	r0, 8005858 <_vfiprintf_r+0x198>
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	eba0 000a 	sub.w	r0, r0, sl
 800584c:	fa03 f000 	lsl.w	r0, r3, r0
 8005850:	9b04      	ldr	r3, [sp, #16]
 8005852:	4303      	orrs	r3, r0
 8005854:	3401      	adds	r4, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585c:	482c      	ldr	r0, [pc, #176]	; (8005910 <_vfiprintf_r+0x250>)
 800585e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005862:	2206      	movs	r2, #6
 8005864:	f7fa fd04 	bl	8000270 <memchr>
 8005868:	2800      	cmp	r0, #0
 800586a:	d03f      	beq.n	80058ec <_vfiprintf_r+0x22c>
 800586c:	4b29      	ldr	r3, [pc, #164]	; (8005914 <_vfiprintf_r+0x254>)
 800586e:	bb1b      	cbnz	r3, 80058b8 <_vfiprintf_r+0x1f8>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	3307      	adds	r3, #7
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	3308      	adds	r3, #8
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587e:	443b      	add	r3, r7
 8005880:	9309      	str	r3, [sp, #36]	; 0x24
 8005882:	e767      	b.n	8005754 <_vfiprintf_r+0x94>
 8005884:	fb0c 3202 	mla	r2, ip, r2, r3
 8005888:	460c      	mov	r4, r1
 800588a:	2001      	movs	r0, #1
 800588c:	e7a5      	b.n	80057da <_vfiprintf_r+0x11a>
 800588e:	2300      	movs	r3, #0
 8005890:	3401      	adds	r4, #1
 8005892:	9305      	str	r3, [sp, #20]
 8005894:	4619      	mov	r1, r3
 8005896:	f04f 0c0a 	mov.w	ip, #10
 800589a:	4620      	mov	r0, r4
 800589c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a0:	3a30      	subs	r2, #48	; 0x30
 80058a2:	2a09      	cmp	r2, #9
 80058a4:	d903      	bls.n	80058ae <_vfiprintf_r+0x1ee>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0c5      	beq.n	8005836 <_vfiprintf_r+0x176>
 80058aa:	9105      	str	r1, [sp, #20]
 80058ac:	e7c3      	b.n	8005836 <_vfiprintf_r+0x176>
 80058ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b2:	4604      	mov	r4, r0
 80058b4:	2301      	movs	r3, #1
 80058b6:	e7f0      	b.n	800589a <_vfiprintf_r+0x1da>
 80058b8:	ab03      	add	r3, sp, #12
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	462a      	mov	r2, r5
 80058be:	4b16      	ldr	r3, [pc, #88]	; (8005918 <_vfiprintf_r+0x258>)
 80058c0:	a904      	add	r1, sp, #16
 80058c2:	4630      	mov	r0, r6
 80058c4:	f3af 8000 	nop.w
 80058c8:	4607      	mov	r7, r0
 80058ca:	1c78      	adds	r0, r7, #1
 80058cc:	d1d6      	bne.n	800587c <_vfiprintf_r+0x1bc>
 80058ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d0:	07d9      	lsls	r1, r3, #31
 80058d2:	d405      	bmi.n	80058e0 <_vfiprintf_r+0x220>
 80058d4:	89ab      	ldrh	r3, [r5, #12]
 80058d6:	059a      	lsls	r2, r3, #22
 80058d8:	d402      	bmi.n	80058e0 <_vfiprintf_r+0x220>
 80058da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058dc:	f7ff fe31 	bl	8005542 <__retarget_lock_release_recursive>
 80058e0:	89ab      	ldrh	r3, [r5, #12]
 80058e2:	065b      	lsls	r3, r3, #25
 80058e4:	f53f af12 	bmi.w	800570c <_vfiprintf_r+0x4c>
 80058e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ea:	e711      	b.n	8005710 <_vfiprintf_r+0x50>
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	462a      	mov	r2, r5
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <_vfiprintf_r+0x258>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 f880 	bl	80059fc <_printf_i>
 80058fc:	e7e4      	b.n	80058c8 <_vfiprintf_r+0x208>
 80058fe:	bf00      	nop
 8005900:	08006424 	.word	0x08006424
 8005904:	08006444 	.word	0x08006444
 8005908:	08006404 	.word	0x08006404
 800590c:	08006464 	.word	0x08006464
 8005910:	0800646e 	.word	0x0800646e
 8005914:	00000000 	.word	0x00000000
 8005918:	0800569b 	.word	0x0800569b
 800591c:	0800646a 	.word	0x0800646a

08005920 <_printf_common>:
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	4616      	mov	r6, r2
 8005926:	4699      	mov	r9, r3
 8005928:	688a      	ldr	r2, [r1, #8]
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005930:	4293      	cmp	r3, r2
 8005932:	bfb8      	it	lt
 8005934:	4613      	movlt	r3, r2
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800593c:	4607      	mov	r7, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b10a      	cbz	r2, 8005946 <_printf_common+0x26>
 8005942:	3301      	adds	r3, #1
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	0699      	lsls	r1, r3, #26
 800594a:	bf42      	ittt	mi
 800594c:	6833      	ldrmi	r3, [r6, #0]
 800594e:	3302      	addmi	r3, #2
 8005950:	6033      	strmi	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	f015 0506 	ands.w	r5, r5, #6
 8005958:	d106      	bne.n	8005968 <_printf_common+0x48>
 800595a:	f104 0a19 	add.w	sl, r4, #25
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	6832      	ldr	r2, [r6, #0]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	42ab      	cmp	r3, r5
 8005966:	dc26      	bgt.n	80059b6 <_printf_common+0x96>
 8005968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800596c:	1e13      	subs	r3, r2, #0
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	bf18      	it	ne
 8005972:	2301      	movne	r3, #1
 8005974:	0692      	lsls	r2, r2, #26
 8005976:	d42b      	bmi.n	80059d0 <_printf_common+0xb0>
 8005978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800597c:	4649      	mov	r1, r9
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	3001      	adds	r0, #1
 8005984:	d01e      	beq.n	80059c4 <_printf_common+0xa4>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	68e5      	ldr	r5, [r4, #12]
 800598a:	6832      	ldr	r2, [r6, #0]
 800598c:	f003 0306 	and.w	r3, r3, #6
 8005990:	2b04      	cmp	r3, #4
 8005992:	bf08      	it	eq
 8005994:	1aad      	subeq	r5, r5, r2
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	bf0c      	ite	eq
 800599c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a0:	2500      	movne	r5, #0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bfc4      	itt	gt
 80059a6:	1a9b      	subgt	r3, r3, r2
 80059a8:	18ed      	addgt	r5, r5, r3
 80059aa:	2600      	movs	r6, #0
 80059ac:	341a      	adds	r4, #26
 80059ae:	42b5      	cmp	r5, r6
 80059b0:	d11a      	bne.n	80059e8 <_printf_common+0xc8>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e008      	b.n	80059c8 <_printf_common+0xa8>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4652      	mov	r2, sl
 80059ba:	4649      	mov	r1, r9
 80059bc:	4638      	mov	r0, r7
 80059be:	47c0      	blx	r8
 80059c0:	3001      	adds	r0, #1
 80059c2:	d103      	bne.n	80059cc <_printf_common+0xac>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	3501      	adds	r5, #1
 80059ce:	e7c6      	b.n	800595e <_printf_common+0x3e>
 80059d0:	18e1      	adds	r1, r4, r3
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	2030      	movs	r0, #48	; 0x30
 80059d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059da:	4422      	add	r2, r4
 80059dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e4:	3302      	adds	r3, #2
 80059e6:	e7c7      	b.n	8005978 <_printf_common+0x58>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4622      	mov	r2, r4
 80059ec:	4649      	mov	r1, r9
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c0      	blx	r8
 80059f2:	3001      	adds	r0, #1
 80059f4:	d0e6      	beq.n	80059c4 <_printf_common+0xa4>
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7d9      	b.n	80059ae <_printf_common+0x8e>
	...

080059fc <_printf_i>:
 80059fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	7e0f      	ldrb	r7, [r1, #24]
 8005a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a04:	2f78      	cmp	r7, #120	; 0x78
 8005a06:	4691      	mov	r9, r2
 8005a08:	4680      	mov	r8, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	469a      	mov	sl, r3
 8005a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a12:	d807      	bhi.n	8005a24 <_printf_i+0x28>
 8005a14:	2f62      	cmp	r7, #98	; 0x62
 8005a16:	d80a      	bhi.n	8005a2e <_printf_i+0x32>
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	f000 80d8 	beq.w	8005bce <_printf_i+0x1d2>
 8005a1e:	2f58      	cmp	r7, #88	; 0x58
 8005a20:	f000 80a3 	beq.w	8005b6a <_printf_i+0x16e>
 8005a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a2c:	e03a      	b.n	8005aa4 <_printf_i+0xa8>
 8005a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a32:	2b15      	cmp	r3, #21
 8005a34:	d8f6      	bhi.n	8005a24 <_printf_i+0x28>
 8005a36:	a101      	add	r1, pc, #4	; (adr r1, 8005a3c <_printf_i+0x40>)
 8005a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005aa9 	.word	0x08005aa9
 8005a44:	08005a25 	.word	0x08005a25
 8005a48:	08005a25 	.word	0x08005a25
 8005a4c:	08005a25 	.word	0x08005a25
 8005a50:	08005a25 	.word	0x08005a25
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005a25 	.word	0x08005a25
 8005a5c:	08005a25 	.word	0x08005a25
 8005a60:	08005a25 	.word	0x08005a25
 8005a64:	08005a25 	.word	0x08005a25
 8005a68:	08005bb5 	.word	0x08005bb5
 8005a6c:	08005ad9 	.word	0x08005ad9
 8005a70:	08005b97 	.word	0x08005b97
 8005a74:	08005a25 	.word	0x08005a25
 8005a78:	08005a25 	.word	0x08005a25
 8005a7c:	08005bd7 	.word	0x08005bd7
 8005a80:	08005a25 	.word	0x08005a25
 8005a84:	08005ad9 	.word	0x08005ad9
 8005a88:	08005a25 	.word	0x08005a25
 8005a8c:	08005a25 	.word	0x08005a25
 8005a90:	08005b9f 	.word	0x08005b9f
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	602a      	str	r2, [r5, #0]
 8005a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0a3      	b.n	8005bf0 <_printf_i+0x1f4>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	6829      	ldr	r1, [r5, #0]
 8005aac:	0606      	lsls	r6, r0, #24
 8005aae:	f101 0304 	add.w	r3, r1, #4
 8005ab2:	d50a      	bpl.n	8005aca <_printf_i+0xce>
 8005ab4:	680e      	ldr	r6, [r1, #0]
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	2e00      	cmp	r6, #0
 8005aba:	da03      	bge.n	8005ac4 <_printf_i+0xc8>
 8005abc:	232d      	movs	r3, #45	; 0x2d
 8005abe:	4276      	negs	r6, r6
 8005ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac4:	485e      	ldr	r0, [pc, #376]	; (8005c40 <_printf_i+0x244>)
 8005ac6:	230a      	movs	r3, #10
 8005ac8:	e019      	b.n	8005afe <_printf_i+0x102>
 8005aca:	680e      	ldr	r6, [r1, #0]
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ad2:	bf18      	it	ne
 8005ad4:	b236      	sxthne	r6, r6
 8005ad6:	e7ef      	b.n	8005ab8 <_printf_i+0xbc>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	1d19      	adds	r1, r3, #4
 8005ade:	6029      	str	r1, [r5, #0]
 8005ae0:	0601      	lsls	r1, r0, #24
 8005ae2:	d501      	bpl.n	8005ae8 <_printf_i+0xec>
 8005ae4:	681e      	ldr	r6, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <_printf_i+0xf2>
 8005ae8:	0646      	lsls	r6, r0, #25
 8005aea:	d5fb      	bpl.n	8005ae4 <_printf_i+0xe8>
 8005aec:	881e      	ldrh	r6, [r3, #0]
 8005aee:	4854      	ldr	r0, [pc, #336]	; (8005c40 <_printf_i+0x244>)
 8005af0:	2f6f      	cmp	r7, #111	; 0x6f
 8005af2:	bf0c      	ite	eq
 8005af4:	2308      	moveq	r3, #8
 8005af6:	230a      	movne	r3, #10
 8005af8:	2100      	movs	r1, #0
 8005afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005afe:	6865      	ldr	r5, [r4, #4]
 8005b00:	60a5      	str	r5, [r4, #8]
 8005b02:	2d00      	cmp	r5, #0
 8005b04:	bfa2      	ittt	ge
 8005b06:	6821      	ldrge	r1, [r4, #0]
 8005b08:	f021 0104 	bicge.w	r1, r1, #4
 8005b0c:	6021      	strge	r1, [r4, #0]
 8005b0e:	b90e      	cbnz	r6, 8005b14 <_printf_i+0x118>
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	d04d      	beq.n	8005bb0 <_printf_i+0x1b4>
 8005b14:	4615      	mov	r5, r2
 8005b16:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b1a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b1e:	5dc7      	ldrb	r7, [r0, r7]
 8005b20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b24:	4637      	mov	r7, r6
 8005b26:	42bb      	cmp	r3, r7
 8005b28:	460e      	mov	r6, r1
 8005b2a:	d9f4      	bls.n	8005b16 <_printf_i+0x11a>
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d10b      	bne.n	8005b48 <_printf_i+0x14c>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	07de      	lsls	r6, r3, #31
 8005b34:	d508      	bpl.n	8005b48 <_printf_i+0x14c>
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	6861      	ldr	r1, [r4, #4]
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	bfde      	ittt	le
 8005b3e:	2330      	movle	r3, #48	; 0x30
 8005b40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b48:	1b52      	subs	r2, r2, r5
 8005b4a:	6122      	str	r2, [r4, #16]
 8005b4c:	f8cd a000 	str.w	sl, [sp]
 8005b50:	464b      	mov	r3, r9
 8005b52:	aa03      	add	r2, sp, #12
 8005b54:	4621      	mov	r1, r4
 8005b56:	4640      	mov	r0, r8
 8005b58:	f7ff fee2 	bl	8005920 <_printf_common>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d14c      	bne.n	8005bfa <_printf_i+0x1fe>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	b004      	add	sp, #16
 8005b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6a:	4835      	ldr	r0, [pc, #212]	; (8005c40 <_printf_i+0x244>)
 8005b6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b70:	6829      	ldr	r1, [r5, #0]
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b78:	6029      	str	r1, [r5, #0]
 8005b7a:	061d      	lsls	r5, r3, #24
 8005b7c:	d514      	bpl.n	8005ba8 <_printf_i+0x1ac>
 8005b7e:	07df      	lsls	r7, r3, #31
 8005b80:	bf44      	itt	mi
 8005b82:	f043 0320 	orrmi.w	r3, r3, #32
 8005b86:	6023      	strmi	r3, [r4, #0]
 8005b88:	b91e      	cbnz	r6, 8005b92 <_printf_i+0x196>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f023 0320 	bic.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2310      	movs	r3, #16
 8005b94:	e7b0      	b.n	8005af8 <_printf_i+0xfc>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	f043 0320 	orr.w	r3, r3, #32
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	2378      	movs	r3, #120	; 0x78
 8005ba0:	4828      	ldr	r0, [pc, #160]	; (8005c44 <_printf_i+0x248>)
 8005ba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ba6:	e7e3      	b.n	8005b70 <_printf_i+0x174>
 8005ba8:	0659      	lsls	r1, r3, #25
 8005baa:	bf48      	it	mi
 8005bac:	b2b6      	uxthmi	r6, r6
 8005bae:	e7e6      	b.n	8005b7e <_printf_i+0x182>
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	e7bb      	b.n	8005b2c <_printf_i+0x130>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	6826      	ldr	r6, [r4, #0]
 8005bb8:	6961      	ldr	r1, [r4, #20]
 8005bba:	1d18      	adds	r0, r3, #4
 8005bbc:	6028      	str	r0, [r5, #0]
 8005bbe:	0635      	lsls	r5, r6, #24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0x1cc>
 8005bc4:	6019      	str	r1, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0x1d2>
 8005bc8:	0670      	lsls	r0, r6, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0x1c8>
 8005bcc:	8019      	strh	r1, [r3, #0]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	4615      	mov	r5, r2
 8005bd4:	e7ba      	b.n	8005b4c <_printf_i+0x150>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	602a      	str	r2, [r5, #0]
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	6862      	ldr	r2, [r4, #4]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f7fa fb44 	bl	8000270 <memchr>
 8005be8:	b108      	cbz	r0, 8005bee <_printf_i+0x1f2>
 8005bea:	1b40      	subs	r0, r0, r5
 8005bec:	6060      	str	r0, [r4, #4]
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf8:	e7a8      	b.n	8005b4c <_printf_i+0x150>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	462a      	mov	r2, r5
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4640      	mov	r0, r8
 8005c02:	47d0      	blx	sl
 8005c04:	3001      	adds	r0, #1
 8005c06:	d0ab      	beq.n	8005b60 <_printf_i+0x164>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	079b      	lsls	r3, r3, #30
 8005c0c:	d413      	bmi.n	8005c36 <_printf_i+0x23a>
 8005c0e:	68e0      	ldr	r0, [r4, #12]
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	4298      	cmp	r0, r3
 8005c14:	bfb8      	it	lt
 8005c16:	4618      	movlt	r0, r3
 8005c18:	e7a4      	b.n	8005b64 <_printf_i+0x168>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	47d0      	blx	sl
 8005c24:	3001      	adds	r0, #1
 8005c26:	d09b      	beq.n	8005b60 <_printf_i+0x164>
 8005c28:	3501      	adds	r5, #1
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	9903      	ldr	r1, [sp, #12]
 8005c2e:	1a5b      	subs	r3, r3, r1
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dcf2      	bgt.n	8005c1a <_printf_i+0x21e>
 8005c34:	e7eb      	b.n	8005c0e <_printf_i+0x212>
 8005c36:	2500      	movs	r5, #0
 8005c38:	f104 0619 	add.w	r6, r4, #25
 8005c3c:	e7f5      	b.n	8005c2a <_printf_i+0x22e>
 8005c3e:	bf00      	nop
 8005c40:	08006475 	.word	0x08006475
 8005c44:	08006486 	.word	0x08006486

08005c48 <_sbrk_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d06      	ldr	r5, [pc, #24]	; (8005c64 <_sbrk_r+0x1c>)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4608      	mov	r0, r1
 8005c52:	602b      	str	r3, [r5, #0]
 8005c54:	f000 faf4 	bl	8006240 <_sbrk>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_sbrk_r+0x1a>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_sbrk_r+0x1a>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	2001448c 	.word	0x2001448c

08005c68 <__sread>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c70:	f000 fab2 	bl	80061d8 <_read_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	bfab      	itete	ge
 8005c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c7c:	181b      	addge	r3, r3, r0
 8005c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c82:	bfac      	ite	ge
 8005c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c86:	81a3      	strhlt	r3, [r4, #12]
 8005c88:	bd10      	pop	{r4, pc}

08005c8a <__swrite>:
 8005c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	461f      	mov	r7, r3
 8005c90:	898b      	ldrh	r3, [r1, #12]
 8005c92:	05db      	lsls	r3, r3, #23
 8005c94:	4605      	mov	r5, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	4616      	mov	r6, r2
 8005c9a:	d505      	bpl.n	8005ca8 <__swrite+0x1e>
 8005c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f000 f9c8 	bl	8006038 <_lseek_r>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	4628      	mov	r0, r5
 8005cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	f000 b869 	b.w	8005d94 <_write_r>

08005cc2 <__sseek>:
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cca:	f000 f9b5 	bl	8006038 <_lseek_r>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	bf15      	itete	ne
 8005cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cde:	81a3      	strheq	r3, [r4, #12]
 8005ce0:	bf18      	it	ne
 8005ce2:	81a3      	strhne	r3, [r4, #12]
 8005ce4:	bd10      	pop	{r4, pc}

08005ce6 <__sclose>:
 8005ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cea:	f000 b8d3 	b.w	8005e94 <_close_r>
	...

08005cf0 <__swbuf_r>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	460e      	mov	r6, r1
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	b118      	cbz	r0, 8005d02 <__swbuf_r+0x12>
 8005cfa:	6983      	ldr	r3, [r0, #24]
 8005cfc:	b90b      	cbnz	r3, 8005d02 <__swbuf_r+0x12>
 8005cfe:	f7ff fb81 	bl	8005404 <__sinit>
 8005d02:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <__swbuf_r+0x98>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	d12b      	bne.n	8005d60 <__swbuf_r+0x70>
 8005d08:	686c      	ldr	r4, [r5, #4]
 8005d0a:	69a3      	ldr	r3, [r4, #24]
 8005d0c:	60a3      	str	r3, [r4, #8]
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	071a      	lsls	r2, r3, #28
 8005d12:	d52f      	bpl.n	8005d74 <__swbuf_r+0x84>
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	b36b      	cbz	r3, 8005d74 <__swbuf_r+0x84>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	1ac0      	subs	r0, r0, r3
 8005d1e:	6963      	ldr	r3, [r4, #20]
 8005d20:	b2f6      	uxtb	r6, r6
 8005d22:	4283      	cmp	r3, r0
 8005d24:	4637      	mov	r7, r6
 8005d26:	dc04      	bgt.n	8005d32 <__swbuf_r+0x42>
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 f948 	bl	8005fc0 <_fflush_r>
 8005d30:	bb30      	cbnz	r0, 8005d80 <__swbuf_r+0x90>
 8005d32:	68a3      	ldr	r3, [r4, #8]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	60a3      	str	r3, [r4, #8]
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	701e      	strb	r6, [r3, #0]
 8005d40:	6963      	ldr	r3, [r4, #20]
 8005d42:	3001      	adds	r0, #1
 8005d44:	4283      	cmp	r3, r0
 8005d46:	d004      	beq.n	8005d52 <__swbuf_r+0x62>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	07db      	lsls	r3, r3, #31
 8005d4c:	d506      	bpl.n	8005d5c <__swbuf_r+0x6c>
 8005d4e:	2e0a      	cmp	r6, #10
 8005d50:	d104      	bne.n	8005d5c <__swbuf_r+0x6c>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 f933 	bl	8005fc0 <_fflush_r>
 8005d5a:	b988      	cbnz	r0, 8005d80 <__swbuf_r+0x90>
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <__swbuf_r+0x9c>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d101      	bne.n	8005d6a <__swbuf_r+0x7a>
 8005d66:	68ac      	ldr	r4, [r5, #8]
 8005d68:	e7cf      	b.n	8005d0a <__swbuf_r+0x1a>
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <__swbuf_r+0xa0>)
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	bf08      	it	eq
 8005d70:	68ec      	ldreq	r4, [r5, #12]
 8005d72:	e7ca      	b.n	8005d0a <__swbuf_r+0x1a>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f81e 	bl	8005db8 <__swsetup_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d0cb      	beq.n	8005d18 <__swbuf_r+0x28>
 8005d80:	f04f 37ff 	mov.w	r7, #4294967295
 8005d84:	e7ea      	b.n	8005d5c <__swbuf_r+0x6c>
 8005d86:	bf00      	nop
 8005d88:	08006424 	.word	0x08006424
 8005d8c:	08006444 	.word	0x08006444
 8005d90:	08006404 	.word	0x08006404

08005d94 <_write_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d07      	ldr	r5, [pc, #28]	; (8005db4 <_write_r+0x20>)
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fa fd6b 	bl	800087e <_write>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_write_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_write_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	2001448c 	.word	0x2001448c

08005db8 <__swsetup_r>:
 8005db8:	4b32      	ldr	r3, [pc, #200]	; (8005e84 <__swsetup_r+0xcc>)
 8005dba:	b570      	push	{r4, r5, r6, lr}
 8005dbc:	681d      	ldr	r5, [r3, #0]
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	b125      	cbz	r5, 8005dce <__swsetup_r+0x16>
 8005dc4:	69ab      	ldr	r3, [r5, #24]
 8005dc6:	b913      	cbnz	r3, 8005dce <__swsetup_r+0x16>
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f7ff fb1b 	bl	8005404 <__sinit>
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <__swsetup_r+0xd0>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	d10f      	bne.n	8005df4 <__swsetup_r+0x3c>
 8005dd4:	686c      	ldr	r4, [r5, #4]
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ddc:	0719      	lsls	r1, r3, #28
 8005dde:	d42c      	bmi.n	8005e3a <__swsetup_r+0x82>
 8005de0:	06dd      	lsls	r5, r3, #27
 8005de2:	d411      	bmi.n	8005e08 <__swsetup_r+0x50>
 8005de4:	2309      	movs	r3, #9
 8005de6:	6033      	str	r3, [r6, #0]
 8005de8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dec:	81a3      	strh	r3, [r4, #12]
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	e03e      	b.n	8005e72 <__swsetup_r+0xba>
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <__swsetup_r+0xd4>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d101      	bne.n	8005dfe <__swsetup_r+0x46>
 8005dfa:	68ac      	ldr	r4, [r5, #8]
 8005dfc:	e7eb      	b.n	8005dd6 <__swsetup_r+0x1e>
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <__swsetup_r+0xd8>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	bf08      	it	eq
 8005e04:	68ec      	ldreq	r4, [r5, #12]
 8005e06:	e7e6      	b.n	8005dd6 <__swsetup_r+0x1e>
 8005e08:	0758      	lsls	r0, r3, #29
 8005e0a:	d512      	bpl.n	8005e32 <__swsetup_r+0x7a>
 8005e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e0e:	b141      	cbz	r1, 8005e22 <__swsetup_r+0x6a>
 8005e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e14:	4299      	cmp	r1, r3
 8005e16:	d002      	beq.n	8005e1e <__swsetup_r+0x66>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f991 	bl	8006140 <_free_r>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6363      	str	r3, [r4, #52]	; 0x34
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f043 0308 	orr.w	r3, r3, #8
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	b94b      	cbnz	r3, 8005e52 <__swsetup_r+0x9a>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d003      	beq.n	8005e52 <__swsetup_r+0x9a>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f000 f92b 	bl	80060a8 <__smakebuf_r>
 8005e52:	89a0      	ldrh	r0, [r4, #12]
 8005e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e58:	f010 0301 	ands.w	r3, r0, #1
 8005e5c:	d00a      	beq.n	8005e74 <__swsetup_r+0xbc>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	6963      	ldr	r3, [r4, #20]
 8005e64:	425b      	negs	r3, r3
 8005e66:	61a3      	str	r3, [r4, #24]
 8005e68:	6923      	ldr	r3, [r4, #16]
 8005e6a:	b943      	cbnz	r3, 8005e7e <__swsetup_r+0xc6>
 8005e6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e70:	d1ba      	bne.n	8005de8 <__swsetup_r+0x30>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	0781      	lsls	r1, r0, #30
 8005e76:	bf58      	it	pl
 8005e78:	6963      	ldrpl	r3, [r4, #20]
 8005e7a:	60a3      	str	r3, [r4, #8]
 8005e7c:	e7f4      	b.n	8005e68 <__swsetup_r+0xb0>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e7f7      	b.n	8005e72 <__swsetup_r+0xba>
 8005e82:	bf00      	nop
 8005e84:	20000014 	.word	0x20000014
 8005e88:	08006424 	.word	0x08006424
 8005e8c:	08006444 	.word	0x08006444
 8005e90:	08006404 	.word	0x08006404

08005e94 <_close_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d06      	ldr	r5, [pc, #24]	; (8005eb0 <_close_r+0x1c>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fa fd09 	bl	80008b6 <_close>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_close_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_close_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	2001448c 	.word	0x2001448c

08005eb4 <__sflush_r>:
 8005eb4:	898a      	ldrh	r2, [r1, #12]
 8005eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	4605      	mov	r5, r0
 8005ebc:	0710      	lsls	r0, r2, #28
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	d458      	bmi.n	8005f74 <__sflush_r+0xc0>
 8005ec2:	684b      	ldr	r3, [r1, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dc05      	bgt.n	8005ed4 <__sflush_r+0x20>
 8005ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dc02      	bgt.n	8005ed4 <__sflush_r+0x20>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	d0f9      	beq.n	8005ece <__sflush_r+0x1a>
 8005eda:	2300      	movs	r3, #0
 8005edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ee0:	682f      	ldr	r7, [r5, #0]
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	d032      	beq.n	8005f4c <__sflush_r+0x98>
 8005ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	075a      	lsls	r2, r3, #29
 8005eec:	d505      	bpl.n	8005efa <__sflush_r+0x46>
 8005eee:	6863      	ldr	r3, [r4, #4]
 8005ef0:	1ac0      	subs	r0, r0, r3
 8005ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ef4:	b10b      	cbz	r3, 8005efa <__sflush_r+0x46>
 8005ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ef8:	1ac0      	subs	r0, r0, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	4602      	mov	r2, r0
 8005efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f00:	6a21      	ldr	r1, [r4, #32]
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b0      	blx	r6
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	d106      	bne.n	8005f1a <__sflush_r+0x66>
 8005f0c:	6829      	ldr	r1, [r5, #0]
 8005f0e:	291d      	cmp	r1, #29
 8005f10:	d82c      	bhi.n	8005f6c <__sflush_r+0xb8>
 8005f12:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <__sflush_r+0x108>)
 8005f14:	40ca      	lsrs	r2, r1
 8005f16:	07d6      	lsls	r6, r2, #31
 8005f18:	d528      	bpl.n	8005f6c <__sflush_r+0xb8>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6062      	str	r2, [r4, #4]
 8005f1e:	04d9      	lsls	r1, r3, #19
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	d504      	bpl.n	8005f30 <__sflush_r+0x7c>
 8005f26:	1c42      	adds	r2, r0, #1
 8005f28:	d101      	bne.n	8005f2e <__sflush_r+0x7a>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	b903      	cbnz	r3, 8005f30 <__sflush_r+0x7c>
 8005f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8005f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f32:	602f      	str	r7, [r5, #0]
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d0ca      	beq.n	8005ece <__sflush_r+0x1a>
 8005f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	d002      	beq.n	8005f46 <__sflush_r+0x92>
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 f8fd 	bl	8006140 <_free_r>
 8005f46:	2000      	movs	r0, #0
 8005f48:	6360      	str	r0, [r4, #52]	; 0x34
 8005f4a:	e7c1      	b.n	8005ed0 <__sflush_r+0x1c>
 8005f4c:	6a21      	ldr	r1, [r4, #32]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b0      	blx	r6
 8005f54:	1c41      	adds	r1, r0, #1
 8005f56:	d1c7      	bne.n	8005ee8 <__sflush_r+0x34>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0c4      	beq.n	8005ee8 <__sflush_r+0x34>
 8005f5e:	2b1d      	cmp	r3, #29
 8005f60:	d001      	beq.n	8005f66 <__sflush_r+0xb2>
 8005f62:	2b16      	cmp	r3, #22
 8005f64:	d101      	bne.n	8005f6a <__sflush_r+0xb6>
 8005f66:	602f      	str	r7, [r5, #0]
 8005f68:	e7b1      	b.n	8005ece <__sflush_r+0x1a>
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	e7ad      	b.n	8005ed0 <__sflush_r+0x1c>
 8005f74:	690f      	ldr	r7, [r1, #16]
 8005f76:	2f00      	cmp	r7, #0
 8005f78:	d0a9      	beq.n	8005ece <__sflush_r+0x1a>
 8005f7a:	0793      	lsls	r3, r2, #30
 8005f7c:	680e      	ldr	r6, [r1, #0]
 8005f7e:	bf08      	it	eq
 8005f80:	694b      	ldreq	r3, [r1, #20]
 8005f82:	600f      	str	r7, [r1, #0]
 8005f84:	bf18      	it	ne
 8005f86:	2300      	movne	r3, #0
 8005f88:	eba6 0807 	sub.w	r8, r6, r7
 8005f8c:	608b      	str	r3, [r1, #8]
 8005f8e:	f1b8 0f00 	cmp.w	r8, #0
 8005f92:	dd9c      	ble.n	8005ece <__sflush_r+0x1a>
 8005f94:	6a21      	ldr	r1, [r4, #32]
 8005f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f98:	4643      	mov	r3, r8
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b0      	blx	r6
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	dc06      	bgt.n	8005fb2 <__sflush_r+0xfe>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	e78e      	b.n	8005ed0 <__sflush_r+0x1c>
 8005fb2:	4407      	add	r7, r0
 8005fb4:	eba8 0800 	sub.w	r8, r8, r0
 8005fb8:	e7e9      	b.n	8005f8e <__sflush_r+0xda>
 8005fba:	bf00      	nop
 8005fbc:	20400001 	.word	0x20400001

08005fc0 <_fflush_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b913      	cbnz	r3, 8005fd0 <_fflush_r+0x10>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	4628      	mov	r0, r5
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	b118      	cbz	r0, 8005fda <_fflush_r+0x1a>
 8005fd2:	6983      	ldr	r3, [r0, #24]
 8005fd4:	b90b      	cbnz	r3, 8005fda <_fflush_r+0x1a>
 8005fd6:	f7ff fa15 	bl	8005404 <__sinit>
 8005fda:	4b14      	ldr	r3, [pc, #80]	; (800602c <_fflush_r+0x6c>)
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	d11b      	bne.n	8006018 <_fflush_r+0x58>
 8005fe0:	686c      	ldr	r4, [r5, #4]
 8005fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ef      	beq.n	8005fca <_fflush_r+0xa>
 8005fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fec:	07d0      	lsls	r0, r2, #31
 8005fee:	d404      	bmi.n	8005ffa <_fflush_r+0x3a>
 8005ff0:	0599      	lsls	r1, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_fflush_r+0x3a>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f7ff faa3 	bl	8005540 <__retarget_lock_acquire_recursive>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	f7ff ff59 	bl	8005eb4 <__sflush_r>
 8006002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006004:	07da      	lsls	r2, r3, #31
 8006006:	4605      	mov	r5, r0
 8006008:	d4e0      	bmi.n	8005fcc <_fflush_r+0xc>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	059b      	lsls	r3, r3, #22
 800600e:	d4dd      	bmi.n	8005fcc <_fflush_r+0xc>
 8006010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006012:	f7ff fa96 	bl	8005542 <__retarget_lock_release_recursive>
 8006016:	e7d9      	b.n	8005fcc <_fflush_r+0xc>
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <_fflush_r+0x70>)
 800601a:	429c      	cmp	r4, r3
 800601c:	d101      	bne.n	8006022 <_fflush_r+0x62>
 800601e:	68ac      	ldr	r4, [r5, #8]
 8006020:	e7df      	b.n	8005fe2 <_fflush_r+0x22>
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <_fflush_r+0x74>)
 8006024:	429c      	cmp	r4, r3
 8006026:	bf08      	it	eq
 8006028:	68ec      	ldreq	r4, [r5, #12]
 800602a:	e7da      	b.n	8005fe2 <_fflush_r+0x22>
 800602c:	08006424 	.word	0x08006424
 8006030:	08006444 	.word	0x08006444
 8006034:	08006404 	.word	0x08006404

08006038 <_lseek_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d07      	ldr	r5, [pc, #28]	; (8006058 <_lseek_r+0x20>)
 800603c:	4604      	mov	r4, r0
 800603e:	4608      	mov	r0, r1
 8006040:	4611      	mov	r1, r2
 8006042:	2200      	movs	r2, #0
 8006044:	602a      	str	r2, [r5, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f7fa fc5c 	bl	8000904 <_lseek>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_lseek_r+0x1e>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_lseek_r+0x1e>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	2001448c 	.word	0x2001448c

0800605c <__swhatbuf_r>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	460e      	mov	r6, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	2900      	cmp	r1, #0
 8006066:	b096      	sub	sp, #88	; 0x58
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	da08      	bge.n	8006080 <__swhatbuf_r+0x24>
 800606e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	602a      	str	r2, [r5, #0]
 8006076:	061a      	lsls	r2, r3, #24
 8006078:	d410      	bmi.n	800609c <__swhatbuf_r+0x40>
 800607a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607e:	e00e      	b.n	800609e <__swhatbuf_r+0x42>
 8006080:	466a      	mov	r2, sp
 8006082:	f000 f8bb 	bl	80061fc <_fstat_r>
 8006086:	2800      	cmp	r0, #0
 8006088:	dbf1      	blt.n	800606e <__swhatbuf_r+0x12>
 800608a:	9a01      	ldr	r2, [sp, #4]
 800608c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006090:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006094:	425a      	negs	r2, r3
 8006096:	415a      	adcs	r2, r3
 8006098:	602a      	str	r2, [r5, #0]
 800609a:	e7ee      	b.n	800607a <__swhatbuf_r+0x1e>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	2000      	movs	r0, #0
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	b016      	add	sp, #88	; 0x58
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080060a8 <__smakebuf_r>:
 80060a8:	898b      	ldrh	r3, [r1, #12]
 80060aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060ac:	079d      	lsls	r5, r3, #30
 80060ae:	4606      	mov	r6, r0
 80060b0:	460c      	mov	r4, r1
 80060b2:	d507      	bpl.n	80060c4 <__smakebuf_r+0x1c>
 80060b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2301      	movs	r3, #1
 80060be:	6163      	str	r3, [r4, #20]
 80060c0:	b002      	add	sp, #8
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	ab01      	add	r3, sp, #4
 80060c6:	466a      	mov	r2, sp
 80060c8:	f7ff ffc8 	bl	800605c <__swhatbuf_r>
 80060cc:	9900      	ldr	r1, [sp, #0]
 80060ce:	4605      	mov	r5, r0
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7ff fa57 	bl	8005584 <_malloc_r>
 80060d6:	b948      	cbnz	r0, 80060ec <__smakebuf_r+0x44>
 80060d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060dc:	059a      	lsls	r2, r3, #22
 80060de:	d4ef      	bmi.n	80060c0 <__smakebuf_r+0x18>
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	e7e3      	b.n	80060b4 <__smakebuf_r+0xc>
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <__smakebuf_r+0x7c>)
 80060ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	6163      	str	r3, [r4, #20]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	6120      	str	r0, [r4, #16]
 8006102:	b15b      	cbz	r3, 800611c <__smakebuf_r+0x74>
 8006104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f889 	bl	8006220 <_isatty_r>
 800610e:	b128      	cbz	r0, 800611c <__smakebuf_r+0x74>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	89a0      	ldrh	r0, [r4, #12]
 800611e:	4305      	orrs	r5, r0
 8006120:	81a5      	strh	r5, [r4, #12]
 8006122:	e7cd      	b.n	80060c0 <__smakebuf_r+0x18>
 8006124:	0800539d 	.word	0x0800539d

08006128 <__malloc_lock>:
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <__malloc_lock+0x8>)
 800612a:	f7ff ba09 	b.w	8005540 <__retarget_lock_acquire_recursive>
 800612e:	bf00      	nop
 8006130:	2001447f 	.word	0x2001447f

08006134 <__malloc_unlock>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__malloc_unlock+0x8>)
 8006136:	f7ff ba04 	b.w	8005542 <__retarget_lock_release_recursive>
 800613a:	bf00      	nop
 800613c:	2001447f 	.word	0x2001447f

08006140 <_free_r>:
 8006140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006142:	2900      	cmp	r1, #0
 8006144:	d044      	beq.n	80061d0 <_free_r+0x90>
 8006146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800614a:	9001      	str	r0, [sp, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f1a1 0404 	sub.w	r4, r1, #4
 8006152:	bfb8      	it	lt
 8006154:	18e4      	addlt	r4, r4, r3
 8006156:	f7ff ffe7 	bl	8006128 <__malloc_lock>
 800615a:	4a1e      	ldr	r2, [pc, #120]	; (80061d4 <_free_r+0x94>)
 800615c:	9801      	ldr	r0, [sp, #4]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	b933      	cbnz	r3, 8006170 <_free_r+0x30>
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	6014      	str	r4, [r2, #0]
 8006166:	b003      	add	sp, #12
 8006168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800616c:	f7ff bfe2 	b.w	8006134 <__malloc_unlock>
 8006170:	42a3      	cmp	r3, r4
 8006172:	d908      	bls.n	8006186 <_free_r+0x46>
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1961      	adds	r1, r4, r5
 8006178:	428b      	cmp	r3, r1
 800617a:	bf01      	itttt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	1949      	addeq	r1, r1, r5
 8006182:	6021      	streq	r1, [r4, #0]
 8006184:	e7ed      	b.n	8006162 <_free_r+0x22>
 8006186:	461a      	mov	r2, r3
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	b10b      	cbz	r3, 8006190 <_free_r+0x50>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d9fa      	bls.n	8006186 <_free_r+0x46>
 8006190:	6811      	ldr	r1, [r2, #0]
 8006192:	1855      	adds	r5, r2, r1
 8006194:	42a5      	cmp	r5, r4
 8006196:	d10b      	bne.n	80061b0 <_free_r+0x70>
 8006198:	6824      	ldr	r4, [r4, #0]
 800619a:	4421      	add	r1, r4
 800619c:	1854      	adds	r4, r2, r1
 800619e:	42a3      	cmp	r3, r4
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	d1e0      	bne.n	8006166 <_free_r+0x26>
 80061a4:	681c      	ldr	r4, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	6053      	str	r3, [r2, #4]
 80061aa:	4421      	add	r1, r4
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	e7da      	b.n	8006166 <_free_r+0x26>
 80061b0:	d902      	bls.n	80061b8 <_free_r+0x78>
 80061b2:	230c      	movs	r3, #12
 80061b4:	6003      	str	r3, [r0, #0]
 80061b6:	e7d6      	b.n	8006166 <_free_r+0x26>
 80061b8:	6825      	ldr	r5, [r4, #0]
 80061ba:	1961      	adds	r1, r4, r5
 80061bc:	428b      	cmp	r3, r1
 80061be:	bf04      	itt	eq
 80061c0:	6819      	ldreq	r1, [r3, #0]
 80061c2:	685b      	ldreq	r3, [r3, #4]
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	bf04      	itt	eq
 80061c8:	1949      	addeq	r1, r1, r5
 80061ca:	6021      	streq	r1, [r4, #0]
 80061cc:	6054      	str	r4, [r2, #4]
 80061ce:	e7ca      	b.n	8006166 <_free_r+0x26>
 80061d0:	b003      	add	sp, #12
 80061d2:	bd30      	pop	{r4, r5, pc}
 80061d4:	20014484 	.word	0x20014484

080061d8 <_read_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	; (80061f8 <_read_r+0x20>)
 80061dc:	4604      	mov	r4, r0
 80061de:	4608      	mov	r0, r1
 80061e0:	4611      	mov	r1, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	602a      	str	r2, [r5, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fa fb2c 	bl	8000844 <_read>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d102      	bne.n	80061f6 <_read_r+0x1e>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	b103      	cbz	r3, 80061f6 <_read_r+0x1e>
 80061f4:	6023      	str	r3, [r4, #0]
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	2001448c 	.word	0x2001448c

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	; (800621c <_fstat_r+0x20>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fa fb60 	bl	80008ce <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	2001448c 	.word	0x2001448c

08006220 <_isatty_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_isatty_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fa fb5f 	bl	80008ee <_isatty>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_isatty_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_isatty_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	2001448c 	.word	0x2001448c

08006240 <_sbrk>:
 8006240:	4a04      	ldr	r2, [pc, #16]	; (8006254 <_sbrk+0x14>)
 8006242:	6811      	ldr	r1, [r2, #0]
 8006244:	4603      	mov	r3, r0
 8006246:	b909      	cbnz	r1, 800624c <_sbrk+0xc>
 8006248:	4903      	ldr	r1, [pc, #12]	; (8006258 <_sbrk+0x18>)
 800624a:	6011      	str	r1, [r2, #0]
 800624c:	6810      	ldr	r0, [r2, #0]
 800624e:	4403      	add	r3, r0
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4770      	bx	lr
 8006254:	20014490 	.word	0x20014490
 8006258:	20014498 	.word	0x20014498

0800625c <_init>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr

08006268 <_fini>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr
