
trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d44  08003d44  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003d44  08003d44  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d44  08003d44  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c988  20000078  08003dc4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ca00  08003dc4  0002ca00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d845  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002285  00000000  00000000  0002d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0002fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000309b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c92  00000000  00000000  000316d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f311  00000000  00000000  00059362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f567a  00000000  00000000  00068673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015dced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004060  00000000  00000000  0015dd40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c48 	.word	0x08003c48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003c48 	.word	0x08003c48

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b088      	sub	sp, #32
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 faef 	bl	80007b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f843 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f893 	bl	8000308 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status  = xTaskCreate(task1_handler, "Task1", 200, "Hello from RTOS T1", 2, &task1_handle);
 80001e2:	f107 0308 	add.w	r3, r7, #8
 80001e6:	9301      	str	r3, [sp, #4]
 80001e8:	2302      	movs	r3, #2
 80001ea:	9300      	str	r3, [sp, #0]
 80001ec:	4b18      	ldr	r3, [pc, #96]	; (8000250 <main+0x80>)
 80001ee:	22c8      	movs	r2, #200	; 0xc8
 80001f0:	4918      	ldr	r1, [pc, #96]	; (8000254 <main+0x84>)
 80001f2:	4819      	ldr	r0, [pc, #100]	; (8000258 <main+0x88>)
 80001f4:	f001 ff67 	bl	80020c6 <xTaskCreate>
 80001f8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d00a      	beq.n	8000216 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000204:	f383 8811 	msr	BASEPRI, r3
 8000208:	f3bf 8f6f 	isb	sy
 800020c:	f3bf 8f4f 	dsb	sy
 8000210:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000212:	bf00      	nop
 8000214:	e7fe      	b.n	8000214 <main+0x44>
  status = xTaskCreate(task2_handler, "Task1", 200, "Hello from RTOS T2", 2, &task2_handle);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	9301      	str	r3, [sp, #4]
 800021a:	2302      	movs	r3, #2
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <main+0x8c>)
 8000220:	22c8      	movs	r2, #200	; 0xc8
 8000222:	490c      	ldr	r1, [pc, #48]	; (8000254 <main+0x84>)
 8000224:	480e      	ldr	r0, [pc, #56]	; (8000260 <main+0x90>)
 8000226:	f001 ff4e 	bl	80020c6 <xTaskCreate>
 800022a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d00a      	beq.n	8000248 <main+0x78>
        __asm volatile
 8000232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000236:	f383 8811 	msr	BASEPRI, r3
 800023a:	f3bf 8f6f 	isb	sy
 800023e:	f3bf 8f4f 	dsb	sy
 8000242:	60fb      	str	r3, [r7, #12]
    }
 8000244:	bf00      	nop
 8000246:	e7fe      	b.n	8000246 <main+0x76>

  vTaskStartScheduler();
 8000248:	f002 f8a2 	bl	8002390 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	e7fe      	b.n	800024c <main+0x7c>
 800024e:	bf00      	nop
 8000250:	08003c60 	.word	0x08003c60
 8000254:	08003c74 	.word	0x08003c74
 8000258:	080003f9 	.word	0x080003f9
 800025c:	08003c7c 	.word	0x08003c7c
 8000260:	08000431 	.word	0x08000431

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	; 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	; 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 ffd4 	bl	8003220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800028a:	f000 fdab 	bl	8000de4 <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000294:	f000 f8fa 	bl	800048c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000298:	2302      	movs	r3, #2
 800029a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002ae:	2301      	movs	r3, #1
 80002b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002b2:	230a      	movs	r3, #10
 80002b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002b6:	2307      	movs	r3, #7
 80002b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002be:	2302      	movs	r3, #2
 80002c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fde2 	bl	8000e90 <HAL_RCC_OscConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002d2:	f000 f8db 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	230f      	movs	r3, #15
 80002d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2303      	movs	r3, #3
 80002dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	2104      	movs	r1, #4
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 f9aa 	bl	8001648 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002fa:	f000 f8c7 	bl	800048c <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3758      	adds	r7, #88	; 0x58
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a33      	ldr	r2, [pc, #204]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b31      	ldr	r3, [pc, #196]	; (80003f0 <MX_GPIO_Init+0xe8>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0304 	and.w	r3, r3, #4
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000336:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <MX_GPIO_Init+0xe8>)
 800033c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4a27      	ldr	r2, [pc, #156]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035a:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <MX_GPIO_Init+0xe8>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <MX_GPIO_Init+0xe8>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000372:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_GPIO_Init+0xe8>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	f003 0302 	and.w	r3, r3, #2
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2120      	movs	r1, #32
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f000 fd07 	bl	8000d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000390:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	4814      	ldr	r0, [pc, #80]	; (80003f4 <MX_GPIO_Init+0xec>)
 80003a2:	f000 fb4f 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003a6:	230c      	movs	r3, #12
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003aa:	2302      	movs	r3, #2
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003b2:	2303      	movs	r3, #3
 80003b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003b6:	2307      	movs	r3, #7
 80003b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0314 	add.w	r3, r7, #20
 80003be:	4619      	mov	r1, r3
 80003c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c4:	f000 fb3e 	bl	8000a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003c8:	2320      	movs	r3, #32
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2300      	movs	r3, #0
 80003d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	4619      	mov	r1, r3
 80003de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e2:	f000 fb2f 	bl	8000a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e6:	bf00      	nop
 80003e8:	3728      	adds	r7, #40	; 0x28
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000800 	.word	0x48000800

080003f8 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parameter)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000400:	2201      	movs	r2, #1
 8000402:	2120      	movs	r1, #32
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fcc6 	bl	8000d98 <HAL_GPIO_WritePin>
		printf("%s\n",(char*)parameter);
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f002 ff7d 	bl	800330c <puts>
		taskYIELD();
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <task1_handler+0x34>)
 8000414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	f3bf 8f4f 	dsb	sy
 800041e:	f3bf 8f6f 	isb	sy
		HAL_Delay(500);
 8000422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000426:	f000 fa07 	bl	8000838 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800042a:	e7e9      	b.n	8000400 <task1_handler+0x8>
 800042c:	e000ed04 	.word	0xe000ed04

08000430 <task2_handler>:
	}
}

void task2_handler(void *parameter)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000440:	f000 fcaa 	bl	8000d98 <HAL_GPIO_WritePin>
		printf("%s\n",(char*)parameter);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f002 ff61 	bl	800330c <puts>
		taskYIELD();
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <task2_handler+0x34>)
 800044c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	f3bf 8f4f 	dsb	sy
 8000456:	f3bf 8f6f 	isb	sy
		HAL_Delay(500);
 800045a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800045e:	f000 f9eb 	bl	8000838 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000462:	e7e9      	b.n	8000438 <task2_handler+0x8>
 8000464:	e000ed04 	.word	0xe000ed04

08000468 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d101      	bne.n	800047e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800047a:	f000 f9bd 	bl	80007f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40001000 	.word	0x40001000

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x44>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6613      	str	r3, [r2, #96]	; 0x60
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x44>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_MspInit+0x44>)
 80004b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <HAL_MspInit+0x44>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	6593      	str	r3, [r2, #88]	; 0x58
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_MspInit+0x44>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08e      	sub	sp, #56	; 0x38
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004ee:	4b34      	ldr	r3, [pc, #208]	; (80005c0 <HAL_InitTick+0xe0>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f2:	4a33      	ldr	r2, [pc, #204]	; (80005c0 <HAL_InitTick+0xe0>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6593      	str	r3, [r2, #88]	; 0x58
 80004fa:	4b31      	ldr	r3, [pc, #196]	; (80005c0 <HAL_InitTick+0xe0>)
 80004fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000506:	f107 0210 	add.w	r2, r7, #16
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f001 fa47 	bl	80019a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051c:	2b00      	cmp	r3, #0
 800051e:	d103      	bne.n	8000528 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000520:	f001 fa2a 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 8000524:	6378      	str	r0, [r7, #52]	; 0x34
 8000526:	e004      	b.n	8000532 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000528:	f001 fa26 	bl	8001978 <HAL_RCC_GetPCLK1Freq>
 800052c:	4603      	mov	r3, r0
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000534:	4a23      	ldr	r2, [pc, #140]	; (80005c4 <HAL_InitTick+0xe4>)
 8000536:	fba2 2303 	umull	r2, r3, r2, r3
 800053a:	0c9b      	lsrs	r3, r3, #18
 800053c:	3b01      	subs	r3, #1
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <HAL_InitTick+0xe8>)
 8000542:	4a22      	ldr	r2, [pc, #136]	; (80005cc <HAL_InitTick+0xec>)
 8000544:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <HAL_InitTick+0xe8>)
 8000548:	f240 32e7 	movw	r2, #999	; 0x3e7
 800054c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800054e:	4a1e      	ldr	r2, [pc, #120]	; (80005c8 <HAL_InitTick+0xe8>)
 8000550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000552:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <HAL_InitTick+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <HAL_InitTick+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <HAL_InitTick+0xe8>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <HAL_InitTick+0xe8>)
 8000568:	f001 faae 	bl	8001ac8 <HAL_TIM_Base_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000576:	2b00      	cmp	r3, #0
 8000578:	d11b      	bne.n	80005b2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <HAL_InitTick+0xe8>)
 800057c:	f001 fb06 	bl	8001b8c <HAL_TIM_Base_Start_IT>
 8000580:	4603      	mov	r3, r0
 8000582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800058a:	2b00      	cmp	r3, #0
 800058c:	d111      	bne.n	80005b2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800058e:	2036      	movs	r0, #54	; 0x36
 8000590:	f000 fa4a 	bl	8000a28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b0f      	cmp	r3, #15
 8000598:	d808      	bhi.n	80005ac <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800059a:	2200      	movs	r2, #0
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	2036      	movs	r0, #54	; 0x36
 80005a0:	f000 fa26 	bl	80009f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_InitTick+0xf0>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	e002      	b.n	80005b2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3738      	adds	r7, #56	; 0x38
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	431bde83 	.word	0x431bde83
 80005c8:	20000094 	.word	0x20000094
 80005cc:	40001000 	.word	0x40001000
 80005d0:	20000004 	.word	0x20000004

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <MemManage_Handler+0x4>

080005e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <TIM6_DAC_IRQHandler+0x10>)
 8000606:	f001 fb31 	bl	8001c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000094 	.word	0x20000094

08000614 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <ITM_SendChar+0x48>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <ITM_SendChar+0x48>)
 8000624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000628:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <ITM_SendChar+0x4c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <ITM_SendChar+0x4c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000636:	bf00      	nop
 8000638:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f8      	beq.n	8000638 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000646:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	6013      	str	r3, [r2, #0]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000edfc 	.word	0xe000edfc
 8000660:	e0000e00 	.word	0xe0000e00

08000664 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	e00a      	b.n	800068c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000676:	f3af 8000 	nop.w
 800067a:	4601      	mov	r1, r0
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	60ba      	str	r2, [r7, #8]
 8000682:	b2ca      	uxtb	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf0      	blt.n	8000676 <_read+0x12>
  }

  return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e009      	b.n	80006c4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	60ba      	str	r2, [r7, #8]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ffab 	bl	8000614 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3301      	adds	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dbf1      	blt.n	80006b0 <_write+0x12>
  }
  return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_close>:

int _close(int file)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <_isatty>:

int _isatty(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <SystemInit+0x20>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <SystemInit+0x20>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800079c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff ffea 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800076e:	490d      	ldr	r1, [pc, #52]	; (80007a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <LoopForever+0xe>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000784:	4c0a      	ldr	r4, [pc, #40]	; (80007b0 <LoopForever+0x16>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f002 fd21 	bl	80031d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000796:	f7ff fd1b 	bl	80001d0 <main>

0800079a <LoopForever>:

LoopForever:
    b LoopForever
 800079a:	e7fe      	b.n	800079a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800079c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007a8:	08003d4c 	.word	0x08003d4c
  ldr r2, =_sbss
 80007ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007b0:	2000ca00 	.word	0x2000ca00

080007b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_2_IRQHandler>
	...

080007b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_Init+0x3c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <HAL_Init+0x3c>)
 80007c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ce:	2003      	movs	r0, #3
 80007d0:	f000 f903 	bl	80009da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d4:	200f      	movs	r0, #15
 80007d6:	f7ff fe83 	bl	80004e0 <HAL_InitTick>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	e001      	b.n	80007ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e6:	f7ff fe57 	bl	8000498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	200000e0 	.word	0x200000e0

08000820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	200000e0 	.word	0x200000e0

08000838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff ffee 	bl	8000820 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d005      	beq.n	800085e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_Delay+0x44>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800085e:	bf00      	nop
 8000860:	f7ff ffde 	bl	8000820 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8f7      	bhi.n	8000860 <HAL_Delay+0x28>
  {
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	db0b      	blt.n	800090e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 021f 	and.w	r2, r3, #31
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <__NVIC_EnableIRQ+0x38>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	2001      	movs	r0, #1
 8000906:	fa00 f202 	lsl.w	r2, r0, r2
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ff4c 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a02:	f7ff ff61 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	68b9      	ldr	r1, [r7, #8]
 8000a0c:	6978      	ldr	r0, [r7, #20]
 8000a0e:	f7ff ffb1 	bl	8000974 <NVIC_EncodePriority>
 8000a12:	4602      	mov	r2, r0
 8000a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff80 	bl	8000920 <__NVIC_SetPriority>
}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff54 	bl	80008e4 <__NVIC_EnableIRQ>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e17f      	b.n	8000d54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 8171 	beq.w	8000d4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d005      	beq.n	8000a84 <HAL_GPIO_Init+0x40>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d130      	bne.n	8000ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aba:	2201      	movs	r2, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	f003 0201 	and.w	r2, r3, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d118      	bne.n	8000b24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000af8:	2201      	movs	r2, #1
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	f003 0201 	and.w	r2, r3, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d017      	beq.n	8000b60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d123      	bne.n	8000bb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	08da      	lsrs	r2, r3, #3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3208      	adds	r2, #8
 8000b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	691a      	ldr	r2, [r3, #16]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	08da      	lsrs	r2, r3, #3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3208      	adds	r2, #8
 8000bae:	6939      	ldr	r1, [r7, #16]
 8000bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0203 	and.w	r2, r3, #3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f000 80ac 	beq.w	8000d4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b5f      	ldr	r3, [pc, #380]	; (8000d74 <HAL_GPIO_Init+0x330>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a5e      	ldr	r2, [pc, #376]	; (8000d74 <HAL_GPIO_Init+0x330>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b5c      	ldr	r3, [pc, #368]	; (8000d74 <HAL_GPIO_Init+0x330>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c0e:	4a5a      	ldr	r2, [pc, #360]	; (8000d78 <HAL_GPIO_Init+0x334>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	220f      	movs	r2, #15
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c38:	d025      	beq.n	8000c86 <HAL_GPIO_Init+0x242>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a4f      	ldr	r2, [pc, #316]	; (8000d7c <HAL_GPIO_Init+0x338>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d01f      	beq.n	8000c82 <HAL_GPIO_Init+0x23e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4e      	ldr	r2, [pc, #312]	; (8000d80 <HAL_GPIO_Init+0x33c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d019      	beq.n	8000c7e <HAL_GPIO_Init+0x23a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a4d      	ldr	r2, [pc, #308]	; (8000d84 <HAL_GPIO_Init+0x340>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d013      	beq.n	8000c7a <HAL_GPIO_Init+0x236>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4c      	ldr	r2, [pc, #304]	; (8000d88 <HAL_GPIO_Init+0x344>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d00d      	beq.n	8000c76 <HAL_GPIO_Init+0x232>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4b      	ldr	r2, [pc, #300]	; (8000d8c <HAL_GPIO_Init+0x348>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d007      	beq.n	8000c72 <HAL_GPIO_Init+0x22e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a4a      	ldr	r2, [pc, #296]	; (8000d90 <HAL_GPIO_Init+0x34c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_GPIO_Init+0x22a>
 8000c6a:	2306      	movs	r3, #6
 8000c6c:	e00c      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c6e:	2307      	movs	r3, #7
 8000c70:	e00a      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c72:	2305      	movs	r3, #5
 8000c74:	e008      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c76:	2304      	movs	r3, #4
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e004      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x244>
 8000c86:	2300      	movs	r3, #0
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	f002 0203 	and.w	r2, r2, #3
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	4093      	lsls	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c98:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x334>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cca:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <HAL_GPIO_Init+0x350>)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f47f ae78 	bne.w	8000a54 <HAL_GPIO_Init+0x10>
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	48001400 	.word	0x48001400
 8000d90:	48001800 	.word	0x48001800
 8000d94:	40010400 	.word	0x40010400

08000d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40007000 	.word	0x40007000

08000de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df2:	d130      	bne.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e00:	d038      	beq.n	8000e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2232      	movs	r2, #50	; 0x32
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	0c9b      	lsrs	r3, r3, #18
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e28:	e002      	b.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3c:	d102      	bne.n	8000e44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f2      	bne.n	8000e2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e50:	d110      	bne.n	8000e74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e00f      	b.n	8000e76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e62:	d007      	beq.n	8000e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e6c:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40007000 	.word	0x40007000
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	431bde83 	.word	0x431bde83

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e3ca      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea2:	4b97      	ldr	r3, [pc, #604]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eac:	4b94      	ldr	r3, [pc, #592]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 80e4 	beq.w	800108c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <HAL_RCC_OscConfig+0x4a>
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	f040 808b 	bne.w	8000fe8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	f040 8087 	bne.w	8000fe8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eda:	4b89      	ldr	r3, [pc, #548]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x62>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e3a2      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	4b82      	ldr	r3, [pc, #520]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d004      	beq.n	8000f0c <HAL_RCC_OscConfig+0x7c>
 8000f02:	4b7f      	ldr	r3, [pc, #508]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f0a:	e005      	b.n	8000f18 <HAL_RCC_OscConfig+0x88>
 8000f0c:	4b7c      	ldr	r3, [pc, #496]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d223      	bcs.n	8000f64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fd71 	bl	8001a08 <RCC_SetFlashLatencyFromMSIRange>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e383      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f30:	4b73      	ldr	r3, [pc, #460]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a72      	ldr	r2, [pc, #456]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b70      	ldr	r3, [pc, #448]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	496d      	ldr	r1, [pc, #436]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4e:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	4968      	ldr	r1, [pc, #416]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]
 8000f62:	e025      	b.n	8000fb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f64:	4b66      	ldr	r3, [pc, #408]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a65      	ldr	r2, [pc, #404]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b63      	ldr	r3, [pc, #396]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4960      	ldr	r1, [pc, #384]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f82:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	495b      	ldr	r1, [pc, #364]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d109      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fd31 	bl	8001a08 <RCC_SetFlashLatencyFromMSIRange>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e343      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fb0:	f000 fc4a 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4b52      	ldr	r3, [pc, #328]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	091b      	lsrs	r3, r3, #4
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	4950      	ldr	r1, [pc, #320]	; (8001104 <HAL_RCC_OscConfig+0x274>)
 8000fc2:	5ccb      	ldrb	r3, [r1, r3]
 8000fc4:	f003 031f 	and.w	r3, r3, #31
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_RCC_OscConfig+0x278>)
 8000fce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fd0:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_RCC_OscConfig+0x27c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa83 	bl	80004e0 <HAL_InitTick>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d052      	beq.n	800108a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	e327      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d032      	beq.n	8001056 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a42      	ldr	r2, [pc, #264]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc10 	bl	8000820 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001004:	f7ff fc0c 	bl	8000820 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e310      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a36      	ldr	r2, [pc, #216]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4931      	ldr	r1, [pc, #196]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	492c      	ldr	r1, [pc, #176]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
 8001054:	e01a      	b.n	800108c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a29      	ldr	r2, [pc, #164]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001062:	f7ff fbdd 	bl	8000820 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800106a:	f7ff fbd9 	bl	8000820 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e2dd      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x1da>
 8001088:	e000      	b.n	800108c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800108a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d074      	beq.n	8001182 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b08      	cmp	r3, #8
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x21a>
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b0c      	cmp	r3, #12
 80010a2:	d10e      	bne.n	80010c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d10b      	bne.n	80010c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d064      	beq.n	8001180 <HAL_RCC_OscConfig+0x2f0>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d160      	bne.n	8001180 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e2ba      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x24a>
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e026      	b.n	8001128 <HAL_RCC_OscConfig+0x298>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e2:	d115      	bne.n	8001110 <HAL_RCC_OscConfig+0x280>
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a02      	ldr	r2, [pc, #8]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x298>
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	08003c98 	.word	0x08003c98
 8001108:	20000000 	.word	0x20000000
 800110c:	20000004 	.word	0x20000004
 8001110:	4ba0      	ldr	r3, [pc, #640]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a9f      	ldr	r2, [pc, #636]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b9d      	ldr	r3, [pc, #628]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a9c      	ldr	r2, [pc, #624]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fb76 	bl	8000820 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fb72 	bl	8000820 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e276      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114a:	4b92      	ldr	r3, [pc, #584]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x2a8>
 8001156:	e014      	b.n	8001182 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fb62 	bl	8000820 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fb5e 	bl	8000820 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e262      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001172:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x2d0>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d060      	beq.n	8001250 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_OscConfig+0x310>
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d119      	bne.n	80011ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d116      	bne.n	80011ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a0:	4b7c      	ldr	r3, [pc, #496]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_OscConfig+0x328>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e23f      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	061b      	lsls	r3, r3, #24
 80011c6:	4973      	ldr	r1, [pc, #460]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011cc:	e040      	b.n	8001250 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d023      	beq.n	800121e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6e      	ldr	r2, [pc, #440]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e2:	f7ff fb1d 	bl	8000820 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fb19 	bl	8000820 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e21d      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011fc:	4b65      	ldr	r3, [pc, #404]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b62      	ldr	r3, [pc, #392]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	495f      	ldr	r1, [pc, #380]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001218:	4313      	orrs	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
 800121c:	e018      	b.n	8001250 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff faf9 	bl	8000820 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff faf5 	bl	8000820 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1f9      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d03c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01c      	beq.n	800129e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126a:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff fad4 	bl	8000820 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fad0 	bl	8000820 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1d4      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ef      	beq.n	800127c <HAL_RCC_OscConfig+0x3ec>
 800129c:	e01b      	b.n	80012d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80012a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a4:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff fab7 	bl	8000820 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b6:	f7ff fab3 	bl	8000820 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1b7      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80012ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ef      	bne.n	80012b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80a6 	beq.w	8001430 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10d      	bne.n	8001310 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130c:	2301      	movs	r3, #1
 800130e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_RCC_OscConfig+0x508>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d118      	bne.n	800134e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_RCC_OscConfig+0x508>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_RCC_OscConfig+0x508>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001328:	f7ff fa7a 	bl	8000820 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001330:	f7ff fa76 	bl	8000820 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e17a      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_RCC_OscConfig+0x508>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d108      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d8>
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001366:	e029      	b.n	80013bc <HAL_RCC_OscConfig+0x52c>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d115      	bne.n	800139c <HAL_RCC_OscConfig+0x50c>
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001376:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_RCC_OscConfig+0x504>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001390:	e014      	b.n	80013bc <HAL_RCC_OscConfig+0x52c>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	40007000 	.word	0x40007000
 800139c:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a2:	4a9b      	ldr	r2, [pc, #620]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ac:	4b98      	ldr	r3, [pc, #608]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80013ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b2:	4a97      	ldr	r2, [pc, #604]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d016      	beq.n	80013f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fa2c 	bl	8000820 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fa28 	bl	8000820 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e12a      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e2:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80013e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ed      	beq.n	80013cc <HAL_RCC_OscConfig+0x53c>
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f2:	f7ff fa15 	bl	8000820 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fa11 	bl	8000820 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e113      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001410:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ed      	bne.n	80013fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d105      	bne.n	8001430 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001424:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	4a79      	ldr	r2, [pc, #484]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 800142a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80fe 	beq.w	8001636 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	2b02      	cmp	r3, #2
 8001440:	f040 80d0 	bne.w	80015e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001444:	4b72      	ldr	r3, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	429a      	cmp	r2, r3
 8001456:	d130      	bne.n	80014ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	3b01      	subs	r3, #1
 8001464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d127      	bne.n	80014ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d11f      	bne.n	80014ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001484:	2a07      	cmp	r2, #7
 8001486:	bf14      	ite	ne
 8001488:	2201      	movne	r2, #1
 800148a:	2200      	moveq	r2, #0
 800148c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800148e:	4293      	cmp	r3, r2
 8001490:	d113      	bne.n	80014ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	3b01      	subs	r3, #1
 80014a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	3b01      	subs	r3, #1
 80014b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d06e      	beq.n	8001598 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	d069      	beq.n	8001594 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0ad      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a4b      	ldr	r2, [pc, #300]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014e8:	f7ff f99a 	bl	8000820 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff f996 	bl	8000820 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e09a      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_RCC_OscConfig+0x784>)
 8001514:	4013      	ands	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800151e:	3a01      	subs	r2, #1
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001528:	0212      	lsls	r2, r2, #8
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001530:	0852      	lsrs	r2, r2, #1
 8001532:	3a01      	subs	r2, #1
 8001534:	0552      	lsls	r2, r2, #21
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800153c:	0852      	lsrs	r2, r2, #1
 800153e:	3a01      	subs	r2, #1
 8001540:	0652      	lsls	r2, r2, #25
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001548:	0912      	lsrs	r2, r2, #4
 800154a:	0452      	lsls	r2, r2, #17
 800154c:	430a      	orrs	r2, r1
 800154e:	4930      	ldr	r1, [pc, #192]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800156c:	f7ff f958 	bl	8000820 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff f954 	bl	8000820 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e058      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001592:	e050      	b.n	8001636 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e04f      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d148      	bne.n	8001636 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015bc:	f7ff f930 	bl	8000820 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f92c 	bl	8000820 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e030      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x734>
 80015e2:	e028      	b.n	8001636 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d023      	beq.n	8001632 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_RCC_OscConfig+0x780>)
 80015f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff f913 	bl	8000820 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fc:	e00c      	b.n	8001618 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff f90f 	bl	8000820 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d905      	bls.n	8001618 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e013      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
 8001610:	40021000 	.word	0x40021000
 8001614:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_OscConfig+0x7b0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ec      	bne.n	80015fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x7b0>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4905      	ldr	r1, [pc, #20]	; (8001640 <HAL_RCC_OscConfig+0x7b0>)
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x7b4>)
 800162c:	4013      	ands	r3, r2
 800162e:	60cb      	str	r3, [r1, #12]
 8001630:	e001      	b.n	8001636 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	feeefffc 	.word	0xfeeefffc

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0e7      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b75      	ldr	r3, [pc, #468]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d910      	bls.n	800168c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 0207 	bic.w	r2, r3, #7
 8001672:	4970      	ldr	r1, [pc, #448]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cf      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d010      	beq.n	80016ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d908      	bls.n	80016ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4960      	ldr	r1, [pc, #384]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d04c      	beq.n	8001760 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d121      	bne.n	800171e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0a6      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e6:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d115      	bne.n	800171e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e09a      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016fe:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e08e      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e086      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b46      	ldr	r3, [pc, #280]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4943      	ldr	r1, [pc, #268]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001730:	f7ff f876 	bl	8000820 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f872 	bl	8000820 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e06e      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d010      	beq.n	800178e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001778:	429a      	cmp	r2, r3
 800177a:	d208      	bcs.n	800178e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	492b      	ldr	r1, [pc, #172]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d210      	bcs.n	80017be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 0207 	bic.w	r2, r3, #7
 80017a4:	4923      	ldr	r1, [pc, #140]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_RCC_ClockConfig+0x1ec>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e036      	b.n	800182c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	4918      	ldr	r1, [pc, #96]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4910      	ldr	r1, [pc, #64]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017fc:	f000 f824 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	490b      	ldr	r1, [pc, #44]	; (800183c <HAL_RCC_ClockConfig+0x1f4>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1fc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe5d 	bl	80004e0 <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	72fb      	strb	r3, [r7, #11]

  return status;
 800182a:	7afb      	ldrb	r3, [r7, #11]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	08003c98 	.word	0x08003c98
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x34>
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d121      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d11e      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d107      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e005      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10d      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d102      	bne.n	80018c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_RCC_GetSysClockFreq+0x110>)
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	e004      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_RCC_GetSysClockFreq+0x114>)
 80018ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d134      	bne.n	8001940 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0xa6>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d003      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0xac>
 80018ec:	e005      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_RCC_GetSysClockFreq+0x110>)
 80018f0:	617b      	str	r3, [r7, #20]
      break;
 80018f2:	e005      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_RCC_GetSysClockFreq+0x114>)
 80018f6:	617b      	str	r3, [r7, #20]
      break;
 80018f8:	e002      	b.n	8001900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	617b      	str	r3, [r7, #20]
      break;
 80018fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	3301      	adds	r3, #1
 800190c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	fb03 f202 	mul.w	r2, r3, r2
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_RCC_GetSysClockFreq+0x108>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	0e5b      	lsrs	r3, r3, #25
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	3301      	adds	r3, #1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001940:	69bb      	ldr	r3, [r7, #24]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	08003cb0 	.word	0x08003cb0
 8001958:	00f42400 	.word	0x00f42400
 800195c:	007a1200 	.word	0x007a1200

08001960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_RCC_GetHCLKFreq+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800197c:	f7ff fff0 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	08003ca8 	.word	0x08003ca8

080019a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	220f      	movs	r2, #15
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_RCC_GetClockConfig+0x60>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0207 	and.w	r2, r3, #7
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40022000 	.word	0x40022000

08001a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a20:	f7ff f9d2 	bl	8000dc8 <HAL_PWREx_GetVoltageRange>
 8001a24:	6178      	str	r0, [r7, #20]
 8001a26:	e014      	b.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a24      	ldr	r2, [pc, #144]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a40:	f7ff f9c2 	bl	8000dc8 <HAL_PWREx_GetVoltageRange>
 8001a44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a58:	d10b      	bne.n	8001a72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d919      	bls.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2ba0      	cmp	r3, #160	; 0xa0
 8001a64:	d902      	bls.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a66:	2302      	movs	r3, #2
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e013      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e010      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d902      	bls.n	8001a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a78:	2303      	movs	r3, #3
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e00a      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b80      	cmp	r3, #128	; 0x80
 8001a82:	d102      	bne.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e004      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b70      	cmp	r3, #112	; 0x70
 8001a8e:	d101      	bne.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a90:	2301      	movs	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 0207 	bic.w	r2, r3, #7
 8001a9c:	4909      	ldr	r1, [pc, #36]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e049      	b.n	8001b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f841 	bl	8001b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 f9f8 	bl	8001efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d001      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e04f      	b.n	8001c44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01d      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x76>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bce:	d018      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x76>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x76>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00e      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x76>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x76>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_TIM_Base_Start_IT+0x76>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d115      	bne.n	8001c2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d015      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d011      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2c:	e008      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e000      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40013400 	.word	0x40013400
 8001c64:	40014000 	.word	0x40014000
 8001c68:	00010007 	.word	0x00010007

08001c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0202 	mvn.w	r2, #2
 8001c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f905 	bl	8001ebe <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8f7 	bl	8001eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f908 	bl	8001ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d122      	bne.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11b      	bne.n	8001d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0204 	mvn.w	r2, #4
 8001cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8db 	bl	8001ebe <HAL_TIM_IC_CaptureCallback>
 8001d08:	e005      	b.n	8001d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8cd 	bl	8001eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f8de 	bl	8001ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d122      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d11b      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0208 	mvn.w	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8b1 	bl	8001ebe <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8a3 	bl	8001eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8b4 	bl	8001ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d122      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d11b      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0210 	mvn.w	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f887 	bl	8001ebe <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f879 	bl	8001eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f88a 	bl	8001ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0201 	mvn.w	r2, #1
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fb3c 	bl	8000468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b80      	cmp	r3, #128	; 0x80
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f914 	bl	8002044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2a:	d10e      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	2b80      	cmp	r3, #128	; 0x80
 8001e38:	d107      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f907 	bl	8002058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d10e      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e62:	2b40      	cmp	r3, #64	; 0x40
 8001e64:	d107      	bne.n	8001e76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f838 	bl	8001ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d10e      	bne.n	8001ea2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d107      	bne.n	8001ea2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0220 	mvn.w	r2, #32
 8001e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8c7 	bl	8002030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <TIM_Base_SetConfig+0x114>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d00f      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a3d      	ldr	r2, [pc, #244]	; (8002014 <TIM_Base_SetConfig+0x118>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00b      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3c      	ldr	r2, [pc, #240]	; (8002018 <TIM_Base_SetConfig+0x11c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	; (800201c <TIM_Base_SetConfig+0x120>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d003      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <TIM_Base_SetConfig+0x124>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d108      	bne.n	8001f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <TIM_Base_SetConfig+0x114>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01f      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d01b      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <TIM_Base_SetConfig+0x118>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d017      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <TIM_Base_SetConfig+0x11c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2a      	ldr	r2, [pc, #168]	; (800201c <TIM_Base_SetConfig+0x120>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00f      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a29      	ldr	r2, [pc, #164]	; (8002020 <TIM_Base_SetConfig+0x124>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a28      	ldr	r2, [pc, #160]	; (8002024 <TIM_Base_SetConfig+0x128>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a27      	ldr	r2, [pc, #156]	; (8002028 <TIM_Base_SetConfig+0x12c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x9a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <TIM_Base_SetConfig+0x130>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <TIM_Base_SetConfig+0x114>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00f      	beq.n	8001ff4 <TIM_Base_SetConfig+0xf8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <TIM_Base_SetConfig+0x124>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00b      	beq.n	8001ff4 <TIM_Base_SetConfig+0xf8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a11      	ldr	r2, [pc, #68]	; (8002024 <TIM_Base_SetConfig+0x128>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <TIM_Base_SetConfig+0x12c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <TIM_Base_SetConfig+0xf8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <TIM_Base_SetConfig+0x130>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	615a      	str	r2, [r3, #20]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40013400 	.word	0x40013400
 8002024:	40014000 	.word	0x40014000
 8002028:	40014400 	.word	0x40014400
 800202c:	40014800 	.word	0x40014800

08002030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 0208 	add.w	r2, r3, #8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f103 0208 	add.w	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f103 0208 	add.w	r2, r3, #8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08c      	sub	sp, #48	; 0x30
 80020ca:	af04      	add	r7, sp, #16
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fe7e 	bl	8002ddc <pvPortMalloc>
 80020e0:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00e      	beq.n	8002106 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020e8:	2054      	movs	r0, #84	; 0x54
 80020ea:	f000 fe77 	bl	8002ddc <pvPortMalloc>
 80020ee:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
 80020fc:	e005      	b.n	800210a <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f000 ff4c 	bl	8002f9c <vPortFree>
 8002104:	e001      	b.n	800210a <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	2300      	movs	r3, #0
 8002114:	9303      	str	r3, [sp, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f80e 	bl	8002148 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800212c:	69f8      	ldr	r0, [r7, #28]
 800212e:	f000 f8ab 	bl	8002288 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e002      	b.n	800213e <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800213e:	69bb      	ldr	r3, [r7, #24]
    }
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002160:	3b01      	subs	r3, #1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <prvInitialiseNewTask+0x48>
        __asm volatile
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	617b      	str	r3, [r7, #20]
    }
 800218c:	bf00      	nop
 800218e:	e7fe      	b.n	800218e <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01f      	beq.n	80021d6 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e012      	b.n	80021c2 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	7819      	ldrb	r1, [r3, #0]
 80021a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	3334      	adds	r3, #52	; 0x34
 80021ac:	460a      	mov	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	3301      	adds	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	2b09      	cmp	r3, #9
 80021c6:	d9e9      	bls.n	800219c <prvInitialiseNewTask+0x54>
 80021c8:	e000      	b.n	80021cc <prvInitialiseNewTask+0x84>
            {
                break;
 80021ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021d4:	e003      	b.n	80021de <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d90a      	bls.n	80021fa <prvInitialiseNewTask+0xb2>
        __asm volatile
 80021e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	613b      	str	r3, [r7, #16]
    }
 80021f6:	bf00      	nop
 80021f8:	e7fe      	b.n	80021f8 <prvInitialiseNewTask+0xb0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d901      	bls.n	8002204 <prvInitialiseNewTask+0xbc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002200:	2304      	movs	r3, #4
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	3304      	adds	r3, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff4c 	bl	80020ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	3318      	adds	r3, #24
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff47 	bl	80020ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002222:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	f1c3 0205 	rsb	r2, r3, #5
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	2200      	movs	r2, #0
 8002238:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	3340      	adds	r3, #64	; 0x40
 800223e:	2208      	movs	r2, #8
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 ffec 	bl	8003220 <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	334c      	adds	r3, #76	; 0x4c
 800224c:	2204      	movs	r2, #4
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f000 ffe5 	bl	8003220 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	3350      	adds	r3, #80	; 0x50
 800225a:	2201      	movs	r2, #1
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f000 ffde 	bl	8003220 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	68f9      	ldr	r1, [r7, #12]
 8002268:	69b8      	ldr	r0, [r7, #24]
 800226a:	f000 fbaf 	bl	80029cc <pxPortInitialiseStack>
 800226e:	4602      	mov	r2, r0
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002280:	bf00      	nop
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002290:	f000 fcca 	bl	8002c28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002294:	4b38      	ldr	r3, [pc, #224]	; (8002378 <prvAddNewTaskToReadyList+0xf0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	4a37      	ldr	r2, [pc, #220]	; (8002378 <prvAddNewTaskToReadyList+0xf0>)
 800229c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <prvAddNewTaskToReadyList+0xf4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022a6:	4a35      	ldr	r2, [pc, #212]	; (800237c <prvAddNewTaskToReadyList+0xf4>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <prvAddNewTaskToReadyList+0xf0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d110      	bne.n	80022d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022b4:	f000 fb30 	bl	8002918 <prvInitialiseTaskLists>
 80022b8:	e00d      	b.n	80022d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <prvAddNewTaskToReadyList+0xf8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <prvAddNewTaskToReadyList+0xf4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d802      	bhi.n	80022d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <prvAddNewTaskToReadyList+0xf4>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <prvAddNewTaskToReadyList+0xfc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a29      	ldr	r2, [pc, #164]	; (8002384 <prvAddNewTaskToReadyList+0xfc>)
 80022de:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	2201      	movs	r2, #1
 80022e6:	409a      	lsls	r2, r3
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <prvAddNewTaskToReadyList+0x100>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <prvAddNewTaskToReadyList+0x100>)
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f6:	4925      	ldr	r1, [pc, #148]	; (800238c <prvAddNewTaskToReadyList+0x104>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3304      	adds	r3, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	3204      	adds	r2, #4
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1d1a      	adds	r2, r3, #4
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <prvAddNewTaskToReadyList+0x104>)
 8002336:	441a      	add	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	4912      	ldr	r1, [pc, #72]	; (800238c <prvAddNewTaskToReadyList+0x104>)
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	480e      	ldr	r0, [pc, #56]	; (800238c <prvAddNewTaskToReadyList+0x104>)
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4403      	add	r3, r0
 800235c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800235e:	f000 fc93 	bl	8002c88 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <prvAddNewTaskToReadyList+0xf8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <prvAddNewTaskToReadyList+0xe6>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <prvAddNewTaskToReadyList+0xf4>)
 800236c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000190 	.word	0x20000190
 800237c:	200000e4 	.word	0x200000e4
 8002380:	2000019c 	.word	0x2000019c
 8002384:	200001ac 	.word	0x200001ac
 8002388:	20000198 	.word	0x20000198
 800238c:	200000e8 	.word	0x200000e8

08002390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <vTaskStartScheduler+0x7c>)
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2300      	movs	r3, #0
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a4:	491a      	ldr	r1, [pc, #104]	; (8002410 <vTaskStartScheduler+0x80>)
 80023a6:	481b      	ldr	r0, [pc, #108]	; (8002414 <vTaskStartScheduler+0x84>)
 80023a8:	f7ff fe8d 	bl	80020c6 <xTaskCreate>
 80023ac:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d116      	bne.n	80023e2 <vTaskStartScheduler+0x52>
        __asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	60bb      	str	r3, [r7, #8]
    }
 80023c6:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <vTaskStartScheduler+0x88>)
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295
 80023ce:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <vTaskStartScheduler+0x8c>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <vTaskStartScheduler+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80023dc:	f000 fb82 	bl	8002ae4 <xPortStartScheduler>
 80023e0:	e00e      	b.n	8002400 <vTaskStartScheduler+0x70>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d10a      	bne.n	8002400 <vTaskStartScheduler+0x70>
        __asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	607b      	str	r3, [r7, #4]
    }
 80023fc:	bf00      	nop
 80023fe:	e7fe      	b.n	80023fe <vTaskStartScheduler+0x6e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <vTaskStartScheduler+0x94>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200001b4 	.word	0x200001b4
 8002410:	08003c90 	.word	0x08003c90
 8002414:	080028f5 	.word	0x080028f5
 8002418:	200001b0 	.word	0x200001b0
 800241c:	2000019c 	.word	0x2000019c
 8002420:	20000194 	.word	0x20000194
 8002424:	2000000c 	.word	0x2000000c

08002428 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <vTaskSuspendAll+0x18>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	4a03      	ldr	r2, [pc, #12]	; (8002440 <vTaskSuspendAll+0x18>)
 8002434:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	200001b8 	.word	0x200001b8

08002444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002452:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <xTaskResumeAll+0x1bc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <xTaskResumeAll+0x2c>
        __asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	607b      	str	r3, [r7, #4]
    }
 800246c:	bf00      	nop
 800246e:	e7fe      	b.n	800246e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002470:	f000 fbda 	bl	8002c28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002474:	4b62      	ldr	r3, [pc, #392]	; (8002600 <xTaskResumeAll+0x1bc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3b01      	subs	r3, #1
 800247a:	4a61      	ldr	r2, [pc, #388]	; (8002600 <xTaskResumeAll+0x1bc>)
 800247c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800247e:	4b60      	ldr	r3, [pc, #384]	; (8002600 <xTaskResumeAll+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80b4 	bne.w	80025f0 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002488:	4b5e      	ldr	r3, [pc, #376]	; (8002604 <xTaskResumeAll+0x1c0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80af 	beq.w	80025f0 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002492:	e08a      	b.n	80025aa <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002494:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <xTaskResumeAll+0x1c4>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	6a12      	ldr	r2, [r2, #32]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	69d2      	ldr	r2, [r2, #28]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3318      	adds	r3, #24
 80024be:	429a      	cmp	r2, r3
 80024c0:	d103      	bne.n	80024ca <xTaskResumeAll+0x86>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	6a1a      	ldr	r2, [r3, #32]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	68d2      	ldr	r2, [r2, #12]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	6892      	ldr	r2, [r2, #8]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3304      	adds	r3, #4
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d103      	bne.n	8002508 <xTaskResumeAll+0xc4>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2201      	movs	r2, #1
 800251e:	409a      	lsls	r2, r3
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <xTaskResumeAll+0x1c8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	4a39      	ldr	r2, [pc, #228]	; (800260c <xTaskResumeAll+0x1c8>)
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	4938      	ldr	r1, [pc, #224]	; (8002610 <xTaskResumeAll+0x1cc>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	3304      	adds	r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	3204      	adds	r2, #4
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4a28      	ldr	r2, [pc, #160]	; (8002610 <xTaskResumeAll+0x1cc>)
 800256e:	441a      	add	r2, r3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	615a      	str	r2, [r3, #20]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	4925      	ldr	r1, [pc, #148]	; (8002610 <xTaskResumeAll+0x1cc>)
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1c59      	adds	r1, r3, #1
 8002588:	4821      	ldr	r0, [pc, #132]	; (8002610 <xTaskResumeAll+0x1cc>)
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4403      	add	r3, r0
 8002594:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <xTaskResumeAll+0x1d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d302      	bcc.n	80025aa <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <xTaskResumeAll+0x1d4>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <xTaskResumeAll+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f47f af70 	bne.w	8002494 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025ba:	f000 f9eb 	bl	8002994 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <xTaskResumeAll+0x1d8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025ca:	f000 f829 	bl	8002620 <xTaskIncrementTick>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <xTaskResumeAll+0x1d4>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3b01      	subs	r3, #1
 80025de:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f1      	bne.n	80025ca <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <xTaskResumeAll+0x1d8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <xTaskResumeAll+0x1d4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025f0:	f000 fb4a 	bl	8002c88 <vPortExitCritical>

    return xAlreadyYielded;
 80025f4:	697b      	ldr	r3, [r7, #20]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200001b8 	.word	0x200001b8
 8002604:	20000190 	.word	0x20000190
 8002608:	2000017c 	.word	0x2000017c
 800260c:	20000198 	.word	0x20000198
 8002610:	200000e8 	.word	0x200000e8
 8002614:	200000e4 	.word	0x200000e4
 8002618:	200001a4 	.word	0x200001a4
 800261c:	200001a0 	.word	0x200001a0

08002620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800262a:	4b6e      	ldr	r3, [pc, #440]	; (80027e4 <xTaskIncrementTick+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 80cd 	bne.w	80027ce <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002634:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <xTaskIncrementTick+0x1c8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800263c:	4a6a      	ldr	r2, [pc, #424]	; (80027e8 <xTaskIncrementTick+0x1c8>)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d120      	bne.n	800268a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <xTaskIncrementTick+0x1cc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <xTaskIncrementTick+0x48>
        __asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	607b      	str	r3, [r7, #4]
    }
 8002664:	bf00      	nop
 8002666:	e7fe      	b.n	8002666 <xTaskIncrementTick+0x46>
 8002668:	4b60      	ldr	r3, [pc, #384]	; (80027ec <xTaskIncrementTick+0x1cc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	4b60      	ldr	r3, [pc, #384]	; (80027f0 <xTaskIncrementTick+0x1d0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <xTaskIncrementTick+0x1cc>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4a5e      	ldr	r2, [pc, #376]	; (80027f0 <xTaskIncrementTick+0x1d0>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <xTaskIncrementTick+0x1d4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	4a5c      	ldr	r2, [pc, #368]	; (80027f4 <xTaskIncrementTick+0x1d4>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	f000 f985 	bl	8002994 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800268a:	4b5b      	ldr	r3, [pc, #364]	; (80027f8 <xTaskIncrementTick+0x1d8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a3a      	ldr	r2, [r7, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	f0c0 80a1 	bcc.w	80027d8 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002696:	4b55      	ldr	r3, [pc, #340]	; (80027ec <xTaskIncrementTick+0x1cc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d104      	bne.n	80026aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a0:	4b55      	ldr	r3, [pc, #340]	; (80027f8 <xTaskIncrementTick+0x1d8>)
 80026a2:	f04f 32ff 	mov.w	r2, #4294967295
 80026a6:	601a      	str	r2, [r3, #0]
                    break;
 80026a8:	e096      	b.n	80027d8 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026aa:	4b50      	ldr	r3, [pc, #320]	; (80027ec <xTaskIncrementTick+0x1cc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80026ba:	6a3a      	ldr	r2, [r7, #32]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d203      	bcs.n	80026ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026c2:	4a4d      	ldr	r2, [pc, #308]	; (80027f8 <xTaskIncrementTick+0x1d8>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80026c8:	e086      	b.n	80027d8 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	68d2      	ldr	r2, [r2, #12]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3304      	adds	r3, #4
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d103      	bne.n	80026f8 <xTaskIncrementTick+0xd8>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01e      	beq.n	800274e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	6a12      	ldr	r2, [r2, #32]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	69d2      	ldr	r2, [r2, #28]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3318      	adds	r3, #24
 8002732:	429a      	cmp	r2, r3
 8002734:	d103      	bne.n	800273e <xTaskIncrementTick+0x11e>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	2201      	movs	r2, #1
 8002754:	409a      	lsls	r2, r3
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <xTaskIncrementTick+0x1dc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	4a27      	ldr	r2, [pc, #156]	; (80027fc <xTaskIncrementTick+0x1dc>)
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	4926      	ldr	r1, [pc, #152]	; (8002800 <xTaskIncrementTick+0x1e0>)
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3304      	adds	r3, #4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	3204      	adds	r2, #4
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1d1a      	adds	r2, r3, #4
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <xTaskIncrementTick+0x1e0>)
 80027a4:	441a      	add	r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ae:	4914      	ldr	r1, [pc, #80]	; (8002800 <xTaskIncrementTick+0x1e0>)
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1c59      	adds	r1, r3, #1
 80027be:	4810      	ldr	r0, [pc, #64]	; (8002800 <xTaskIncrementTick+0x1e0>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4403      	add	r3, r0
 80027ca:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027cc:	e763      	b.n	8002696 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <xTaskIncrementTick+0x1e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <xTaskIncrementTick+0x1e4>)
 80027d6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200001b8 	.word	0x200001b8
 80027e8:	20000194 	.word	0x20000194
 80027ec:	20000174 	.word	0x20000174
 80027f0:	20000178 	.word	0x20000178
 80027f4:	200001a8 	.word	0x200001a8
 80027f8:	200001b0 	.word	0x200001b0
 80027fc:	20000198 	.word	0x20000198
 8002800:	200000e8 	.word	0x200000e8
 8002804:	200001a0 	.word	0x200001a0

08002808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <vTaskSwitchContext+0xd0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <vTaskSwitchContext+0xd4>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800281c:	e056      	b.n	80028cc <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <vTaskSwitchContext+0xd4>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <vTaskSwitchContext+0xd8>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <vTaskSwitchContext+0xd8>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <vTaskSwitchContext+0xdc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d909      	bls.n	800284a <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <vTaskSwitchContext+0xd8>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <vTaskSwitchContext+0xdc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1ad1      	subs	r1, r2, r3
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <vTaskSwitchContext+0xe0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002846:	440a      	add	r2, r1
 8002848:	649a      	str	r2, [r3, #72]	; 0x48
                ulTaskSwitchedInTime = ulTotalRunTime;
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <vTaskSwitchContext+0xd8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <vTaskSwitchContext+0xdc>)
 8002850:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <vTaskSwitchContext+0xe4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	f1c3 031f 	rsb	r3, r3, #31
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	4921      	ldr	r1, [pc, #132]	; (80028f0 <vTaskSwitchContext+0xe8>)
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <vTaskSwitchContext+0x8a>
        __asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	607b      	str	r3, [r7, #4]
    }
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <vTaskSwitchContext+0x88>
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <vTaskSwitchContext+0xe8>)
 800289e:	4413      	add	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	3308      	adds	r3, #8
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d104      	bne.n	80028c2 <vTaskSwitchContext+0xba>
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a07      	ldr	r2, [pc, #28]	; (80028e8 <vTaskSwitchContext+0xe0>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	200001b8 	.word	0x200001b8
 80028dc:	200001a4 	.word	0x200001a4
 80028e0:	200001c0 	.word	0x200001c0
 80028e4:	200001bc 	.word	0x200001bc
 80028e8:	200000e4 	.word	0x200000e4
 80028ec:	20000198 	.word	0x20000198
 80028f0:	200000e8 	.word	0x200000e8

080028f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80028fc:	f000 f842 	bl	8002984 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <prvIdleTask+0x20>)
 8002902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002910:	e7f4      	b.n	80028fc <prvIdleTask+0x8>
 8002912:	bf00      	nop
 8002914:	e000ed04 	.word	0xe000ed04

08002918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	e00c      	b.n	800293e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4a0f      	ldr	r2, [pc, #60]	; (800296c <prvInitialiseTaskLists+0x54>)
 8002930:	4413      	add	r3, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fb9a 	bl	800206c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3301      	adds	r3, #1
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d9ef      	bls.n	8002924 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002944:	480a      	ldr	r0, [pc, #40]	; (8002970 <prvInitialiseTaskLists+0x58>)
 8002946:	f7ff fb91 	bl	800206c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800294a:	480a      	ldr	r0, [pc, #40]	; (8002974 <prvInitialiseTaskLists+0x5c>)
 800294c:	f7ff fb8e 	bl	800206c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002950:	4809      	ldr	r0, [pc, #36]	; (8002978 <prvInitialiseTaskLists+0x60>)
 8002952:	f7ff fb8b 	bl	800206c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <prvInitialiseTaskLists+0x64>)
 8002958:	4a05      	ldr	r2, [pc, #20]	; (8002970 <prvInitialiseTaskLists+0x58>)
 800295a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <prvInitialiseTaskLists+0x68>)
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <prvInitialiseTaskLists+0x5c>)
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200000e8 	.word	0x200000e8
 8002970:	2000014c 	.word	0x2000014c
 8002974:	20000160 	.word	0x20000160
 8002978:	2000017c 	.word	0x2000017c
 800297c:	20000174 	.word	0x20000174
 8002980:	20000178 	.word	0x20000178

08002984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <prvResetNextTaskUnblockTime+0x30>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <prvResetNextTaskUnblockTime+0x34>)
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029aa:	e005      	b.n	80029b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <prvResetNextTaskUnblockTime+0x30>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <prvResetNextTaskUnblockTime+0x34>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000174 	.word	0x20000174
 80029c8:	200001b0 	.word	0x200001b0

080029cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b04      	subs	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b04      	subs	r3, #4
 80029ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b04      	subs	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <pxPortInitialiseStack+0x64>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b14      	subs	r3, #20
 8002a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3b04      	subs	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f06f 0202 	mvn.w	r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3b20      	subs	r3, #32
 8002a20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	08002a35 	.word	0x08002a35

08002a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <prvTaskExitError+0x54>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d00a      	beq.n	8002a5e <prvTaskExitError+0x2a>
        __asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	60fb      	str	r3, [r7, #12]
    }
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <prvTaskExitError+0x28>
        __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	60bb      	str	r3, [r7, #8]
    }
 8002a70:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a72:	bf00      	nop
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0fc      	beq.n	8002a74 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	20000010 	.word	0x20000010
 8002a8c:	00000000 	.word	0x00000000

08002a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <pxCurrentTCBConst2>)
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	6808      	ldr	r0, [r1, #0]
 8002a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	f380 8809 	msr	PSP, r0
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8811 	msr	BASEPRI, r0
 8002aaa:	4770      	bx	lr
 8002aac:	f3af 8000 	nop.w

08002ab0 <pxCurrentTCBConst2>:
 8002ab0:	200000e4 	.word	0x200000e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop

08002ab8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ab8:	4808      	ldr	r0, [pc, #32]	; (8002adc <prvPortStartFirstTask+0x24>)
 8002aba:	6800      	ldr	r0, [r0, #0]
 8002abc:	6800      	ldr	r0, [r0, #0]
 8002abe:	f380 8808 	msr	MSP, r0
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f380 8814 	msr	CONTROL, r0
 8002aca:	b662      	cpsie	i
 8002acc:	b661      	cpsie	f
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	df00      	svc	0
 8002ad8:	bf00      	nop
 8002ada:	0000      	.short	0x0000
 8002adc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop

08002ae4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <xPortStartScheduler+0x120>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a46      	ldr	r2, [pc, #280]	; (8002c08 <xPortStartScheduler+0x124>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10a      	bne.n	8002b0a <xPortStartScheduler+0x26>
        __asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
    }
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <xPortStartScheduler+0x120>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3f      	ldr	r2, [pc, #252]	; (8002c0c <xPortStartScheduler+0x128>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10a      	bne.n	8002b2a <xPortStartScheduler+0x46>
        __asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	60fb      	str	r3, [r7, #12]
    }
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <xPortStartScheduler+0x12c>)
 8002b2c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <xPortStartScheduler+0x130>)
 8002b50:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b58:	e009      	b.n	8002b6e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b62:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b80      	cmp	r3, #128	; 0x80
 8002b78:	d0ef      	beq.n	8002b5a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00a      	beq.n	8002b9c <xPortStartScheduler+0xb8>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	60bb      	str	r3, [r7, #8]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <xPortStartScheduler+0x134>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <xPortStartScheduler+0x134>)
 8002ba4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <xPortStartScheduler+0x134>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <xPortStartScheduler+0x134>)
 8002bb0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <xPortStartScheduler+0x138>)
 8002bcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bd2:	f000 f8db 	bl	8002d8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <xPortStartScheduler+0x13c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bdc:	f000 f8f2 	bl	8002dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <xPortStartScheduler+0x140>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <xPortStartScheduler+0x140>)
 8002be6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002bec:	f7ff ff64 	bl	8002ab8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002bf0:	f7ff fe0a 	bl	8002808 <vTaskSwitchContext>
    prvTaskExitError();
 8002bf4:	f7ff ff1e 	bl	8002a34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000ed00 	.word	0xe000ed00
 8002c08:	410fc271 	.word	0x410fc271
 8002c0c:	410fc270 	.word	0x410fc270
 8002c10:	e000e400 	.word	0xe000e400
 8002c14:	200001c4 	.word	0x200001c4
 8002c18:	200001c8 	.word	0x200001c8
 8002c1c:	e000ed20 	.word	0xe000ed20
 8002c20:	20000010 	.word	0x20000010
 8002c24:	e000ef34 	.word	0xe000ef34

08002c28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	607b      	str	r3, [r7, #4]
    }
 8002c40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <vPortEnterCritical+0x58>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <vPortEnterCritical+0x58>)
 8002c4a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <vPortEnterCritical+0x58>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10f      	bne.n	8002c74 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <vPortEnterCritical+0x5c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <vPortEnterCritical+0x4c>
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	603b      	str	r3, [r7, #0]
    }
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <vPortEnterCritical+0x4a>
    }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20000010 	.word	0x20000010
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <vPortExitCritical+0x50>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <vPortExitCritical+0x24>
        __asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	607b      	str	r3, [r7, #4]
    }
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <vPortExitCritical+0x50>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <vPortExitCritical+0x50>)
 8002cb4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <vPortExitCritical+0x50>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <vPortExitCritical+0x42>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002cc8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000010 	.word	0x20000010
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ce0:	f3ef 8009 	mrs	r0, PSP
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <pxCurrentTCBConst>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f01e 0f10 	tst.w	lr, #16
 8002cf0:	bf08      	it	eq
 8002cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d04:	f380 8811 	msr	BASEPRI, r0
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f7ff fd7a 	bl	8002808 <vTaskSwitchContext>
 8002d14:	f04f 0000 	mov.w	r0, #0
 8002d18:	f380 8811 	msr	BASEPRI, r0
 8002d1c:	bc09      	pop	{r0, r3}
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	6808      	ldr	r0, [r1, #0]
 8002d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d26:	f01e 0f10 	tst.w	lr, #16
 8002d2a:	bf08      	it	eq
 8002d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d30:	f380 8809 	msr	PSP, r0
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	f3af 8000 	nop.w

08002d40 <pxCurrentTCBConst>:
 8002d40:	200000e4 	.word	0x200000e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
    }
 8002d60:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d62:	f7ff fc5d 	bl	8002620 <xTaskIncrementTick>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <SysTick_Handler+0x40>)
 8002d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f383 8811 	msr	BASEPRI, r3
    }
 8002d7e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <vPortSetupTimerInterrupt+0x28>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <vPortSetupTimerInterrupt+0x2c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <vPortSetupTimerInterrupt+0x30>)
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <vPortSetupTimerInterrupt+0x34>)
 8002da0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <vPortSetupTimerInterrupt+0x28>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010
 8002db8:	e000e018 	.word	0xe000e018
 8002dbc:	e000e014 	.word	0xe000e014
 8002dc0:	0001387f 	.word	0x0001387f

08002dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002dd4 <vPortEnableVFP+0x10>
 8002dc8:	6801      	ldr	r1, [r0, #0]
 8002dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dce:	6001      	str	r1, [r0, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	0000      	.short	0x0000
 8002dd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop

08002ddc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002de8:	f7ff fb1e 	bl	8002428 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002dec:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <pvPortMalloc+0x1a8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002df4:	f000 f934 	bl	8003060 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002df8:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <pvPortMalloc+0x1ac>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 80a7 	bne.w	8002f54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02d      	beq.n	8002e68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d227      	bcs.n	8002e68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002e18:	2208      	movs	r2, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d021      	beq.n	8002e6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	3308      	adds	r3, #8
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d214      	bcs.n	8002e62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f023 0307 	bic.w	r3, r3, #7
 8002e3e:	3308      	adds	r3, #8
 8002e40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <pvPortMalloc+0x92>
        __asm volatile
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	617b      	str	r3, [r7, #20]
    }
 8002e5e:	bf00      	nop
 8002e60:	e7fe      	b.n	8002e60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e66:	e002      	b.n	8002e6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	e000      	b.n	8002e70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d06e      	beq.n	8002f54 <pvPortMalloc+0x178>
 8002e76:	4b45      	ldr	r3, [pc, #276]	; (8002f8c <pvPortMalloc+0x1b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d869      	bhi.n	8002f54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e80:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <pvPortMalloc+0x1b4>)
 8002e82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002e84:	4b42      	ldr	r3, [pc, #264]	; (8002f90 <pvPortMalloc+0x1b4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e8a:	e004      	b.n	8002e96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d903      	bls.n	8002ea8 <pvPortMalloc+0xcc>
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f1      	bne.n	8002e8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <pvPortMalloc+0x1a8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d050      	beq.n	8002f54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	4413      	add	r3, r2
 8002eba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	2308      	movs	r3, #8
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d91f      	bls.n	8002f14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <pvPortMalloc+0x120>
        __asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	613b      	str	r3, [r7, #16]
    }
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1ad2      	subs	r2, r2, r3
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f0e:	69b8      	ldr	r0, [r7, #24]
 8002f10:	f000 f908 	bl	8003124 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <pvPortMalloc+0x1b0>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <pvPortMalloc+0x1b0>)
 8002f20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <pvPortMalloc+0x1b0>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <pvPortMalloc+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d203      	bcs.n	8002f36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f2e:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <pvPortMalloc+0x1b0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <pvPortMalloc+0x1b8>)
 8002f34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <pvPortMalloc+0x1ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <pvPortMalloc+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <pvPortMalloc+0x1bc>)
 8002f52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f54:	f7ff fa76 	bl	8002444 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <pvPortMalloc+0x19c>
        __asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	60fb      	str	r3, [r7, #12]
    }
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <pvPortMalloc+0x19a>
    return pvReturn;
 8002f78:	69fb      	ldr	r3, [r7, #28]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000c9d4 	.word	0x2000c9d4
 8002f88:	2000c9e8 	.word	0x2000c9e8
 8002f8c:	2000c9d8 	.word	0x2000c9d8
 8002f90:	2000c9cc 	.word	0x2000c9cc
 8002f94:	2000c9dc 	.word	0x2000c9dc
 8002f98:	2000c9e0 	.word	0x2000c9e0

08002f9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d04d      	beq.n	800304a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002fae:	2308      	movs	r3, #8
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <vPortFree+0xb8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <vPortFree+0x44>
        __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60fb      	str	r3, [r7, #12]
    }
 8002fdc:	bf00      	nop
 8002fde:	e7fe      	b.n	8002fde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <vPortFree+0x62>
        __asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60bb      	str	r3, [r7, #8]
    }
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <vPortFree+0xb8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01e      	beq.n	800304a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d11a      	bne.n	800304a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <vPortFree+0xb8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003024:	f7ff fa00 	bl	8002428 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <vPortFree+0xbc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4413      	add	r3, r2
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <vPortFree+0xbc>)
 8003034:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003036:	6938      	ldr	r0, [r7, #16]
 8003038:	f000 f874 	bl	8003124 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <vPortFree+0xc0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a06      	ldr	r2, [pc, #24]	; (800305c <vPortFree+0xc0>)
 8003044:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003046:	f7ff f9fd 	bl	8002444 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000c9e8 	.word	0x2000c9e8
 8003058:	2000c9d8 	.word	0x2000c9d8
 800305c:	2000c9e4 	.word	0x2000c9e4

08003060 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003066:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800306a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <prvHeapInit+0xac>)
 800306e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00c      	beq.n	8003094 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3307      	adds	r3, #7
 800307e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	4a1f      	ldr	r2, [pc, #124]	; (800310c <prvHeapInit+0xac>)
 8003090:	4413      	add	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <prvHeapInit+0xb0>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <prvHeapInit+0xb0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4413      	add	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80030ac:	2208      	movs	r2, #8
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0307 	bic.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a15      	ldr	r2, [pc, #84]	; (8003114 <prvHeapInit+0xb4>)
 80030c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <prvHeapInit+0xb4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <prvHeapInit+0xb4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <prvHeapInit+0xb4>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <prvHeapInit+0xb8>)
 80030ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <prvHeapInit+0xbc>)
 80030f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <prvHeapInit+0xc0>)
 80030fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030fe:	601a      	str	r2, [r3, #0]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	200001cc 	.word	0x200001cc
 8003110:	2000c9cc 	.word	0x2000c9cc
 8003114:	2000c9d4 	.word	0x2000c9d4
 8003118:	2000c9dc 	.word	0x2000c9dc
 800311c:	2000c9d8 	.word	0x2000c9d8
 8003120:	2000c9e8 	.word	0x2000c9e8

08003124 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800312c:	4b28      	ldr	r3, [pc, #160]	; (80031d0 <prvInsertBlockIntoFreeList+0xac>)
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e002      	b.n	8003138 <prvInsertBlockIntoFreeList+0x14>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d8f7      	bhi.n	8003132 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4413      	add	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	d108      	bne.n	8003166 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	441a      	add	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d118      	bne.n	80031ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d00d      	beq.n	80031a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e008      	b.n	80031b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <prvInsertBlockIntoFreeList+0xb0>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e003      	b.n	80031b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d002      	beq.n	80031c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	2000c9cc 	.word	0x2000c9cc
 80031d4:	2000c9d4 	.word	0x2000c9d4

080031d8 <__libc_init_array>:
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	4d0d      	ldr	r5, [pc, #52]	; (8003210 <__libc_init_array+0x38>)
 80031dc:	4c0d      	ldr	r4, [pc, #52]	; (8003214 <__libc_init_array+0x3c>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	2600      	movs	r6, #0
 80031e4:	42a6      	cmp	r6, r4
 80031e6:	d109      	bne.n	80031fc <__libc_init_array+0x24>
 80031e8:	4d0b      	ldr	r5, [pc, #44]	; (8003218 <__libc_init_array+0x40>)
 80031ea:	4c0c      	ldr	r4, [pc, #48]	; (800321c <__libc_init_array+0x44>)
 80031ec:	f000 fd2c 	bl	8003c48 <_init>
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	2600      	movs	r6, #0
 80031f6:	42a6      	cmp	r6, r4
 80031f8:	d105      	bne.n	8003206 <__libc_init_array+0x2e>
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003200:	4798      	blx	r3
 8003202:	3601      	adds	r6, #1
 8003204:	e7ee      	b.n	80031e4 <__libc_init_array+0xc>
 8003206:	f855 3b04 	ldr.w	r3, [r5], #4
 800320a:	4798      	blx	r3
 800320c:	3601      	adds	r6, #1
 800320e:	e7f2      	b.n	80031f6 <__libc_init_array+0x1e>
 8003210:	08003d44 	.word	0x08003d44
 8003214:	08003d44 	.word	0x08003d44
 8003218:	08003d44 	.word	0x08003d44
 800321c:	08003d48 	.word	0x08003d48

08003220 <memset>:
 8003220:	4402      	add	r2, r0
 8003222:	4603      	mov	r3, r0
 8003224:	4293      	cmp	r3, r2
 8003226:	d100      	bne.n	800322a <memset+0xa>
 8003228:	4770      	bx	lr
 800322a:	f803 1b01 	strb.w	r1, [r3], #1
 800322e:	e7f9      	b.n	8003224 <memset+0x4>

08003230 <_puts_r>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	460e      	mov	r6, r1
 8003234:	4605      	mov	r5, r0
 8003236:	b118      	cbz	r0, 8003240 <_puts_r+0x10>
 8003238:	6983      	ldr	r3, [r0, #24]
 800323a:	b90b      	cbnz	r3, 8003240 <_puts_r+0x10>
 800323c:	f000 fa48 	bl	80036d0 <__sinit>
 8003240:	69ab      	ldr	r3, [r5, #24]
 8003242:	68ac      	ldr	r4, [r5, #8]
 8003244:	b913      	cbnz	r3, 800324c <_puts_r+0x1c>
 8003246:	4628      	mov	r0, r5
 8003248:	f000 fa42 	bl	80036d0 <__sinit>
 800324c:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <_puts_r+0xd0>)
 800324e:	429c      	cmp	r4, r3
 8003250:	d120      	bne.n	8003294 <_puts_r+0x64>
 8003252:	686c      	ldr	r4, [r5, #4]
 8003254:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003256:	07db      	lsls	r3, r3, #31
 8003258:	d405      	bmi.n	8003266 <_puts_r+0x36>
 800325a:	89a3      	ldrh	r3, [r4, #12]
 800325c:	0598      	lsls	r0, r3, #22
 800325e:	d402      	bmi.n	8003266 <_puts_r+0x36>
 8003260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003262:	f000 fad3 	bl	800380c <__retarget_lock_acquire_recursive>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	0719      	lsls	r1, r3, #28
 800326a:	d51d      	bpl.n	80032a8 <_puts_r+0x78>
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	b1db      	cbz	r3, 80032a8 <_puts_r+0x78>
 8003270:	3e01      	subs	r6, #1
 8003272:	68a3      	ldr	r3, [r4, #8]
 8003274:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003278:	3b01      	subs	r3, #1
 800327a:	60a3      	str	r3, [r4, #8]
 800327c:	bb39      	cbnz	r1, 80032ce <_puts_r+0x9e>
 800327e:	2b00      	cmp	r3, #0
 8003280:	da38      	bge.n	80032f4 <_puts_r+0xc4>
 8003282:	4622      	mov	r2, r4
 8003284:	210a      	movs	r1, #10
 8003286:	4628      	mov	r0, r5
 8003288:	f000 f848 	bl	800331c <__swbuf_r>
 800328c:	3001      	adds	r0, #1
 800328e:	d011      	beq.n	80032b4 <_puts_r+0x84>
 8003290:	250a      	movs	r5, #10
 8003292:	e011      	b.n	80032b8 <_puts_r+0x88>
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <_puts_r+0xd4>)
 8003296:	429c      	cmp	r4, r3
 8003298:	d101      	bne.n	800329e <_puts_r+0x6e>
 800329a:	68ac      	ldr	r4, [r5, #8]
 800329c:	e7da      	b.n	8003254 <_puts_r+0x24>
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <_puts_r+0xd8>)
 80032a0:	429c      	cmp	r4, r3
 80032a2:	bf08      	it	eq
 80032a4:	68ec      	ldreq	r4, [r5, #12]
 80032a6:	e7d5      	b.n	8003254 <_puts_r+0x24>
 80032a8:	4621      	mov	r1, r4
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 f888 	bl	80033c0 <__swsetup_r>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d0dd      	beq.n	8003270 <_puts_r+0x40>
 80032b4:	f04f 35ff 	mov.w	r5, #4294967295
 80032b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032ba:	07da      	lsls	r2, r3, #31
 80032bc:	d405      	bmi.n	80032ca <_puts_r+0x9a>
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	059b      	lsls	r3, r3, #22
 80032c2:	d402      	bmi.n	80032ca <_puts_r+0x9a>
 80032c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c6:	f000 faa2 	bl	800380e <__retarget_lock_release_recursive>
 80032ca:	4628      	mov	r0, r5
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	da04      	bge.n	80032dc <_puts_r+0xac>
 80032d2:	69a2      	ldr	r2, [r4, #24]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dc06      	bgt.n	80032e6 <_puts_r+0xb6>
 80032d8:	290a      	cmp	r1, #10
 80032da:	d004      	beq.n	80032e6 <_puts_r+0xb6>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	6022      	str	r2, [r4, #0]
 80032e2:	7019      	strb	r1, [r3, #0]
 80032e4:	e7c5      	b.n	8003272 <_puts_r+0x42>
 80032e6:	4622      	mov	r2, r4
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 f817 	bl	800331c <__swbuf_r>
 80032ee:	3001      	adds	r0, #1
 80032f0:	d1bf      	bne.n	8003272 <_puts_r+0x42>
 80032f2:	e7df      	b.n	80032b4 <_puts_r+0x84>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	250a      	movs	r5, #10
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	6022      	str	r2, [r4, #0]
 80032fc:	701d      	strb	r5, [r3, #0]
 80032fe:	e7db      	b.n	80032b8 <_puts_r+0x88>
 8003300:	08003d04 	.word	0x08003d04
 8003304:	08003d24 	.word	0x08003d24
 8003308:	08003ce4 	.word	0x08003ce4

0800330c <puts>:
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <puts+0xc>)
 800330e:	4601      	mov	r1, r0
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	f7ff bf8d 	b.w	8003230 <_puts_r>
 8003316:	bf00      	nop
 8003318:	20000014 	.word	0x20000014

0800331c <__swbuf_r>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	460e      	mov	r6, r1
 8003320:	4614      	mov	r4, r2
 8003322:	4605      	mov	r5, r0
 8003324:	b118      	cbz	r0, 800332e <__swbuf_r+0x12>
 8003326:	6983      	ldr	r3, [r0, #24]
 8003328:	b90b      	cbnz	r3, 800332e <__swbuf_r+0x12>
 800332a:	f000 f9d1 	bl	80036d0 <__sinit>
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <__swbuf_r+0x98>)
 8003330:	429c      	cmp	r4, r3
 8003332:	d12b      	bne.n	800338c <__swbuf_r+0x70>
 8003334:	686c      	ldr	r4, [r5, #4]
 8003336:	69a3      	ldr	r3, [r4, #24]
 8003338:	60a3      	str	r3, [r4, #8]
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	071a      	lsls	r2, r3, #28
 800333e:	d52f      	bpl.n	80033a0 <__swbuf_r+0x84>
 8003340:	6923      	ldr	r3, [r4, #16]
 8003342:	b36b      	cbz	r3, 80033a0 <__swbuf_r+0x84>
 8003344:	6923      	ldr	r3, [r4, #16]
 8003346:	6820      	ldr	r0, [r4, #0]
 8003348:	1ac0      	subs	r0, r0, r3
 800334a:	6963      	ldr	r3, [r4, #20]
 800334c:	b2f6      	uxtb	r6, r6
 800334e:	4283      	cmp	r3, r0
 8003350:	4637      	mov	r7, r6
 8003352:	dc04      	bgt.n	800335e <__swbuf_r+0x42>
 8003354:	4621      	mov	r1, r4
 8003356:	4628      	mov	r0, r5
 8003358:	f000 f926 	bl	80035a8 <_fflush_r>
 800335c:	bb30      	cbnz	r0, 80033ac <__swbuf_r+0x90>
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	3b01      	subs	r3, #1
 8003362:	60a3      	str	r3, [r4, #8]
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	6022      	str	r2, [r4, #0]
 800336a:	701e      	strb	r6, [r3, #0]
 800336c:	6963      	ldr	r3, [r4, #20]
 800336e:	3001      	adds	r0, #1
 8003370:	4283      	cmp	r3, r0
 8003372:	d004      	beq.n	800337e <__swbuf_r+0x62>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	07db      	lsls	r3, r3, #31
 8003378:	d506      	bpl.n	8003388 <__swbuf_r+0x6c>
 800337a:	2e0a      	cmp	r6, #10
 800337c:	d104      	bne.n	8003388 <__swbuf_r+0x6c>
 800337e:	4621      	mov	r1, r4
 8003380:	4628      	mov	r0, r5
 8003382:	f000 f911 	bl	80035a8 <_fflush_r>
 8003386:	b988      	cbnz	r0, 80033ac <__swbuf_r+0x90>
 8003388:	4638      	mov	r0, r7
 800338a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <__swbuf_r+0x9c>)
 800338e:	429c      	cmp	r4, r3
 8003390:	d101      	bne.n	8003396 <__swbuf_r+0x7a>
 8003392:	68ac      	ldr	r4, [r5, #8]
 8003394:	e7cf      	b.n	8003336 <__swbuf_r+0x1a>
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <__swbuf_r+0xa0>)
 8003398:	429c      	cmp	r4, r3
 800339a:	bf08      	it	eq
 800339c:	68ec      	ldreq	r4, [r5, #12]
 800339e:	e7ca      	b.n	8003336 <__swbuf_r+0x1a>
 80033a0:	4621      	mov	r1, r4
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 f80c 	bl	80033c0 <__swsetup_r>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0cb      	beq.n	8003344 <__swbuf_r+0x28>
 80033ac:	f04f 37ff 	mov.w	r7, #4294967295
 80033b0:	e7ea      	b.n	8003388 <__swbuf_r+0x6c>
 80033b2:	bf00      	nop
 80033b4:	08003d04 	.word	0x08003d04
 80033b8:	08003d24 	.word	0x08003d24
 80033bc:	08003ce4 	.word	0x08003ce4

080033c0 <__swsetup_r>:
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <__swsetup_r+0xcc>)
 80033c2:	b570      	push	{r4, r5, r6, lr}
 80033c4:	681d      	ldr	r5, [r3, #0]
 80033c6:	4606      	mov	r6, r0
 80033c8:	460c      	mov	r4, r1
 80033ca:	b125      	cbz	r5, 80033d6 <__swsetup_r+0x16>
 80033cc:	69ab      	ldr	r3, [r5, #24]
 80033ce:	b913      	cbnz	r3, 80033d6 <__swsetup_r+0x16>
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 f97d 	bl	80036d0 <__sinit>
 80033d6:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <__swsetup_r+0xd0>)
 80033d8:	429c      	cmp	r4, r3
 80033da:	d10f      	bne.n	80033fc <__swsetup_r+0x3c>
 80033dc:	686c      	ldr	r4, [r5, #4]
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033e4:	0719      	lsls	r1, r3, #28
 80033e6:	d42c      	bmi.n	8003442 <__swsetup_r+0x82>
 80033e8:	06dd      	lsls	r5, r3, #27
 80033ea:	d411      	bmi.n	8003410 <__swsetup_r+0x50>
 80033ec:	2309      	movs	r3, #9
 80033ee:	6033      	str	r3, [r6, #0]
 80033f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295
 80033fa:	e03e      	b.n	800347a <__swsetup_r+0xba>
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <__swsetup_r+0xd4>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	d101      	bne.n	8003406 <__swsetup_r+0x46>
 8003402:	68ac      	ldr	r4, [r5, #8]
 8003404:	e7eb      	b.n	80033de <__swsetup_r+0x1e>
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <__swsetup_r+0xd8>)
 8003408:	429c      	cmp	r4, r3
 800340a:	bf08      	it	eq
 800340c:	68ec      	ldreq	r4, [r5, #12]
 800340e:	e7e6      	b.n	80033de <__swsetup_r+0x1e>
 8003410:	0758      	lsls	r0, r3, #29
 8003412:	d512      	bpl.n	800343a <__swsetup_r+0x7a>
 8003414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003416:	b141      	cbz	r1, 800342a <__swsetup_r+0x6a>
 8003418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800341c:	4299      	cmp	r1, r3
 800341e:	d002      	beq.n	8003426 <__swsetup_r+0x66>
 8003420:	4630      	mov	r0, r6
 8003422:	f000 fa5b 	bl	80038dc <_free_r>
 8003426:	2300      	movs	r3, #0
 8003428:	6363      	str	r3, [r4, #52]	; 0x34
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003430:	81a3      	strh	r3, [r4, #12]
 8003432:	2300      	movs	r3, #0
 8003434:	6063      	str	r3, [r4, #4]
 8003436:	6923      	ldr	r3, [r4, #16]
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	6923      	ldr	r3, [r4, #16]
 8003444:	b94b      	cbnz	r3, 800345a <__swsetup_r+0x9a>
 8003446:	89a3      	ldrh	r3, [r4, #12]
 8003448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800344c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003450:	d003      	beq.n	800345a <__swsetup_r+0x9a>
 8003452:	4621      	mov	r1, r4
 8003454:	4630      	mov	r0, r6
 8003456:	f000 fa01 	bl	800385c <__smakebuf_r>
 800345a:	89a0      	ldrh	r0, [r4, #12]
 800345c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003460:	f010 0301 	ands.w	r3, r0, #1
 8003464:	d00a      	beq.n	800347c <__swsetup_r+0xbc>
 8003466:	2300      	movs	r3, #0
 8003468:	60a3      	str	r3, [r4, #8]
 800346a:	6963      	ldr	r3, [r4, #20]
 800346c:	425b      	negs	r3, r3
 800346e:	61a3      	str	r3, [r4, #24]
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	b943      	cbnz	r3, 8003486 <__swsetup_r+0xc6>
 8003474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003478:	d1ba      	bne.n	80033f0 <__swsetup_r+0x30>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	0781      	lsls	r1, r0, #30
 800347e:	bf58      	it	pl
 8003480:	6963      	ldrpl	r3, [r4, #20]
 8003482:	60a3      	str	r3, [r4, #8]
 8003484:	e7f4      	b.n	8003470 <__swsetup_r+0xb0>
 8003486:	2000      	movs	r0, #0
 8003488:	e7f7      	b.n	800347a <__swsetup_r+0xba>
 800348a:	bf00      	nop
 800348c:	20000014 	.word	0x20000014
 8003490:	08003d04 	.word	0x08003d04
 8003494:	08003d24 	.word	0x08003d24
 8003498:	08003ce4 	.word	0x08003ce4

0800349c <__sflush_r>:
 800349c:	898a      	ldrh	r2, [r1, #12]
 800349e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a2:	4605      	mov	r5, r0
 80034a4:	0710      	lsls	r0, r2, #28
 80034a6:	460c      	mov	r4, r1
 80034a8:	d458      	bmi.n	800355c <__sflush_r+0xc0>
 80034aa:	684b      	ldr	r3, [r1, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dc05      	bgt.n	80034bc <__sflush_r+0x20>
 80034b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dc02      	bgt.n	80034bc <__sflush_r+0x20>
 80034b6:	2000      	movs	r0, #0
 80034b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034be:	2e00      	cmp	r6, #0
 80034c0:	d0f9      	beq.n	80034b6 <__sflush_r+0x1a>
 80034c2:	2300      	movs	r3, #0
 80034c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034c8:	682f      	ldr	r7, [r5, #0]
 80034ca:	602b      	str	r3, [r5, #0]
 80034cc:	d032      	beq.n	8003534 <__sflush_r+0x98>
 80034ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	075a      	lsls	r2, r3, #29
 80034d4:	d505      	bpl.n	80034e2 <__sflush_r+0x46>
 80034d6:	6863      	ldr	r3, [r4, #4]
 80034d8:	1ac0      	subs	r0, r0, r3
 80034da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034dc:	b10b      	cbz	r3, 80034e2 <__sflush_r+0x46>
 80034de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034e0:	1ac0      	subs	r0, r0, r3
 80034e2:	2300      	movs	r3, #0
 80034e4:	4602      	mov	r2, r0
 80034e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034e8:	6a21      	ldr	r1, [r4, #32]
 80034ea:	4628      	mov	r0, r5
 80034ec:	47b0      	blx	r6
 80034ee:	1c43      	adds	r3, r0, #1
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	d106      	bne.n	8003502 <__sflush_r+0x66>
 80034f4:	6829      	ldr	r1, [r5, #0]
 80034f6:	291d      	cmp	r1, #29
 80034f8:	d82c      	bhi.n	8003554 <__sflush_r+0xb8>
 80034fa:	4a2a      	ldr	r2, [pc, #168]	; (80035a4 <__sflush_r+0x108>)
 80034fc:	40ca      	lsrs	r2, r1
 80034fe:	07d6      	lsls	r6, r2, #31
 8003500:	d528      	bpl.n	8003554 <__sflush_r+0xb8>
 8003502:	2200      	movs	r2, #0
 8003504:	6062      	str	r2, [r4, #4]
 8003506:	04d9      	lsls	r1, r3, #19
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	6022      	str	r2, [r4, #0]
 800350c:	d504      	bpl.n	8003518 <__sflush_r+0x7c>
 800350e:	1c42      	adds	r2, r0, #1
 8003510:	d101      	bne.n	8003516 <__sflush_r+0x7a>
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	b903      	cbnz	r3, 8003518 <__sflush_r+0x7c>
 8003516:	6560      	str	r0, [r4, #84]	; 0x54
 8003518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800351a:	602f      	str	r7, [r5, #0]
 800351c:	2900      	cmp	r1, #0
 800351e:	d0ca      	beq.n	80034b6 <__sflush_r+0x1a>
 8003520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003524:	4299      	cmp	r1, r3
 8003526:	d002      	beq.n	800352e <__sflush_r+0x92>
 8003528:	4628      	mov	r0, r5
 800352a:	f000 f9d7 	bl	80038dc <_free_r>
 800352e:	2000      	movs	r0, #0
 8003530:	6360      	str	r0, [r4, #52]	; 0x34
 8003532:	e7c1      	b.n	80034b8 <__sflush_r+0x1c>
 8003534:	6a21      	ldr	r1, [r4, #32]
 8003536:	2301      	movs	r3, #1
 8003538:	4628      	mov	r0, r5
 800353a:	47b0      	blx	r6
 800353c:	1c41      	adds	r1, r0, #1
 800353e:	d1c7      	bne.n	80034d0 <__sflush_r+0x34>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0c4      	beq.n	80034d0 <__sflush_r+0x34>
 8003546:	2b1d      	cmp	r3, #29
 8003548:	d001      	beq.n	800354e <__sflush_r+0xb2>
 800354a:	2b16      	cmp	r3, #22
 800354c:	d101      	bne.n	8003552 <__sflush_r+0xb6>
 800354e:	602f      	str	r7, [r5, #0]
 8003550:	e7b1      	b.n	80034b6 <__sflush_r+0x1a>
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	e7ad      	b.n	80034b8 <__sflush_r+0x1c>
 800355c:	690f      	ldr	r7, [r1, #16]
 800355e:	2f00      	cmp	r7, #0
 8003560:	d0a9      	beq.n	80034b6 <__sflush_r+0x1a>
 8003562:	0793      	lsls	r3, r2, #30
 8003564:	680e      	ldr	r6, [r1, #0]
 8003566:	bf08      	it	eq
 8003568:	694b      	ldreq	r3, [r1, #20]
 800356a:	600f      	str	r7, [r1, #0]
 800356c:	bf18      	it	ne
 800356e:	2300      	movne	r3, #0
 8003570:	eba6 0807 	sub.w	r8, r6, r7
 8003574:	608b      	str	r3, [r1, #8]
 8003576:	f1b8 0f00 	cmp.w	r8, #0
 800357a:	dd9c      	ble.n	80034b6 <__sflush_r+0x1a>
 800357c:	6a21      	ldr	r1, [r4, #32]
 800357e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003580:	4643      	mov	r3, r8
 8003582:	463a      	mov	r2, r7
 8003584:	4628      	mov	r0, r5
 8003586:	47b0      	blx	r6
 8003588:	2800      	cmp	r0, #0
 800358a:	dc06      	bgt.n	800359a <__sflush_r+0xfe>
 800358c:	89a3      	ldrh	r3, [r4, #12]
 800358e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003592:	81a3      	strh	r3, [r4, #12]
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	e78e      	b.n	80034b8 <__sflush_r+0x1c>
 800359a:	4407      	add	r7, r0
 800359c:	eba8 0800 	sub.w	r8, r8, r0
 80035a0:	e7e9      	b.n	8003576 <__sflush_r+0xda>
 80035a2:	bf00      	nop
 80035a4:	20400001 	.word	0x20400001

080035a8 <_fflush_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	690b      	ldr	r3, [r1, #16]
 80035ac:	4605      	mov	r5, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	b913      	cbnz	r3, 80035b8 <_fflush_r+0x10>
 80035b2:	2500      	movs	r5, #0
 80035b4:	4628      	mov	r0, r5
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	b118      	cbz	r0, 80035c2 <_fflush_r+0x1a>
 80035ba:	6983      	ldr	r3, [r0, #24]
 80035bc:	b90b      	cbnz	r3, 80035c2 <_fflush_r+0x1a>
 80035be:	f000 f887 	bl	80036d0 <__sinit>
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <_fflush_r+0x6c>)
 80035c4:	429c      	cmp	r4, r3
 80035c6:	d11b      	bne.n	8003600 <_fflush_r+0x58>
 80035c8:	686c      	ldr	r4, [r5, #4]
 80035ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0ef      	beq.n	80035b2 <_fflush_r+0xa>
 80035d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035d4:	07d0      	lsls	r0, r2, #31
 80035d6:	d404      	bmi.n	80035e2 <_fflush_r+0x3a>
 80035d8:	0599      	lsls	r1, r3, #22
 80035da:	d402      	bmi.n	80035e2 <_fflush_r+0x3a>
 80035dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035de:	f000 f915 	bl	800380c <__retarget_lock_acquire_recursive>
 80035e2:	4628      	mov	r0, r5
 80035e4:	4621      	mov	r1, r4
 80035e6:	f7ff ff59 	bl	800349c <__sflush_r>
 80035ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035ec:	07da      	lsls	r2, r3, #31
 80035ee:	4605      	mov	r5, r0
 80035f0:	d4e0      	bmi.n	80035b4 <_fflush_r+0xc>
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	059b      	lsls	r3, r3, #22
 80035f6:	d4dd      	bmi.n	80035b4 <_fflush_r+0xc>
 80035f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035fa:	f000 f908 	bl	800380e <__retarget_lock_release_recursive>
 80035fe:	e7d9      	b.n	80035b4 <_fflush_r+0xc>
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <_fflush_r+0x70>)
 8003602:	429c      	cmp	r4, r3
 8003604:	d101      	bne.n	800360a <_fflush_r+0x62>
 8003606:	68ac      	ldr	r4, [r5, #8]
 8003608:	e7df      	b.n	80035ca <_fflush_r+0x22>
 800360a:	4b04      	ldr	r3, [pc, #16]	; (800361c <_fflush_r+0x74>)
 800360c:	429c      	cmp	r4, r3
 800360e:	bf08      	it	eq
 8003610:	68ec      	ldreq	r4, [r5, #12]
 8003612:	e7da      	b.n	80035ca <_fflush_r+0x22>
 8003614:	08003d04 	.word	0x08003d04
 8003618:	08003d24 	.word	0x08003d24
 800361c:	08003ce4 	.word	0x08003ce4

08003620 <std>:
 8003620:	2300      	movs	r3, #0
 8003622:	b510      	push	{r4, lr}
 8003624:	4604      	mov	r4, r0
 8003626:	e9c0 3300 	strd	r3, r3, [r0]
 800362a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800362e:	6083      	str	r3, [r0, #8]
 8003630:	8181      	strh	r1, [r0, #12]
 8003632:	6643      	str	r3, [r0, #100]	; 0x64
 8003634:	81c2      	strh	r2, [r0, #14]
 8003636:	6183      	str	r3, [r0, #24]
 8003638:	4619      	mov	r1, r3
 800363a:	2208      	movs	r2, #8
 800363c:	305c      	adds	r0, #92	; 0x5c
 800363e:	f7ff fdef 	bl	8003220 <memset>
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <std+0x38>)
 8003644:	6263      	str	r3, [r4, #36]	; 0x24
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <std+0x3c>)
 8003648:	62a3      	str	r3, [r4, #40]	; 0x28
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <std+0x40>)
 800364c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <std+0x44>)
 8003650:	6224      	str	r4, [r4, #32]
 8003652:	6323      	str	r3, [r4, #48]	; 0x30
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	08003abd 	.word	0x08003abd
 800365c:	08003adf 	.word	0x08003adf
 8003660:	08003b17 	.word	0x08003b17
 8003664:	08003b3b 	.word	0x08003b3b

08003668 <_cleanup_r>:
 8003668:	4901      	ldr	r1, [pc, #4]	; (8003670 <_cleanup_r+0x8>)
 800366a:	f000 b8af 	b.w	80037cc <_fwalk_reent>
 800366e:	bf00      	nop
 8003670:	080035a9 	.word	0x080035a9

08003674 <__sfmoreglue>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	2268      	movs	r2, #104	; 0x68
 8003678:	1e4d      	subs	r5, r1, #1
 800367a:	4355      	muls	r5, r2
 800367c:	460e      	mov	r6, r1
 800367e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003682:	f000 f997 	bl	80039b4 <_malloc_r>
 8003686:	4604      	mov	r4, r0
 8003688:	b140      	cbz	r0, 800369c <__sfmoreglue+0x28>
 800368a:	2100      	movs	r1, #0
 800368c:	e9c0 1600 	strd	r1, r6, [r0]
 8003690:	300c      	adds	r0, #12
 8003692:	60a0      	str	r0, [r4, #8]
 8003694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003698:	f7ff fdc2 	bl	8003220 <memset>
 800369c:	4620      	mov	r0, r4
 800369e:	bd70      	pop	{r4, r5, r6, pc}

080036a0 <__sfp_lock_acquire>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sfp_lock_acquire+0x8>)
 80036a2:	f000 b8b3 	b.w	800380c <__retarget_lock_acquire_recursive>
 80036a6:	bf00      	nop
 80036a8:	2000c9ed 	.word	0x2000c9ed

080036ac <__sfp_lock_release>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__sfp_lock_release+0x8>)
 80036ae:	f000 b8ae 	b.w	800380e <__retarget_lock_release_recursive>
 80036b2:	bf00      	nop
 80036b4:	2000c9ed 	.word	0x2000c9ed

080036b8 <__sinit_lock_acquire>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__sinit_lock_acquire+0x8>)
 80036ba:	f000 b8a7 	b.w	800380c <__retarget_lock_acquire_recursive>
 80036be:	bf00      	nop
 80036c0:	2000c9ee 	.word	0x2000c9ee

080036c4 <__sinit_lock_release>:
 80036c4:	4801      	ldr	r0, [pc, #4]	; (80036cc <__sinit_lock_release+0x8>)
 80036c6:	f000 b8a2 	b.w	800380e <__retarget_lock_release_recursive>
 80036ca:	bf00      	nop
 80036cc:	2000c9ee 	.word	0x2000c9ee

080036d0 <__sinit>:
 80036d0:	b510      	push	{r4, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	f7ff fff0 	bl	80036b8 <__sinit_lock_acquire>
 80036d8:	69a3      	ldr	r3, [r4, #24]
 80036da:	b11b      	cbz	r3, 80036e4 <__sinit+0x14>
 80036dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e0:	f7ff bff0 	b.w	80036c4 <__sinit_lock_release>
 80036e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036e8:	6523      	str	r3, [r4, #80]	; 0x50
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <__sinit+0x68>)
 80036ec:	4a13      	ldr	r2, [pc, #76]	; (800373c <__sinit+0x6c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	bf04      	itt	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	61a3      	streq	r3, [r4, #24]
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 f820 	bl	8003740 <__sfp>
 8003700:	6060      	str	r0, [r4, #4]
 8003702:	4620      	mov	r0, r4
 8003704:	f000 f81c 	bl	8003740 <__sfp>
 8003708:	60a0      	str	r0, [r4, #8]
 800370a:	4620      	mov	r0, r4
 800370c:	f000 f818 	bl	8003740 <__sfp>
 8003710:	2200      	movs	r2, #0
 8003712:	60e0      	str	r0, [r4, #12]
 8003714:	2104      	movs	r1, #4
 8003716:	6860      	ldr	r0, [r4, #4]
 8003718:	f7ff ff82 	bl	8003620 <std>
 800371c:	68a0      	ldr	r0, [r4, #8]
 800371e:	2201      	movs	r2, #1
 8003720:	2109      	movs	r1, #9
 8003722:	f7ff ff7d 	bl	8003620 <std>
 8003726:	68e0      	ldr	r0, [r4, #12]
 8003728:	2202      	movs	r2, #2
 800372a:	2112      	movs	r1, #18
 800372c:	f7ff ff78 	bl	8003620 <std>
 8003730:	2301      	movs	r3, #1
 8003732:	61a3      	str	r3, [r4, #24]
 8003734:	e7d2      	b.n	80036dc <__sinit+0xc>
 8003736:	bf00      	nop
 8003738:	08003ce0 	.word	0x08003ce0
 800373c:	08003669 	.word	0x08003669

08003740 <__sfp>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	4607      	mov	r7, r0
 8003744:	f7ff ffac 	bl	80036a0 <__sfp_lock_acquire>
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <__sfp+0x84>)
 800374a:	681e      	ldr	r6, [r3, #0]
 800374c:	69b3      	ldr	r3, [r6, #24]
 800374e:	b913      	cbnz	r3, 8003756 <__sfp+0x16>
 8003750:	4630      	mov	r0, r6
 8003752:	f7ff ffbd 	bl	80036d0 <__sinit>
 8003756:	3648      	adds	r6, #72	; 0x48
 8003758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800375c:	3b01      	subs	r3, #1
 800375e:	d503      	bpl.n	8003768 <__sfp+0x28>
 8003760:	6833      	ldr	r3, [r6, #0]
 8003762:	b30b      	cbz	r3, 80037a8 <__sfp+0x68>
 8003764:	6836      	ldr	r6, [r6, #0]
 8003766:	e7f7      	b.n	8003758 <__sfp+0x18>
 8003768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800376c:	b9d5      	cbnz	r5, 80037a4 <__sfp+0x64>
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <__sfp+0x88>)
 8003770:	60e3      	str	r3, [r4, #12]
 8003772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003776:	6665      	str	r5, [r4, #100]	; 0x64
 8003778:	f000 f847 	bl	800380a <__retarget_lock_init_recursive>
 800377c:	f7ff ff96 	bl	80036ac <__sfp_lock_release>
 8003780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003788:	6025      	str	r5, [r4, #0]
 800378a:	61a5      	str	r5, [r4, #24]
 800378c:	2208      	movs	r2, #8
 800378e:	4629      	mov	r1, r5
 8003790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003794:	f7ff fd44 	bl	8003220 <memset>
 8003798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800379c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037a0:	4620      	mov	r0, r4
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a4:	3468      	adds	r4, #104	; 0x68
 80037a6:	e7d9      	b.n	800375c <__sfp+0x1c>
 80037a8:	2104      	movs	r1, #4
 80037aa:	4638      	mov	r0, r7
 80037ac:	f7ff ff62 	bl	8003674 <__sfmoreglue>
 80037b0:	4604      	mov	r4, r0
 80037b2:	6030      	str	r0, [r6, #0]
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d1d5      	bne.n	8003764 <__sfp+0x24>
 80037b8:	f7ff ff78 	bl	80036ac <__sfp_lock_release>
 80037bc:	230c      	movs	r3, #12
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	e7ee      	b.n	80037a0 <__sfp+0x60>
 80037c2:	bf00      	nop
 80037c4:	08003ce0 	.word	0x08003ce0
 80037c8:	ffff0001 	.word	0xffff0001

080037cc <_fwalk_reent>:
 80037cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d0:	4606      	mov	r6, r0
 80037d2:	4688      	mov	r8, r1
 80037d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037d8:	2700      	movs	r7, #0
 80037da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037de:	f1b9 0901 	subs.w	r9, r9, #1
 80037e2:	d505      	bpl.n	80037f0 <_fwalk_reent+0x24>
 80037e4:	6824      	ldr	r4, [r4, #0]
 80037e6:	2c00      	cmp	r4, #0
 80037e8:	d1f7      	bne.n	80037da <_fwalk_reent+0xe>
 80037ea:	4638      	mov	r0, r7
 80037ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f0:	89ab      	ldrh	r3, [r5, #12]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d907      	bls.n	8003806 <_fwalk_reent+0x3a>
 80037f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037fa:	3301      	adds	r3, #1
 80037fc:	d003      	beq.n	8003806 <_fwalk_reent+0x3a>
 80037fe:	4629      	mov	r1, r5
 8003800:	4630      	mov	r0, r6
 8003802:	47c0      	blx	r8
 8003804:	4307      	orrs	r7, r0
 8003806:	3568      	adds	r5, #104	; 0x68
 8003808:	e7e9      	b.n	80037de <_fwalk_reent+0x12>

0800380a <__retarget_lock_init_recursive>:
 800380a:	4770      	bx	lr

0800380c <__retarget_lock_acquire_recursive>:
 800380c:	4770      	bx	lr

0800380e <__retarget_lock_release_recursive>:
 800380e:	4770      	bx	lr

08003810 <__swhatbuf_r>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	460e      	mov	r6, r1
 8003814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003818:	2900      	cmp	r1, #0
 800381a:	b096      	sub	sp, #88	; 0x58
 800381c:	4614      	mov	r4, r2
 800381e:	461d      	mov	r5, r3
 8003820:	da08      	bge.n	8003834 <__swhatbuf_r+0x24>
 8003822:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	602a      	str	r2, [r5, #0]
 800382a:	061a      	lsls	r2, r3, #24
 800382c:	d410      	bmi.n	8003850 <__swhatbuf_r+0x40>
 800382e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003832:	e00e      	b.n	8003852 <__swhatbuf_r+0x42>
 8003834:	466a      	mov	r2, sp
 8003836:	f000 f9a7 	bl	8003b88 <_fstat_r>
 800383a:	2800      	cmp	r0, #0
 800383c:	dbf1      	blt.n	8003822 <__swhatbuf_r+0x12>
 800383e:	9a01      	ldr	r2, [sp, #4]
 8003840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003848:	425a      	negs	r2, r3
 800384a:	415a      	adcs	r2, r3
 800384c:	602a      	str	r2, [r5, #0]
 800384e:	e7ee      	b.n	800382e <__swhatbuf_r+0x1e>
 8003850:	2340      	movs	r3, #64	; 0x40
 8003852:	2000      	movs	r0, #0
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	b016      	add	sp, #88	; 0x58
 8003858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800385c <__smakebuf_r>:
 800385c:	898b      	ldrh	r3, [r1, #12]
 800385e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003860:	079d      	lsls	r5, r3, #30
 8003862:	4606      	mov	r6, r0
 8003864:	460c      	mov	r4, r1
 8003866:	d507      	bpl.n	8003878 <__smakebuf_r+0x1c>
 8003868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	6123      	str	r3, [r4, #16]
 8003870:	2301      	movs	r3, #1
 8003872:	6163      	str	r3, [r4, #20]
 8003874:	b002      	add	sp, #8
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	ab01      	add	r3, sp, #4
 800387a:	466a      	mov	r2, sp
 800387c:	f7ff ffc8 	bl	8003810 <__swhatbuf_r>
 8003880:	9900      	ldr	r1, [sp, #0]
 8003882:	4605      	mov	r5, r0
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f895 	bl	80039b4 <_malloc_r>
 800388a:	b948      	cbnz	r0, 80038a0 <__smakebuf_r+0x44>
 800388c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003890:	059a      	lsls	r2, r3, #22
 8003892:	d4ef      	bmi.n	8003874 <__smakebuf_r+0x18>
 8003894:	f023 0303 	bic.w	r3, r3, #3
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	81a3      	strh	r3, [r4, #12]
 800389e:	e7e3      	b.n	8003868 <__smakebuf_r+0xc>
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <__smakebuf_r+0x7c>)
 80038a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	6020      	str	r0, [r4, #0]
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	9b00      	ldr	r3, [sp, #0]
 80038b0:	6163      	str	r3, [r4, #20]
 80038b2:	9b01      	ldr	r3, [sp, #4]
 80038b4:	6120      	str	r0, [r4, #16]
 80038b6:	b15b      	cbz	r3, 80038d0 <__smakebuf_r+0x74>
 80038b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f975 	bl	8003bac <_isatty_r>
 80038c2:	b128      	cbz	r0, 80038d0 <__smakebuf_r+0x74>
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	81a3      	strh	r3, [r4, #12]
 80038d0:	89a0      	ldrh	r0, [r4, #12]
 80038d2:	4305      	orrs	r5, r0
 80038d4:	81a5      	strh	r5, [r4, #12]
 80038d6:	e7cd      	b.n	8003874 <__smakebuf_r+0x18>
 80038d8:	08003669 	.word	0x08003669

080038dc <_free_r>:
 80038dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038de:	2900      	cmp	r1, #0
 80038e0:	d044      	beq.n	800396c <_free_r+0x90>
 80038e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e6:	9001      	str	r0, [sp, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f1a1 0404 	sub.w	r4, r1, #4
 80038ee:	bfb8      	it	lt
 80038f0:	18e4      	addlt	r4, r4, r3
 80038f2:	f000 f97d 	bl	8003bf0 <__malloc_lock>
 80038f6:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <_free_r+0x94>)
 80038f8:	9801      	ldr	r0, [sp, #4]
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	b933      	cbnz	r3, 800390c <_free_r+0x30>
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	6014      	str	r4, [r2, #0]
 8003902:	b003      	add	sp, #12
 8003904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003908:	f000 b978 	b.w	8003bfc <__malloc_unlock>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d908      	bls.n	8003922 <_free_r+0x46>
 8003910:	6825      	ldr	r5, [r4, #0]
 8003912:	1961      	adds	r1, r4, r5
 8003914:	428b      	cmp	r3, r1
 8003916:	bf01      	itttt	eq
 8003918:	6819      	ldreq	r1, [r3, #0]
 800391a:	685b      	ldreq	r3, [r3, #4]
 800391c:	1949      	addeq	r1, r1, r5
 800391e:	6021      	streq	r1, [r4, #0]
 8003920:	e7ed      	b.n	80038fe <_free_r+0x22>
 8003922:	461a      	mov	r2, r3
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b10b      	cbz	r3, 800392c <_free_r+0x50>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d9fa      	bls.n	8003922 <_free_r+0x46>
 800392c:	6811      	ldr	r1, [r2, #0]
 800392e:	1855      	adds	r5, r2, r1
 8003930:	42a5      	cmp	r5, r4
 8003932:	d10b      	bne.n	800394c <_free_r+0x70>
 8003934:	6824      	ldr	r4, [r4, #0]
 8003936:	4421      	add	r1, r4
 8003938:	1854      	adds	r4, r2, r1
 800393a:	42a3      	cmp	r3, r4
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	d1e0      	bne.n	8003902 <_free_r+0x26>
 8003940:	681c      	ldr	r4, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	6053      	str	r3, [r2, #4]
 8003946:	4421      	add	r1, r4
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	e7da      	b.n	8003902 <_free_r+0x26>
 800394c:	d902      	bls.n	8003954 <_free_r+0x78>
 800394e:	230c      	movs	r3, #12
 8003950:	6003      	str	r3, [r0, #0]
 8003952:	e7d6      	b.n	8003902 <_free_r+0x26>
 8003954:	6825      	ldr	r5, [r4, #0]
 8003956:	1961      	adds	r1, r4, r5
 8003958:	428b      	cmp	r3, r1
 800395a:	bf04      	itt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	bf04      	itt	eq
 8003964:	1949      	addeq	r1, r1, r5
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	6054      	str	r4, [r2, #4]
 800396a:	e7ca      	b.n	8003902 <_free_r+0x26>
 800396c:	b003      	add	sp, #12
 800396e:	bd30      	pop	{r4, r5, pc}
 8003970:	2000c9f0 	.word	0x2000c9f0

08003974 <sbrk_aligned>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4e0e      	ldr	r6, [pc, #56]	; (80039b0 <sbrk_aligned+0x3c>)
 8003978:	460c      	mov	r4, r1
 800397a:	6831      	ldr	r1, [r6, #0]
 800397c:	4605      	mov	r5, r0
 800397e:	b911      	cbnz	r1, 8003986 <sbrk_aligned+0x12>
 8003980:	f000 f88c 	bl	8003a9c <_sbrk_r>
 8003984:	6030      	str	r0, [r6, #0]
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 f887 	bl	8003a9c <_sbrk_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d00a      	beq.n	80039a8 <sbrk_aligned+0x34>
 8003992:	1cc4      	adds	r4, r0, #3
 8003994:	f024 0403 	bic.w	r4, r4, #3
 8003998:	42a0      	cmp	r0, r4
 800399a:	d007      	beq.n	80039ac <sbrk_aligned+0x38>
 800399c:	1a21      	subs	r1, r4, r0
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f87c 	bl	8003a9c <_sbrk_r>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d101      	bne.n	80039ac <sbrk_aligned+0x38>
 80039a8:	f04f 34ff 	mov.w	r4, #4294967295
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}
 80039b0:	2000c9f4 	.word	0x2000c9f4

080039b4 <_malloc_r>:
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	1ccd      	adds	r5, r1, #3
 80039ba:	f025 0503 	bic.w	r5, r5, #3
 80039be:	3508      	adds	r5, #8
 80039c0:	2d0c      	cmp	r5, #12
 80039c2:	bf38      	it	cc
 80039c4:	250c      	movcc	r5, #12
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	4607      	mov	r7, r0
 80039ca:	db01      	blt.n	80039d0 <_malloc_r+0x1c>
 80039cc:	42a9      	cmp	r1, r5
 80039ce:	d905      	bls.n	80039dc <_malloc_r+0x28>
 80039d0:	230c      	movs	r3, #12
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4630      	mov	r0, r6
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	4e2e      	ldr	r6, [pc, #184]	; (8003a98 <_malloc_r+0xe4>)
 80039de:	f000 f907 	bl	8003bf0 <__malloc_lock>
 80039e2:	6833      	ldr	r3, [r6, #0]
 80039e4:	461c      	mov	r4, r3
 80039e6:	bb34      	cbnz	r4, 8003a36 <_malloc_r+0x82>
 80039e8:	4629      	mov	r1, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ffc2 	bl	8003974 <sbrk_aligned>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	4604      	mov	r4, r0
 80039f4:	d14d      	bne.n	8003a92 <_malloc_r+0xde>
 80039f6:	6834      	ldr	r4, [r6, #0]
 80039f8:	4626      	mov	r6, r4
 80039fa:	2e00      	cmp	r6, #0
 80039fc:	d140      	bne.n	8003a80 <_malloc_r+0xcc>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	4631      	mov	r1, r6
 8003a02:	4638      	mov	r0, r7
 8003a04:	eb04 0803 	add.w	r8, r4, r3
 8003a08:	f000 f848 	bl	8003a9c <_sbrk_r>
 8003a0c:	4580      	cmp	r8, r0
 8003a0e:	d13a      	bne.n	8003a86 <_malloc_r+0xd2>
 8003a10:	6821      	ldr	r1, [r4, #0]
 8003a12:	3503      	adds	r5, #3
 8003a14:	1a6d      	subs	r5, r5, r1
 8003a16:	f025 0503 	bic.w	r5, r5, #3
 8003a1a:	3508      	adds	r5, #8
 8003a1c:	2d0c      	cmp	r5, #12
 8003a1e:	bf38      	it	cc
 8003a20:	250c      	movcc	r5, #12
 8003a22:	4629      	mov	r1, r5
 8003a24:	4638      	mov	r0, r7
 8003a26:	f7ff ffa5 	bl	8003974 <sbrk_aligned>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d02b      	beq.n	8003a86 <_malloc_r+0xd2>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	442b      	add	r3, r5
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	e00e      	b.n	8003a54 <_malloc_r+0xa0>
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	1b52      	subs	r2, r2, r5
 8003a3a:	d41e      	bmi.n	8003a7a <_malloc_r+0xc6>
 8003a3c:	2a0b      	cmp	r2, #11
 8003a3e:	d916      	bls.n	8003a6e <_malloc_r+0xba>
 8003a40:	1961      	adds	r1, r4, r5
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	6025      	str	r5, [r4, #0]
 8003a46:	bf18      	it	ne
 8003a48:	6059      	strne	r1, [r3, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	bf08      	it	eq
 8003a4e:	6031      	streq	r1, [r6, #0]
 8003a50:	5162      	str	r2, [r4, r5]
 8003a52:	604b      	str	r3, [r1, #4]
 8003a54:	4638      	mov	r0, r7
 8003a56:	f104 060b 	add.w	r6, r4, #11
 8003a5a:	f000 f8cf 	bl	8003bfc <__malloc_unlock>
 8003a5e:	f026 0607 	bic.w	r6, r6, #7
 8003a62:	1d23      	adds	r3, r4, #4
 8003a64:	1af2      	subs	r2, r6, r3
 8003a66:	d0b6      	beq.n	80039d6 <_malloc_r+0x22>
 8003a68:	1b9b      	subs	r3, r3, r6
 8003a6a:	50a3      	str	r3, [r4, r2]
 8003a6c:	e7b3      	b.n	80039d6 <_malloc_r+0x22>
 8003a6e:	6862      	ldr	r2, [r4, #4]
 8003a70:	42a3      	cmp	r3, r4
 8003a72:	bf0c      	ite	eq
 8003a74:	6032      	streq	r2, [r6, #0]
 8003a76:	605a      	strne	r2, [r3, #4]
 8003a78:	e7ec      	b.n	8003a54 <_malloc_r+0xa0>
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	6864      	ldr	r4, [r4, #4]
 8003a7e:	e7b2      	b.n	80039e6 <_malloc_r+0x32>
 8003a80:	4634      	mov	r4, r6
 8003a82:	6876      	ldr	r6, [r6, #4]
 8003a84:	e7b9      	b.n	80039fa <_malloc_r+0x46>
 8003a86:	230c      	movs	r3, #12
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f000 f8b6 	bl	8003bfc <__malloc_unlock>
 8003a90:	e7a1      	b.n	80039d6 <_malloc_r+0x22>
 8003a92:	6025      	str	r5, [r4, #0]
 8003a94:	e7de      	b.n	8003a54 <_malloc_r+0xa0>
 8003a96:	bf00      	nop
 8003a98:	2000c9f0 	.word	0x2000c9f0

08003a9c <_sbrk_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4d06      	ldr	r5, [pc, #24]	; (8003ab8 <_sbrk_r+0x1c>)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	f000 f8c0 	bl	8003c2c <_sbrk>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_sbrk_r+0x1a>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_sbrk_r+0x1a>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	2000c9f8 	.word	0x2000c9f8

08003abc <__sread>:
 8003abc:	b510      	push	{r4, lr}
 8003abe:	460c      	mov	r4, r1
 8003ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac4:	f000 f8a0 	bl	8003c08 <_read_r>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	bfab      	itete	ge
 8003acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ace:	89a3      	ldrhlt	r3, [r4, #12]
 8003ad0:	181b      	addge	r3, r3, r0
 8003ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ad6:	bfac      	ite	ge
 8003ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ada:	81a3      	strhlt	r3, [r4, #12]
 8003adc:	bd10      	pop	{r4, pc}

08003ade <__swrite>:
 8003ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae2:	461f      	mov	r7, r3
 8003ae4:	898b      	ldrh	r3, [r1, #12]
 8003ae6:	05db      	lsls	r3, r3, #23
 8003ae8:	4605      	mov	r5, r0
 8003aea:	460c      	mov	r4, r1
 8003aec:	4616      	mov	r6, r2
 8003aee:	d505      	bpl.n	8003afc <__swrite+0x1e>
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	2302      	movs	r3, #2
 8003af6:	2200      	movs	r2, #0
 8003af8:	f000 f868 	bl	8003bcc <_lseek_r>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	4632      	mov	r2, r6
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b12:	f000 b817 	b.w	8003b44 <_write_r>

08003b16 <__sseek>:
 8003b16:	b510      	push	{r4, lr}
 8003b18:	460c      	mov	r4, r1
 8003b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1e:	f000 f855 	bl	8003bcc <_lseek_r>
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	bf15      	itete	ne
 8003b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b32:	81a3      	strheq	r3, [r4, #12]
 8003b34:	bf18      	it	ne
 8003b36:	81a3      	strhne	r3, [r4, #12]
 8003b38:	bd10      	pop	{r4, pc}

08003b3a <__sclose>:
 8003b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3e:	f000 b813 	b.w	8003b68 <_close_r>
	...

08003b44 <_write_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	; (8003b64 <_write_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fc fda3 	bl	800069e <_write>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_write_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_write_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	2000c9f8 	.word	0x2000c9f8

08003b68 <_close_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d06      	ldr	r5, [pc, #24]	; (8003b84 <_close_r+0x1c>)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4604      	mov	r4, r0
 8003b70:	4608      	mov	r0, r1
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	f7fc fdaf 	bl	80006d6 <_close>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_close_r+0x1a>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_close_r+0x1a>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	2000c9f8 	.word	0x2000c9f8

08003b88 <_fstat_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4d07      	ldr	r5, [pc, #28]	; (8003ba8 <_fstat_r+0x20>)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4604      	mov	r4, r0
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	602b      	str	r3, [r5, #0]
 8003b96:	f7fc fdaa 	bl	80006ee <_fstat>
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	d102      	bne.n	8003ba4 <_fstat_r+0x1c>
 8003b9e:	682b      	ldr	r3, [r5, #0]
 8003ba0:	b103      	cbz	r3, 8003ba4 <_fstat_r+0x1c>
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	bd38      	pop	{r3, r4, r5, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000c9f8 	.word	0x2000c9f8

08003bac <_isatty_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4d06      	ldr	r5, [pc, #24]	; (8003bc8 <_isatty_r+0x1c>)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	602b      	str	r3, [r5, #0]
 8003bb8:	f7fc fda9 	bl	800070e <_isatty>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_isatty_r+0x1a>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_isatty_r+0x1a>
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	2000c9f8 	.word	0x2000c9f8

08003bcc <_lseek_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4d07      	ldr	r5, [pc, #28]	; (8003bec <_lseek_r+0x20>)
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	4608      	mov	r0, r1
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	602a      	str	r2, [r5, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7fc fda2 	bl	8000724 <_lseek>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_lseek_r+0x1e>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_lseek_r+0x1e>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	2000c9f8 	.word	0x2000c9f8

08003bf0 <__malloc_lock>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	; (8003bf8 <__malloc_lock+0x8>)
 8003bf2:	f7ff be0b 	b.w	800380c <__retarget_lock_acquire_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	2000c9ec 	.word	0x2000c9ec

08003bfc <__malloc_unlock>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	; (8003c04 <__malloc_unlock+0x8>)
 8003bfe:	f7ff be06 	b.w	800380e <__retarget_lock_release_recursive>
 8003c02:	bf00      	nop
 8003c04:	2000c9ec 	.word	0x2000c9ec

08003c08 <_read_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4d07      	ldr	r5, [pc, #28]	; (8003c28 <_read_r+0x20>)
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	4608      	mov	r0, r1
 8003c10:	4611      	mov	r1, r2
 8003c12:	2200      	movs	r2, #0
 8003c14:	602a      	str	r2, [r5, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f7fc fd24 	bl	8000664 <_read>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_read_r+0x1e>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_read_r+0x1e>
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	2000c9f8 	.word	0x2000c9f8

08003c2c <_sbrk>:
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <_sbrk+0x14>)
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	4603      	mov	r3, r0
 8003c32:	b909      	cbnz	r1, 8003c38 <_sbrk+0xc>
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <_sbrk+0x18>)
 8003c36:	6011      	str	r1, [r2, #0]
 8003c38:	6810      	ldr	r0, [r2, #0]
 8003c3a:	4403      	add	r3, r0
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4770      	bx	lr
 8003c40:	2000c9fc 	.word	0x2000c9fc
 8003c44:	2000ca00 	.word	0x2000ca00

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
