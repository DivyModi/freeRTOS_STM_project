
queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007250  08007250  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007250  08007250  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001441c  20000078  080072d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014494  080072d0  00024494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bcd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5f  00000000  00000000  00034c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00037ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002953f  00000000  00000000  0003a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a5e  00000000  00000000  000636ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc982  00000000  00000000  0007915d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175adf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dac  00000000  00000000  00175b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007020 	.word	0x08007020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007020 	.word	0x08007020

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eac 	.word	0x20012eac
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb35 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f857 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8a7 	bl	8000470 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1<<0);
 8000322:	4b22      	ldr	r3, [pc, #136]	; (80003ac <main+0x9c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a21      	ldr	r2, [pc, #132]	; (80003ac <main+0x9c>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800032e:	f003 ff51 	bl	80041d4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000332:	f004 fe7f 	bl	8005034 <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, NULL, 2, &task1_handle);
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <main+0xa0>)
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22c8      	movs	r2, #200	; 0xc8
 8000342:	491c      	ldr	r1, [pc, #112]	; (80003b4 <main+0xa4>)
 8000344:	481c      	ldr	r0, [pc, #112]	; (80003b8 <main+0xa8>)
 8000346:	f002 fc0d 	bl	8002b64 <xTaskCreate>
 800034a:	4603      	mov	r3, r0
 800034c:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <main+0xac>)
 800034e:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <main+0xac>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d00a      	beq.n	800036e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035c:	f383 8811 	msr	BASEPRI, r3
 8000360:	f3bf 8f6f 	isb	sy
 8000364:	f3bf 8f4f 	dsb	sy
 8000368:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800036a:	bf00      	nop
 800036c:	e7fe      	b.n	800036c <main+0x5c>
  status = xTaskCreate(task2_handler, "Task2", 200, NULL, 2, &task2_handle);
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <main+0xb0>)
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2302      	movs	r3, #2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	22c8      	movs	r2, #200	; 0xc8
 800037a:	4912      	ldr	r1, [pc, #72]	; (80003c4 <main+0xb4>)
 800037c:	4812      	ldr	r0, [pc, #72]	; (80003c8 <main+0xb8>)
 800037e:	f002 fbf1 	bl	8002b64 <xTaskCreate>
 8000382:	4603      	mov	r3, r0
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <main+0xac>)
 8000386:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <main+0xac>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d00a      	beq.n	80003a6 <main+0x96>
        __asm volatile
 8000390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000394:	f383 8811 	msr	BASEPRI, r3
 8000398:	f3bf 8f6f 	isb	sy
 800039c:	f3bf 8f4f 	dsb	sy
 80003a0:	603b      	str	r3, [r7, #0]
    }
 80003a2:	bf00      	nop
 80003a4:	e7fe      	b.n	80003a4 <main+0x94>
  vTaskStartScheduler();
 80003a6:	f002 fd79 	bl	8002e9c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <main+0x9a>
 80003ac:	e0001000 	.word	0xe0001000
 80003b0:	20000094 	.word	0x20000094
 80003b4:	08007038 	.word	0x08007038
 80003b8:	08000561 	.word	0x08000561
 80003bc:	200000a0 	.word	0x200000a0
 80003c0:	20000098 	.word	0x20000098
 80003c4:	08007040 	.word	0x08007040
 80003c8:	080005f9 	.word	0x080005f9

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b096      	sub	sp, #88	; 0x58
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	2244      	movs	r2, #68	; 0x44
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f005 fc38 	bl	8005c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	463b      	mov	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003f2:	f000 fdb9 	bl	8000f68 <HAL_PWREx_ControlVoltageScaling>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003fc:	f000 f92c 	bl	8000658 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000400:	2302      	movs	r3, #2
 8000402:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000408:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040a:	2310      	movs	r3, #16
 800040c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	2302      	movs	r3, #2
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000412:	2302      	movs	r3, #2
 8000414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800041a:	230a      	movs	r3, #10
 800041c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800041e:	2307      	movs	r3, #7
 8000420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000422:	2302      	movs	r3, #2
 8000424:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000426:	2302      	movs	r3, #2
 8000428:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fdf0 	bl	8001014 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800043a:	f000 f90d 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2303      	movs	r3, #3
 8000444:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	2104      	movs	r1, #4
 8000456:	4618      	mov	r0, r3
 8000458:	f001 f9b8 	bl	80017cc <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000462:	f000 f8f9 	bl	8000658 <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3758      	adds	r7, #88	; 0x58
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <MX_GPIO_Init+0xe8>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a33      	ldr	r2, [pc, #204]	; (8000558 <MX_GPIO_Init+0xe8>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <MX_GPIO_Init+0xe8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	613b      	str	r3, [r7, #16]
 800049c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a2d      	ldr	r2, [pc, #180]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b28      	ldr	r3, [pc, #160]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a27      	ldr	r2, [pc, #156]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b25      	ldr	r3, [pc, #148]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b22      	ldr	r3, [pc, #136]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	4a21      	ldr	r2, [pc, #132]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004d4:	f043 0302 	orr.w	r3, r3, #2
 80004d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <MX_GPIO_Init+0xe8>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2120      	movs	r1, #32
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f000 fd15 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	4814      	ldr	r0, [pc, #80]	; (800055c <MX_GPIO_Init+0xec>)
 800050a:	f000 fb5d 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800050e:	230c      	movs	r3, #12
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000512:	2302      	movs	r3, #2
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800051e:	2307      	movs	r3, #7
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fb4c 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000530:	2320      	movs	r3, #32
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	2301      	movs	r3, #1
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4619      	mov	r1, r3
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 fb3d 	bl	8000bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054e:	bf00      	nop
 8000550:	3728      	adds	r7, #40	; 0x28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	48000800 	.word	0x48000800

08000560 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parameter)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	char myTxBuffer[30];
	myQueue = xQueueCreate( 5, sizeof(myTxBuffer));
 8000568:	2200      	movs	r2, #0
 800056a:	211e      	movs	r1, #30
 800056c:	2005      	movs	r0, #5
 800056e:	f001 ff5b 	bl	8002428 <xQueueGenericCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <task1_handler+0x84>)
 8000576:	6013      	str	r3, [r2, #0]
	if(myQueue ==  NULL){
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <task1_handler+0x84>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d102      	bne.n	8000586 <task1_handler+0x26>
		printf("Queue Not Created \n");
 8000580:	4819      	ldr	r0, [pc, #100]	; (80005e8 <task1_handler+0x88>)
 8000582:	f005 fbf3 	bl	8005d6c <puts>
	}


	while(1){
		sprintf(myTxBuffer , "Message 1");
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	4918      	ldr	r1, [pc, #96]	; (80005ec <task1_handler+0x8c>)
 800058c:	4618      	mov	r0, r3
 800058e:	f005 fbf5 	bl	8005d7c <siprintf>
		xQueueSend(myQueue, (void*) myTxBuffer, (TickType_t) 0 );
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <task1_handler+0x84>)
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	f107 0108 	add.w	r1, r7, #8
 800059a:	2300      	movs	r3, #0
 800059c:	2200      	movs	r2, #0
 800059e:	f001 ffcb 	bl	8002538 <xQueueGenericSend>

		sprintf(myTxBuffer , "Message 2");
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4912      	ldr	r1, [pc, #72]	; (80005f0 <task1_handler+0x90>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 fbe7 	bl	8005d7c <siprintf>
		xQueueSend(myQueue, (void*) myTxBuffer, (TickType_t) 0 );
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <task1_handler+0x84>)
 80005b0:	6818      	ldr	r0, [r3, #0]
 80005b2:	f107 0108 	add.w	r1, r7, #8
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	f001 ffbd 	bl	8002538 <xQueueGenericSend>

		sprintf(myTxBuffer , "Message 3");
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <task1_handler+0x94>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 fbd9 	bl	8005d7c <siprintf>
		xQueueSend(myQueue, (void*) myTxBuffer, (TickType_t) 0 );
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <task1_handler+0x84>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f107 0108 	add.w	r1, r7, #8
 80005d2:	2300      	movs	r3, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f001 ffaf 	bl	8002538 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f002 fc25 	bl	8002e2c <vTaskDelay>
		sprintf(myTxBuffer , "Message 1");
 80005e2:	e7d0      	b.n	8000586 <task1_handler+0x26>
 80005e4:	2000009c 	.word	0x2000009c
 80005e8:	08007048 	.word	0x08007048
 80005ec:	0800705c 	.word	0x0800705c
 80005f0:	08007068 	.word	0x08007068
 80005f4:	08007074 	.word	0x08007074

080005f8 <task2_handler>:
	}
}

void task2_handler(void *parameter)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	char myRxBuffer[30];
	while(1){
		if(myQueue != 0){
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <task2_handler+0x34>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0fb      	beq.n	8000600 <task2_handler+0x8>
			if(xQueueReceive(myQueue, (void*)myRxBuffer, (TickType_t)5)){
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <task2_handler+0x34>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	2205      	movs	r2, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f89e 	bl	8002754 <xQueueReceive>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f0      	beq.n	8000600 <task2_handler+0x8>
				printf("Data Received %s \n", myRxBuffer);
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	4619      	mov	r1, r3
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <task2_handler+0x38>)
 8000626:	f005 fb1b 	bl	8005c60 <iprintf>
		if(myQueue != 0){
 800062a:	e7e9      	b.n	8000600 <task2_handler+0x8>
 800062c:	2000009c 	.word	0x2000009c
 8000630:	08007080 	.word	0x08007080

08000634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d101      	bne.n	800064a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000646:	f000 f9bd 	bl	80009c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40001000 	.word	0x40001000

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x44>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <HAL_MspInit+0x44>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x44>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_MspInit+0x44>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_MspInit+0x44>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6593      	str	r3, [r2, #88]	; 0x58
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_MspInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800069a:	f003 f9ed 	bl	8003a78 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_InitTick+0xe0>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <HAL_InitTick+0xe0>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6593      	str	r3, [r2, #88]	; 0x58
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <HAL_InitTick+0xe0>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006d2:	f107 0210 	add.w	r2, r7, #16
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fa23 	bl	8001b28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ec:	f001 fa06 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80006f0:	6378      	str	r0, [r7, #52]	; 0x34
 80006f2:	e004      	b.n	80006fe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006f4:	f001 fa02 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80006f8:	4603      	mov	r3, r0
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <HAL_InitTick+0xe4>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	3b01      	subs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <HAL_InitTick+0xe8>)
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <HAL_InitTick+0xec>)
 8000710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_InitTick+0xe8>)
 8000714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000718:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <HAL_InitTick+0xe8>)
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_InitTick+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_InitTick+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_InitTick+0xe8>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <HAL_InitTick+0xe8>)
 8000734:	f001 fa8a 	bl	8001c4c <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800073e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000742:	2b00      	cmp	r3, #0
 8000744:	d11b      	bne.n	800077e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <HAL_InitTick+0xe8>)
 8000748:	f001 fae2 	bl	8001d10 <HAL_TIM_Base_Start_IT>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000756:	2b00      	cmp	r3, #0
 8000758:	d111      	bne.n	800077e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800075a:	2036      	movs	r0, #54	; 0x36
 800075c:	f000 fa26 	bl	8000bac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d808      	bhi.n	8000778 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000766:	2200      	movs	r2, #0
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	2036      	movs	r0, #54	; 0x36
 800076c:	f000 fa02 	bl	8000b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_InitTick+0xf0>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e002      	b.n	800077e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800077e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000782:	4618      	mov	r0, r3
 8000784:	3738      	adds	r7, #56	; 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	431bde83 	.word	0x431bde83
 8000794:	200000a4 	.word	0x200000a4
 8000798:	40001000 	.word	0x40001000
 800079c:	20000004 	.word	0x20000004

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <TIM6_DAC_IRQHandler+0x10>)
 80007d2:	f001 fb0d 	bl	8001df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000a4 	.word	0x200000a4

080007e0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <ITM_SendChar+0x48>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <ITM_SendChar+0x48>)
 80007f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <ITM_SendChar+0x4c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <ITM_SendChar+0x4c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000802:	bf00      	nop
 8000804:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000812:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000edfc 	.word	0xe000edfc
 800082c:	e0000e00 	.word	0xe0000e00

08000830 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e00a      	b.n	8000858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000842:	f3af 8000 	nop.w
 8000846:	4601      	mov	r1, r0
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	b2ca      	uxtb	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <_read+0x12>
  }

  return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e009      	b.n	8000890 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ffab 	bl	80007e0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf1      	blt.n	800087c <_write+0x12>
  }
  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_close>:

int _close(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ca:	605a      	str	r2, [r3, #4]
  return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_isatty>:

int _isatty(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f005 f935 	bl	8005bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fcd5 	bl	8000310 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000974:	08007258 	.word	0x08007258
  ldr r2, =_sbss
 8000978:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800097c:	20014494 	.word	0x20014494

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_Init+0x3c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_Init+0x3c>)
 8000994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000998:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f8df 	bl	8000b5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a0:	200f      	movs	r0, #15
 80009a2:	f7ff fe83 	bl	80006ac <HAL_InitTick>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	e001      	b.n	80009b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b2:	f7ff fe57 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b6:	79fb      	ldrb	r3, [r7, #7]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	200000f0 	.word	0x200000f0

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	200000f0 	.word	0x200000f0

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <__NVIC_EnableIRQ+0x38>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff4c 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b86:	f7ff ff61 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	68b9      	ldr	r1, [r7, #8]
 8000b90:	6978      	ldr	r0, [r7, #20]
 8000b92:	f7ff ffb1 	bl	8000af8 <NVIC_EncodePriority>
 8000b96:	4602      	mov	r2, r0
 8000b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff80 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff54 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd6:	e17f      	b.n	8000ed8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8171 	beq.w	8000ed2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d005      	beq.n	8000c08 <HAL_GPIO_Init+0x40>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d130      	bne.n	8000c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	f003 0201 	and.w	r2, r3, #1
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d118      	bne.n	8000ca8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	08db      	lsrs	r3, r3, #3
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d017      	beq.n	8000ce4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	6939      	ldr	r1, [r7, #16]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80ac 	beq.w	8000ed2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7e:	4a5e      	ldr	r2, [pc, #376]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6613      	str	r3, [r2, #96]	; 0x60
 8000d86:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d92:	4a5a      	ldr	r2, [pc, #360]	; (8000efc <HAL_GPIO_Init+0x334>)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dbc:	d025      	beq.n	8000e0a <HAL_GPIO_Init+0x242>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	; (8000f00 <HAL_GPIO_Init+0x338>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01f      	beq.n	8000e06 <HAL_GPIO_Init+0x23e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4e      	ldr	r2, [pc, #312]	; (8000f04 <HAL_GPIO_Init+0x33c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x23a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4d      	ldr	r2, [pc, #308]	; (8000f08 <HAL_GPIO_Init+0x340>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x236>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <HAL_GPIO_Init+0x344>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x232>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_GPIO_Init+0x348>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x22e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <HAL_GPIO_Init+0x34c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x22a>
 8000dee:	2306      	movs	r3, #6
 8000df0:	e00c      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e00a      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000df6:	2305      	movs	r3, #5
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x244>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e1c:	4937      	ldr	r1, [pc, #220]	; (8000efc <HAL_GPIO_Init+0x334>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e4e:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e78:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ea2:	4a1d      	ldr	r2, [pc, #116]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_GPIO_Init+0x350>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae78 	bne.w	8000bd8 <HAL_GPIO_Init+0x10>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	48001400 	.word	0x48001400
 8000f14:	48001800 	.word	0x48001800
 8000f18:	40010400 	.word	0x40010400

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40007000 	.word	0x40007000

08000f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f76:	d130      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f84:	d038      	beq.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2232      	movs	r2, #50	; 0x32
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	0c9b      	lsrs	r3, r3, #18
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fac:	e002      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc0:	d102      	bne.n	8000fc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f2      	bne.n	8000fae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd4:	d110      	bne.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e00f      	b.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d007      	beq.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff0:	4a05      	ldr	r2, [pc, #20]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40007000 	.word	0x40007000
 800100c:	20000000 	.word	0x20000000
 8001010:	431bde83 	.word	0x431bde83

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e3ca      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001026:	4b97      	ldr	r3, [pc, #604]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001030:	4b94      	ldr	r3, [pc, #592]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 80e4 	beq.w	8001210 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <HAL_RCC_OscConfig+0x4a>
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	2b0c      	cmp	r3, #12
 8001052:	f040 808b 	bne.w	800116c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	f040 8087 	bne.w	800116c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800105e:	4b89      	ldr	r3, [pc, #548]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <HAL_RCC_OscConfig+0x62>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e3a2      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1a      	ldr	r2, [r3, #32]
 800107a:	4b82      	ldr	r3, [pc, #520]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <HAL_RCC_OscConfig+0x7c>
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800108e:	e005      	b.n	800109c <HAL_RCC_OscConfig+0x88>
 8001090:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800109c:	4293      	cmp	r3, r2
 800109e:	d223      	bcs.n	80010e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fd71 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e383      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a72      	ldr	r2, [pc, #456]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	496d      	ldr	r1, [pc, #436]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d2:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	4968      	ldr	r1, [pc, #416]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
 80010e6:	e025      	b.n	8001134 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e8:	4b66      	ldr	r3, [pc, #408]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a65      	ldr	r2, [pc, #404]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4960      	ldr	r1, [pc, #384]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001106:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	495b      	ldr	r1, [pc, #364]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fd31 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e343      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001134:	f000 fc4a 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001138:	4602      	mov	r2, r0
 800113a:	4b52      	ldr	r3, [pc, #328]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	4950      	ldr	r1, [pc, #320]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 8001146:	5ccb      	ldrb	r3, [r1, r3]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <HAL_RCC_OscConfig+0x278>)
 8001152:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001154:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <HAL_RCC_OscConfig+0x27c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff faa7 	bl	80006ac <HAL_InitTick>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d052      	beq.n	800120e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	e327      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d032      	beq.n	80011da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a42      	ldr	r2, [pc, #264]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc34 	bl	80009ec <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001188:	f7ff fc30 	bl	80009ec <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e310      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a6:	4b37      	ldr	r3, [pc, #220]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a36      	ldr	r2, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b34      	ldr	r3, [pc, #208]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4931      	ldr	r1, [pc, #196]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	492c      	ldr	r1, [pc, #176]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
 80011d8:	e01a      	b.n	8001210 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a29      	ldr	r2, [pc, #164]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc01 	bl	80009ec <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ee:	f7ff fbfd 	bl	80009ec <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e2dd      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x1da>
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800120e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d074      	beq.n	8001306 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b08      	cmp	r3, #8
 8001220:	d005      	beq.n	800122e <HAL_RCC_OscConfig+0x21a>
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	2b0c      	cmp	r3, #12
 8001226:	d10e      	bne.n	8001246 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d064      	beq.n	8001304 <HAL_RCC_OscConfig+0x2f0>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d160      	bne.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e2ba      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x24a>
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e026      	b.n	80012ac <HAL_RCC_OscConfig+0x298>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001266:	d115      	bne.n	8001294 <HAL_RCC_OscConfig+0x280>
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a02      	ldr	r2, [pc, #8]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e014      	b.n	80012ac <HAL_RCC_OscConfig+0x298>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	0800715c 	.word	0x0800715c
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004
 8001294:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a9f      	ldr	r2, [pc, #636]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a9c      	ldr	r2, [pc, #624]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb9a 	bl	80009ec <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fb96 	bl	80009ec <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e276      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x2a8>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb86 	bl	80009ec <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fb82 	bl	80009ec <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e262      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2d0>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d060      	beq.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x310>
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d119      	bne.n	8001352 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d116      	bne.n	8001352 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001324:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x328>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e23f      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	4973      	ldr	r1, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	e040      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d023      	beq.n	80013a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135a:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6e      	ldr	r2, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fb41 	bl	80009ec <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fb3d 	bl	80009ec <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e21d      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001380:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	495f      	ldr	r1, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e018      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a5c      	ldr	r2, [pc, #368]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80013a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb1d 	bl	80009ec <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb19 	bl	80009ec <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1f9      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d03c      	beq.n	800145a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01c      	beq.n	8001422 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80013ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ee:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff faf8 	bl	80009ec <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff faf4 	bl	80009ec <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1d4      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0ef      	beq.n	8001400 <HAL_RCC_OscConfig+0x3ec>
 8001420:	e01b      	b.n	800145a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001428:	4a3b      	ldr	r2, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fadb 	bl	80009ec <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fad7 	bl	80009ec <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1b7      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800144e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ef      	bne.n	800143a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80a6 	beq.w	80015b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10d      	bne.n	8001494 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001490:	2301      	movs	r3, #1
 8001492:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_RCC_OscConfig+0x508>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d118      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_OscConfig+0x508>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <HAL_RCC_OscConfig+0x508>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa9e 	bl	80009ec <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b4:	f7ff fa9a 	bl	80009ec <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e17a      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_RCC_OscConfig+0x508>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x4d8>
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80014dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ea:	e029      	b.n	8001540 <HAL_RCC_OscConfig+0x52c>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d115      	bne.n	8001520 <HAL_RCC_OscConfig+0x50c>
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_RCC_OscConfig+0x504>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x52c>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	40007000 	.word	0x40007000
 8001520:	4b9c      	ldr	r3, [pc, #624]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	4a9b      	ldr	r2, [pc, #620]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001530:	4b98      	ldr	r3, [pc, #608]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001536:	4a97      	ldr	r2, [pc, #604]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d016      	beq.n	8001576 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fa50 	bl	80009ec <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fa4c 	bl	80009ec <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e12a      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001566:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ed      	beq.n	8001550 <HAL_RCC_OscConfig+0x53c>
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fa39 	bl	80009ec <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fa35 	bl	80009ec <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e113      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001594:	4b7f      	ldr	r3, [pc, #508]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ed      	bne.n	800157e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	4a79      	ldr	r2, [pc, #484]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80015ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80fe 	beq.w	80017ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	f040 80d0 	bne.w	8001768 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015c8:	4b72      	ldr	r3, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0203 	and.w	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	429a      	cmp	r2, r3
 80015da:	d130      	bne.n	800163e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	3b01      	subs	r3, #1
 80015e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d127      	bne.n	800163e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d11f      	bne.n	800163e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001608:	2a07      	cmp	r2, #7
 800160a:	bf14      	ite	ne
 800160c:	2201      	movne	r2, #1
 800160e:	2200      	moveq	r2, #0
 8001610:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001612:	4293      	cmp	r3, r2
 8001614:	d113      	bne.n	800163e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	3b01      	subs	r3, #1
 8001624:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d109      	bne.n	800163e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d06e      	beq.n	800171c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b0c      	cmp	r3, #12
 8001642:	d069      	beq.n	8001718 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001644:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0ad      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800166a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800166c:	f7ff f9be 	bl	80009ec <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f9ba 	bl	80009ec <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e09a      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	4b40      	ldr	r3, [pc, #256]	; (8001798 <HAL_RCC_OscConfig+0x784>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016a2:	3a01      	subs	r2, #1
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	4311      	orrs	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ac:	0212      	lsls	r2, r2, #8
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016b4:	0852      	lsrs	r2, r2, #1
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0552      	lsls	r2, r2, #21
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016c0:	0852      	lsrs	r2, r2, #1
 80016c2:	3a01      	subs	r2, #1
 80016c4:	0652      	lsls	r2, r2, #25
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016cc:	0912      	lsrs	r2, r2, #4
 80016ce:	0452      	lsls	r2, r2, #17
 80016d0:	430a      	orrs	r2, r1
 80016d2:	4930      	ldr	r1, [pc, #192]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a2a      	ldr	r2, [pc, #168]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016f0:	f7ff f97c 	bl	80009ec <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f978 	bl	80009ec <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e058      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001716:	e050      	b.n	80017ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e04f      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d148      	bne.n	80017ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 800172e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001732:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 800173a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001740:	f7ff f954 	bl	80009ec <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff f950 	bl	80009ec <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e030      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x734>
 8001766:	e028      	b.n	80017ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d023      	beq.n	80017b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_RCC_OscConfig+0x780>)
 8001774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff f937 	bl	80009ec <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	e00c      	b.n	800179c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff f933 	bl	80009ec <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d905      	bls.n	800179c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e013      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
 8001794:	40021000 	.word	0x40021000
 8001798:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_OscConfig+0x7b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ec      	bne.n	8001782 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCC_OscConfig+0x7b0>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4905      	ldr	r1, [pc, #20]	; (80017c4 <HAL_RCC_OscConfig+0x7b0>)
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x7b4>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e001      	b.n	80017ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	feeefffc 	.word	0xfeeefffc

080017cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0e7      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 0207 	bic.w	r2, r3, #7
 80017f6:	4970      	ldr	r1, [pc, #448]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b6e      	ldr	r3, [pc, #440]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0cf      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001828:	429a      	cmp	r2, r3
 800182a:	d908      	bls.n	800183e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4960      	ldr	r1, [pc, #384]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d04c      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d121      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0a6      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d115      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e09a      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001882:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e08e      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e086      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4943      	ldr	r1, [pc, #268]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018b4:	f7ff f89a 	bl	80009ec <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff f896 	bl	80009ec <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e06e      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d208      	bcs.n	8001912 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001900:	4b2e      	ldr	r3, [pc, #184]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	492b      	ldr	r1, [pc, #172]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d210      	bcs.n	8001942 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 0207 	bic.w	r2, r3, #7
 8001928:	4923      	ldr	r1, [pc, #140]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_ClockConfig+0x1ec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e036      	b.n	80019b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4918      	ldr	r1, [pc, #96]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4910      	ldr	r1, [pc, #64]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001980:	f000 f824 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	490b      	ldr	r1, [pc, #44]	; (80019c0 <HAL_RCC_ClockConfig+0x1f4>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1fc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fe81 	bl	80006ac <HAL_InitTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80019ae:	7afb      	ldrb	r3, [r7, #11]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800715c 	.word	0x0800715c
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x34>
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d121      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d11e      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a00:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e005      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a28:	4a2b      	ldr	r2, [pc, #172]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d102      	bne.n	8001a4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	e004      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d134      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d003      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xac>
 8001a70:	e005      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_RCC_GetSysClockFreq+0x110>)
 8001a74:	617b      	str	r3, [r7, #20]
      break;
 8001a76:	e005      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a7a:	617b      	str	r3, [r7, #20]
      break;
 8001a7c:	e002      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	617b      	str	r3, [r7, #20]
      break;
 8001a82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	3301      	adds	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	fb03 f202 	mul.w	r2, r3, r2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	0e5b      	lsrs	r3, r3, #25
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08007174 	.word	0x08007174
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	007a1200 	.word	0x007a1200

08001ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4904      	ldr	r1, [pc, #16]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	0800716c 	.word	0x0800716c

08001b28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	220f      	movs	r2, #15
 8001b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_RCC_GetClockConfig+0x60>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0207 	and.w	r2, r3, #7
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40022000 	.word	0x40022000

08001b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ba4:	f7ff f9d2 	bl	8000f4c <HAL_PWREx_GetVoltageRange>
 8001ba8:	6178      	str	r0, [r7, #20]
 8001baa:	e014      	b.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bc4:	f7ff f9c2 	bl	8000f4c <HAL_PWREx_GetVoltageRange>
 8001bc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bdc:	d10b      	bne.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d919      	bls.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2ba0      	cmp	r3, #160	; 0xa0
 8001be8:	d902      	bls.n	8001bf0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bea:	2302      	movs	r3, #2
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e013      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e010      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b80      	cmp	r3, #128	; 0x80
 8001bfa:	d902      	bls.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	e00a      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d102      	bne.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e004      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b70      	cmp	r3, #112	; 0x70
 8001c12:	d101      	bne.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c14:	2301      	movs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0207 	bic.w	r2, r3, #7
 8001c20:	4909      	ldr	r1, [pc, #36]	; (8001c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40022000 	.word	0x40022000

08001c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e049      	b.n	8001cf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f841 	bl	8001cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 f9f8 	bl	8002080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d001      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e04f      	b.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01d      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x76>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d52:	d018      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x76>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x76>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00e      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x76>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x76>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x76>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d115      	bne.n	8001db2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_TIM_Base_Start_IT+0xdc>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b06      	cmp	r3, #6
 8001d96:	d015      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9e:	d011      	beq.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db0:	e008      	b.n	8001dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e000      	b.n	8001dc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800
 8001de0:	40000c00 	.word	0x40000c00
 8001de4:	40013400 	.word	0x40013400
 8001de8:	40014000 	.word	0x40014000
 8001dec:	00010007 	.word	0x00010007

08001df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0202 	mvn.w	r2, #2
 8001e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f905 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8f7 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f908 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0204 	mvn.w	r2, #4
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8db 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8cd 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f8de 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0208 	mvn.w	r2, #8
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8b1 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8a3 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8b4 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f887 	bl	8002042 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f879 	bl	800202e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f88a 	bl	8002056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0201 	mvn.w	r2, #1
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fb60 	bl	8000634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f914 	bl	80021c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fae:	d10e      	bne.n	8001fce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b80      	cmp	r3, #128	; 0x80
 8001fbc:	d107      	bne.n	8001fce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f907 	bl	80021dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd8:	2b40      	cmp	r3, #64	; 0x40
 8001fda:	d10e      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b40      	cmp	r3, #64	; 0x40
 8001fe8:	d107      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f838 	bl	800206a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b20      	cmp	r3, #32
 8002006:	d10e      	bne.n	8002026 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b20      	cmp	r3, #32
 8002014:	d107      	bne.n	8002026 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f06f 0220 	mvn.w	r2, #32
 800201e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f8c7 	bl	80021b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <TIM_Base_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d00f      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <TIM_Base_SetConfig+0x118>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3c      	ldr	r2, [pc, #240]	; (800219c <TIM_Base_SetConfig+0x11c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <TIM_Base_SetConfig+0x120>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <TIM_Base_SetConfig+0x114>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d01b      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <TIM_Base_SetConfig+0x118>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d017      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <TIM_Base_SetConfig+0x11c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <TIM_Base_SetConfig+0x120>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00f      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00b      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <TIM_Base_SetConfig+0x128>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d003      	beq.n	800211a <TIM_Base_SetConfig+0x9a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d108      	bne.n	800212c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <TIM_Base_SetConfig+0x114>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00f      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00b      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <TIM_Base_SetConfig+0x128>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40000400 	.word	0x40000400
 800219c:	40000800 	.word	0x40000800
 80021a0:	40000c00 	.word	0x40000c00
 80021a4:	40013400 	.word	0x40013400
 80021a8:	40014000 	.word	0x40014000
 80021ac:	40014400 	.word	0x40014400
 80021b0:	40014800 	.word	0x40014800

080021b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f103 0208 	add.w	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 0208 	add.w	r2, r3, #8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0208 	add.w	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d103      	bne.n	80022b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e00c      	b.n	80022cc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3308      	adds	r3, #8
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e002      	b.n	80022c0 <vListInsert+0x2e>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d2f6      	bcs.n	80022ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	601a      	str	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6892      	ldr	r2, [r2, #8]
 800231a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6852      	ldr	r2, [r2, #4]
 8002324:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d103      	bne.n	8002338 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <xQueueGenericReset+0x2a>
        __asm volatile
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	60bb      	str	r3, [r7, #8]
    }
 800237e:	bf00      	nop
 8002380:	e7fe      	b.n	8002380 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002382:	f001 fbf7 	bl	8003b74 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	441a      	add	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	3b01      	subs	r3, #1
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	441a      	add	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	22ff      	movs	r2, #255	; 0xff
 80023c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d114      	bne.n	8002402 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01a      	beq.n	8002416 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3310      	adds	r3, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 ffbf 	bl	8003368 <xTaskRemoveFromEventList>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <xQueueGenericReset+0xcc>)
 80023f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	e009      	b.n	8002416 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3310      	adds	r3, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fef2 	bl	80021f0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3324      	adds	r3, #36	; 0x24
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff feed 	bl	80021f0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002416:	f001 fbdd 	bl	8003bd4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <xQueueGenericCreate+0x2a>
        __asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	61bb      	str	r3, [r7, #24]
    }
 800244e:	bf00      	nop
 8002450:	e7fe      	b.n	8002450 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <xQueueGenericCreate+0x48>
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d101      	bne.n	8002474 <xQueueGenericCreate+0x4c>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <xQueueGenericCreate+0x4e>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <xQueueGenericCreate+0x68>
        __asm volatile
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	617b      	str	r3, [r7, #20]
    }
 800248c:	bf00      	nop
 800248e:	e7fe      	b.n	800248e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002496:	d90a      	bls.n	80024ae <xQueueGenericCreate+0x86>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	613b      	str	r3, [r7, #16]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	3350      	adds	r3, #80	; 0x50
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 fc82 	bl	8003dbc <pvPortMalloc>
 80024b8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3350      	adds	r3, #80	; 0x50
 80024c8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f805 	bl	80024e6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
    }
 80024de:	4618      	mov	r0, r3
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e002      	b.n	8002508 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002514:	2101      	movs	r1, #1
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	f7ff ff1e 	bl	8002358 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	2073      	movs	r0, #115	; 0x73
 800252c:	f002 fc7a 	bl	8004e24 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <xQueueGenericSend+0x32>
        __asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	623b      	str	r3, [r7, #32]
    }
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <xQueueGenericSend+0x40>
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <xQueueGenericSend+0x44>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <xQueueGenericSend+0x46>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10a      	bne.n	8002598 <xQueueGenericSend+0x60>
        __asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	61fb      	str	r3, [r7, #28]
    }
 8002594:	bf00      	nop
 8002596:	e7fe      	b.n	8002596 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d103      	bne.n	80025a6 <xQueueGenericSend+0x6e>
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <xQueueGenericSend+0x72>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <xQueueGenericSend+0x74>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueGenericSend+0x8e>
        __asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61bb      	str	r3, [r7, #24]
    }
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025c6:	f001 fad5 	bl	8003b74 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <xQueueGenericSend+0xa4>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d136      	bne.n	800264a <xQueueGenericSend+0x112>
            {
                traceQUEUE_SEND( pxQueue );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 f9ac 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	460b      	mov	r3, r1
 80025ee:	4601      	mov	r1, r0
 80025f0:	205a      	movs	r0, #90	; 0x5a
 80025f2:	f002 fc8d 	bl	8004f10 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fc:	f000 f9a2 	bl	8002944 <prvCopyDataToQueue>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d010      	beq.n	800262c <xQueueGenericSend+0xf4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3324      	adds	r3, #36	; 0x24
 800260e:	4618      	mov	r0, r3
 8002610:	f000 feaa 	bl	8003368 <xTaskRemoveFromEventList>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d013      	beq.n	8002642 <xQueueGenericSend+0x10a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800261a:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <xQueueGenericSend+0x218>)
 800261c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	e00a      	b.n	8002642 <xQueueGenericSend+0x10a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <xQueueGenericSend+0x10a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002632:	4b47      	ldr	r3, [pc, #284]	; (8002750 <xQueueGenericSend+0x218>)
 8002634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002642:	f001 fac7 	bl	8003bd4 <vPortExitCritical>
                return pdPASS;
 8002646:	2301      	movs	r3, #1
 8002648:	e07d      	b.n	8002746 <xQueueGenericSend+0x20e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d110      	bne.n	8002672 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002650:	f001 fac0 	bl	8003bd4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f970 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	4601      	mov	r1, r0
 8002668:	205a      	movs	r0, #90	; 0x5a
 800266a:	f002 fc51 	bl	8004f10 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800266e:	2300      	movs	r3, #0
 8002670:	e069      	b.n	8002746 <xQueueGenericSend+0x20e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fed9 	bl	8003434 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002682:	2301      	movs	r3, #1
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002686:	f001 faa5 	bl	8003bd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800268a:	f000 fc63 	bl	8002f54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800268e:	f001 fa71 	bl	8003b74 <vPortEnterCritical>
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002698:	b25b      	sxtb	r3, r3
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d103      	bne.n	80026a8 <xQueueGenericSend+0x170>
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d103      	bne.n	80026be <xQueueGenericSend+0x186>
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026be:	f001 fa89 	bl	8003bd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026c2:	1d3a      	adds	r2, r7, #4
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fec8 	bl	8003460 <xTaskCheckForTimeOut>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d124      	bne.n	8002720 <xQueueGenericSend+0x1e8>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026d8:	f000 fa2c 	bl	8002b34 <prvIsQueueFull>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d018      	beq.n	8002714 <xQueueGenericSend+0x1dc>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	3310      	adds	r3, #16
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fe18 	bl	8003320 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f2:	f000 f9b7 	bl	8002a64 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026f6:	f000 fc3b 	bl	8002f70 <xTaskResumeAll>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f47f af62 	bne.w	80025c6 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <xQueueGenericSend+0x218>)
 8002704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	e758      	b.n	80025c6 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002716:	f000 f9a5 	bl	8002a64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800271a:	f000 fc29 	bl	8002f70 <xTaskResumeAll>
 800271e:	e752      	b.n	80025c6 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002722:	f000 f99f 	bl	8002a64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002726:	f000 fc23 	bl	8002f70 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f905 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	460b      	mov	r3, r1
 800273c:	4601      	mov	r1, r0
 800273e:	205a      	movs	r0, #90	; 0x5a
 8002740:	f002 fbe6 	bl	8004f10 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002744:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b08f      	sub	sp, #60	; 0x3c
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <xQueueReceive+0x30>
        __asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	623b      	str	r3, [r7, #32]
    }
 8002780:	bf00      	nop
 8002782:	e7fe      	b.n	8002782 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <xQueueReceive+0x3e>
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <xQueueReceive+0x42>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueReceive+0x44>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueReceive+0x5e>
        __asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	61fb      	str	r3, [r7, #28]
    }
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027b2:	f001 f9df 	bl	8003b74 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02f      	beq.n	8002822 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c6:	f000 f927 	bl	8002a18 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 f8b5 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 80027d2:	4604      	mov	r4, r0
 80027d4:	2000      	movs	r0, #0
 80027d6:	f003 f8b1 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 80027da:	4602      	mov	r2, r0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2101      	movs	r1, #1
 80027e0:	9100      	str	r1, [sp, #0]
 80027e2:	4621      	mov	r1, r4
 80027e4:	205c      	movs	r0, #92	; 0x5c
 80027e6:	f002 fb93 	bl	8004f10 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1e5a      	subs	r2, r3, #1
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00f      	beq.n	800281a <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	3310      	adds	r3, #16
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fdb2 	bl	8003368 <xTaskRemoveFromEventList>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <xQueueReceive+0xc6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <xQueueReceive+0x1ec>)
 800280c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800281a:	f001 f9db 	bl	8003bd4 <vPortExitCritical>
                return pdPASS;
 800281e:	2301      	movs	r3, #1
 8002820:	e08a      	b.n	8002938 <xQueueReceive+0x1e4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d113      	bne.n	8002850 <xQueueReceive+0xfc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002828:	f001 f9d4 	bl	8003bd4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	4618      	mov	r0, r3
 8002830:	f003 f884 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 8002834:	4604      	mov	r4, r0
 8002836:	2000      	movs	r0, #0
 8002838:	f003 f880 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 800283c:	4602      	mov	r2, r0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2101      	movs	r1, #1
 8002842:	9100      	str	r1, [sp, #0]
 8002844:	4621      	mov	r1, r4
 8002846:	205c      	movs	r0, #92	; 0x5c
 8002848:	f002 fb62 	bl	8004f10 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800284c:	2300      	movs	r3, #0
 800284e:	e073      	b.n	8002938 <xQueueReceive+0x1e4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <xQueueReceive+0x110>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fdea 	bl	8003434 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002860:	2301      	movs	r3, #1
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002864:	f001 f9b6 	bl	8003bd4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002868:	f000 fb74 	bl	8002f54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800286c:	f001 f982 	bl	8003b74 <vPortEnterCritical>
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002876:	b25b      	sxtb	r3, r3
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d103      	bne.n	8002886 <xQueueReceive+0x132>
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288c:	b25b      	sxtb	r3, r3
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d103      	bne.n	800289c <xQueueReceive+0x148>
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800289c:	f001 f99a 	bl	8003bd4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028a0:	1d3a      	adds	r2, r7, #4
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fdd9 	bl	8003460 <xTaskCheckForTimeOut>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d124      	bne.n	80028fe <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b6:	f000 f927 	bl	8002b08 <prvIsQueueEmpty>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d018      	beq.n	80028f2 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	3324      	adds	r3, #36	; 0x24
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fd29 	bl	8003320 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d0:	f000 f8c8 	bl	8002a64 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028d4:	f000 fb4c 	bl	8002f70 <xTaskResumeAll>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f47f af69 	bne.w	80027b2 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <xQueueReceive+0x1ec>)
 80028e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	e75f      	b.n	80027b2 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 f8b6 	bl	8002a64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028f8:	f000 fb3a 	bl	8002f70 <xTaskResumeAll>
 80028fc:	e759      	b.n	80027b2 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002900:	f000 f8b0 	bl	8002a64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002904:	f000 fb34 	bl	8002f70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290a:	f000 f8fd 	bl	8002b08 <prvIsQueueEmpty>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f43f af4e 	beq.w	80027b2 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f80f 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 800291e:	4604      	mov	r4, r0
 8002920:	2000      	movs	r0, #0
 8002922:	f003 f80b 	bl	800593c <SEGGER_SYSVIEW_ShrinkId>
 8002926:	4602      	mov	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2101      	movs	r1, #1
 800292c:	9100      	str	r1, [sp, #0]
 800292e:	4621      	mov	r1, r4
 8002930:	205c      	movs	r0, #92	; 0x5c
 8002932:	f002 faed 	bl	8004f10 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002936:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002938:	4618      	mov	r0, r3
 800293a:	3734      	adds	r7, #52	; 0x34
 800293c:	46bd      	mov	sp, r7
 800293e:	bd90      	pop	{r4, r7, pc}
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d14d      	bne.n	8002a06 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe5e 	bl	8003630 <xTaskPriorityDisinherit>
 8002974:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	e043      	b.n	8002a06 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d119      	bne.n	80029b8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6858      	ldr	r0, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	461a      	mov	r2, r3
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	f003 f950 	bl	8005c34 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	441a      	add	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d32b      	bcc.n	8002a06 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e026      	b.n	8002a06 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	461a      	mov	r2, r3
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	f003 f936 	bl	8005c34 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	425b      	negs	r3, r3
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d207      	bcs.n	80029f4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	425b      	negs	r3, r3
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d105      	bne.n	8002a06 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a0e:	697b      	ldr	r3, [r7, #20]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	441a      	add	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d303      	bcc.n	8002a4c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	461a      	mov	r2, r3
 8002a56:	6838      	ldr	r0, [r7, #0]
 8002a58:	f003 f8ec 	bl	8005c34 <memcpy>
    }
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a6c:	f001 f882 	bl	8003b74 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a76:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a78:	e011      	b.n	8002a9e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d012      	beq.n	8002aa8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3324      	adds	r3, #36	; 0x24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fc6e 	bl	8003368 <xTaskRemoveFromEventList>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a92:	f000 fd4b 	bl	800352c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dce9      	bgt.n	8002a7a <prvUnlockQueue+0x16>
 8002aa6:	e000      	b.n	8002aaa <prvUnlockQueue+0x46>
                        break;
 8002aa8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	22ff      	movs	r2, #255	; 0xff
 8002aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ab2:	f001 f88f 	bl	8003bd4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ab6:	f001 f85d 	bl	8003b74 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac2:	e011      	b.n	8002ae8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3310      	adds	r3, #16
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fc49 	bl	8003368 <xTaskRemoveFromEventList>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002adc:	f000 fd26 	bl	800352c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dce9      	bgt.n	8002ac4 <prvUnlockQueue+0x60>
 8002af0:	e000      	b.n	8002af4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002af2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002afc:	f001 f86a 	bl	8003bd4 <vPortExitCritical>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b10:	f001 f830 	bl	8003b74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e001      	b.n	8002b26 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b26:	f001 f855 	bl	8003bd4 <vPortExitCritical>

    return xReturn;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b3c:	f001 f81a 	bl	8003b74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d102      	bne.n	8002b52 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e001      	b.n	8002b56 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b56:	f001 f83d 	bl	8003bd4 <vPortExitCritical>

    return xReturn;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af04      	add	r7, sp, #16
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 f91f 	bl	8003dbc <pvPortMalloc>
 8002b7e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b86:	2058      	movs	r0, #88	; 0x58
 8002b88:	f001 f918 	bl	8003dbc <pvPortMalloc>
 8002b8c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9a:	e005      	b.n	8002ba8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	f001 f9ed 	bl	8003f7c <vPortFree>
 8002ba2:	e001      	b.n	8002ba8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9303      	str	r3, [sp, #12]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f80e 	bl	8002be6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bca:	69f8      	ldr	r0, [r7, #28]
 8002bcc:	f000 f8a2 	bl	8002d14 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e002      	b.n	8002bdc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
    }
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	21a5      	movs	r1, #165	; 0xa5
 8002c00:	f003 f826 	bl	8005c50 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f023 0307 	bic.w	r3, r3, #7
 8002c1c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	617b      	str	r3, [r7, #20]
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01f      	beq.n	8002c84 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e012      	b.n	8002c70 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	7819      	ldrb	r1, [r3, #0]
 8002c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	3334      	adds	r3, #52	; 0x34
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d9e9      	bls.n	8002c4a <prvInitialiseNewTask+0x64>
 8002c76:	e000      	b.n	8002c7a <prvInitialiseNewTask+0x94>
            {
                break;
 8002c78:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c82:	e003      	b.n	8002c8c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d901      	bls.n	8002c96 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c92:	2304      	movs	r3, #4
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fabf 	bl	8002230 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	3318      	adds	r3, #24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff faba 	bl	8002230 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	f1c3 0205 	rsb	r2, r3, #5
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	3350      	adds	r3, #80	; 0x50
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 ffb8 	bl	8005c50 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	3354      	adds	r3, #84	; 0x54
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 ffb1 	bl	8005c50 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	69b8      	ldr	r0, [r7, #24]
 8002cf4:	f000 fd94 	bl	8003820 <pxPortInitialiseStack>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d0a:	bf00      	nop
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d14:	b5b0      	push	{r4, r5, r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d1c:	f000 ff2a 	bl	8003b74 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <prvAddNewTaskToReadyList+0xfc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	4a3a      	ldr	r2, [pc, #232]	; (8002e10 <prvAddNewTaskToReadyList+0xfc>)
 8002d28:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d2a:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <prvAddNewTaskToReadyList+0x100>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d32:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <prvAddNewTaskToReadyList+0x100>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <prvAddNewTaskToReadyList+0xfc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d110      	bne.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d40:	f000 fc18 	bl	8003574 <prvInitialiseTaskLists>
 8002d44:	e00d      	b.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <prvAddNewTaskToReadyList+0x104>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <prvAddNewTaskToReadyList+0x100>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d802      	bhi.n	8002d62 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <prvAddNewTaskToReadyList+0x100>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <prvAddNewTaskToReadyList+0x108>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <prvAddNewTaskToReadyList+0x108>)
 8002d6a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <prvAddNewTaskToReadyList+0x108>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <prvAddNewTaskToReadyList+0x94>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fcb7 	bl	80056f0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	461d      	mov	r5, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461c      	mov	r4, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	1ae3      	subs	r3, r4, r3
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	462b      	mov	r3, r5
 8002da4:	f001 fab6 	bl	8004314 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 fd24 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2201      	movs	r2, #1
 8002db6:	409a      	lsls	r2, r3
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <prvAddNewTaskToReadyList+0x10c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <prvAddNewTaskToReadyList+0x10c>)
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <prvAddNewTaskToReadyList+0x110>)
 8002dd0:	441a      	add	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7ff fa36 	bl	800224a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002dde:	f000 fef9 	bl	8003bd4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <prvAddNewTaskToReadyList+0x104>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00e      	beq.n	8002e08 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <prvAddNewTaskToReadyList+0x100>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d207      	bcs.n	8002e08 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <prvAddNewTaskToReadyList+0x114>)
 8002dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e10:	200001b4 	.word	0x200001b4
 8002e14:	200000f4 	.word	0x200000f4
 8002e18:	200001c0 	.word	0x200001c0
 8002e1c:	200001d0 	.word	0x200001d0
 8002e20:	200001bc 	.word	0x200001bc
 8002e24:	200000f8 	.word	0x200000f8
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01b      	beq.n	8002e76 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <vTaskDelay+0x68>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <vTaskDelay+0x30>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60bb      	str	r3, [r7, #8]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e5c:	f000 f87a 	bl	8002f54 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	2023      	movs	r0, #35	; 0x23
 8002e64:	f001 ff48 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fc60 	bl	8003730 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e70:	f000 f87e 	bl	8002f70 <xTaskResumeAll>
 8002e74:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <vTaskDelay+0x6c>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200001dc 	.word	0x200001dc
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <vTaskStartScheduler+0x98>)
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb0:	4921      	ldr	r1, [pc, #132]	; (8002f38 <vTaskStartScheduler+0x9c>)
 8002eb2:	4822      	ldr	r0, [pc, #136]	; (8002f3c <vTaskStartScheduler+0xa0>)
 8002eb4:	f7ff fe56 	bl	8002b64 <xTaskCreate>
 8002eb8:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d124      	bne.n	8002f0a <vTaskStartScheduler+0x6e>
        __asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	60bb      	str	r3, [r7, #8]
    }
 8002ed2:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <vTaskStartScheduler+0xa4>)
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eda:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <vTaskStartScheduler+0xa8>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <vTaskStartScheduler+0xac>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <vTaskStartScheduler+0xb0>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <vTaskStartScheduler+0x98>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d102      	bne.n	8002efa <vTaskStartScheduler+0x5e>
 8002ef4:	f002 fbe0 	bl	80056b8 <SEGGER_SYSVIEW_OnIdle>
 8002ef8:	e004      	b.n	8002f04 <vTaskStartScheduler+0x68>
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <vTaskStartScheduler+0xb0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fc38 	bl	8005774 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f04:	f000 fd16 	bl	8003934 <xPortStartScheduler>
 8002f08:	e00e      	b.n	8002f28 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d10a      	bne.n	8002f28 <vTaskStartScheduler+0x8c>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	607b      	str	r3, [r7, #4]
    }
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <vTaskStartScheduler+0xb4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200001d8 	.word	0x200001d8
 8002f38:	08007094 	.word	0x08007094
 8002f3c:	08003545 	.word	0x08003545
 8002f40:	200001d4 	.word	0x200001d4
 8002f44:	200001c0 	.word	0x200001c0
 8002f48:	200001b8 	.word	0x200001b8
 8002f4c:	200000f4 	.word	0x200000f4
 8002f50:	2000000c 	.word	0x2000000c

08002f54 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <vTaskSuspendAll+0x18>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <vTaskSuspendAll+0x18>)
 8002f60:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	200001dc 	.word	0x200001dc

08002f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <xTaskResumeAll+0x11c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <xTaskResumeAll+0x2c>
        __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	603b      	str	r3, [r7, #0]
    }
 8002f98:	bf00      	nop
 8002f9a:	e7fe      	b.n	8002f9a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f9c:	f000 fdea 	bl	8003b74 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fa0:	4b3a      	ldr	r3, [pc, #232]	; (800308c <xTaskResumeAll+0x11c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	4a39      	ldr	r2, [pc, #228]	; (800308c <xTaskResumeAll+0x11c>)
 8002fa8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002faa:	4b38      	ldr	r3, [pc, #224]	; (800308c <xTaskResumeAll+0x11c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d165      	bne.n	800307e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <xTaskResumeAll+0x120>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d061      	beq.n	800307e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fba:	e032      	b.n	8003022 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <xTaskResumeAll+0x124>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f99b 	bl	8002304 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f996 	bl	8002304 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fc0c 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <xTaskResumeAll+0x128>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <xTaskResumeAll+0x128>)
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4a27      	ldr	r2, [pc, #156]	; (800309c <xTaskResumeAll+0x12c>)
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3304      	adds	r3, #4
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7ff f91e 	bl	800224a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <xTaskResumeAll+0x130>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <xTaskResumeAll+0x134>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <xTaskResumeAll+0x124>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1c8      	bne.n	8002fbc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003030:	f000 fae2 	bl	80035f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <xTaskResumeAll+0x138>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003040:	f000 f848 	bl	80030d4 <xTaskIncrementTick>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <xTaskResumeAll+0x134>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f1      	bne.n	8003040 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <xTaskResumeAll+0x138>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <xTaskResumeAll+0x134>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <xTaskResumeAll+0x13c>)
 8003070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800307e:	f000 fda9 	bl	8003bd4 <vPortExitCritical>

    return xAlreadyYielded;
 8003082:	68bb      	ldr	r3, [r7, #8]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	200001dc 	.word	0x200001dc
 8003090:	200001b4 	.word	0x200001b4
 8003094:	2000018c 	.word	0x2000018c
 8003098:	200001bc 	.word	0x200001bc
 800309c:	200000f8 	.word	0x200000f8
 80030a0:	200000f4 	.word	0x200000f4
 80030a4:	200001c8 	.word	0x200001c8
 80030a8:	200001c4 	.word	0x200001c4
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030b6:	f000 fe41 	bl	8003d3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <xTaskGetTickCountFromISR+0x20>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80030c4:	683b      	ldr	r3, [r7, #0]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200001b8 	.word	0x200001b8

080030d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030de:	4b50      	ldr	r3, [pc, #320]	; (8003220 <xTaskIncrementTick+0x14c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 8092 	bne.w	800320c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <xTaskIncrementTick+0x150>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030f0:	4a4c      	ldr	r2, [pc, #304]	; (8003224 <xTaskIncrementTick+0x150>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d120      	bne.n	800313e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80030fc:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <xTaskIncrementTick+0x154>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <xTaskIncrementTick+0x48>
        __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	603b      	str	r3, [r7, #0]
    }
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <xTaskIncrementTick+0x46>
 800311c:	4b42      	ldr	r3, [pc, #264]	; (8003228 <xTaskIncrementTick+0x154>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <xTaskIncrementTick+0x158>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a40      	ldr	r2, [pc, #256]	; (8003228 <xTaskIncrementTick+0x154>)
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <xTaskIncrementTick+0x158>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <xTaskIncrementTick+0x15c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a3e      	ldr	r2, [pc, #248]	; (8003230 <xTaskIncrementTick+0x15c>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	f000 fa5d 	bl	80035f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <xTaskIncrementTick+0x160>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d34c      	bcc.n	80031e2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003148:	4b37      	ldr	r3, [pc, #220]	; (8003228 <xTaskIncrementTick+0x154>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <xTaskIncrementTick+0x160>)
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	601a      	str	r2, [r3, #0]
                    break;
 800315a:	e042      	b.n	80031e2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800315c:	4b32      	ldr	r3, [pc, #200]	; (8003228 <xTaskIncrementTick+0x154>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d203      	bcs.n	800317c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003174:	4a2f      	ldr	r2, [pc, #188]	; (8003234 <xTaskIncrementTick+0x160>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800317a:	e032      	b.n	80031e2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3304      	adds	r3, #4
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f8bf 	bl	8002304 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d004      	beq.n	8003198 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3318      	adds	r3, #24
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff f8b6 	bl	8002304 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fb2c 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <xTaskIncrementTick+0x164>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <xTaskIncrementTick+0x164>)
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4a1f      	ldr	r2, [pc, #124]	; (800323c <xTaskIncrementTick+0x168>)
 80031c0:	441a      	add	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3304      	adds	r3, #4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f7ff f83e 	bl	800224a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <xTaskIncrementTick+0x16c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	429a      	cmp	r2, r3
 80031da:	d3b5      	bcc.n	8003148 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e0:	e7b2      	b.n	8003148 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <xTaskIncrementTick+0x16c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	4914      	ldr	r1, [pc, #80]	; (800323c <xTaskIncrementTick+0x168>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d901      	bls.n	80031fe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <xTaskIncrementTick+0x170>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e004      	b.n	8003216 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <xTaskIncrementTick+0x174>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <xTaskIncrementTick+0x174>)
 8003214:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003216:	697b      	ldr	r3, [r7, #20]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	200001dc 	.word	0x200001dc
 8003224:	200001b8 	.word	0x200001b8
 8003228:	20000184 	.word	0x20000184
 800322c:	20000188 	.word	0x20000188
 8003230:	200001cc 	.word	0x200001cc
 8003234:	200001d4 	.word	0x200001d4
 8003238:	200001bc 	.word	0x200001bc
 800323c:	200000f8 	.word	0x200000f8
 8003240:	200000f4 	.word	0x200000f4
 8003244:	200001c8 	.word	0x200001c8
 8003248:	200001c4 	.word	0x200001c4

0800324c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <vTaskSwitchContext+0xbc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <vTaskSwitchContext+0xc0>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003260:	e04d      	b.n	80032fe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <vTaskSwitchContext+0xc0>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <vTaskSwitchContext+0xc4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f1c3 031f 	rsb	r3, r3, #31
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	4925      	ldr	r1, [pc, #148]	; (8003314 <vTaskSwitchContext+0xc8>)
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	607b      	str	r3, [r7, #4]
    }
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <vTaskSwitchContext+0x5a>
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <vTaskSwitchContext+0xc8>)
 80032b4:	4413      	add	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3308      	adds	r3, #8
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d104      	bne.n	80032d8 <vTaskSwitchContext+0x8c>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <vTaskSwitchContext+0xcc>)
 80032e0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <vTaskSwitchContext+0xcc>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <vTaskSwitchContext+0xd0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d102      	bne.n	80032f4 <vTaskSwitchContext+0xa8>
 80032ee:	f002 f9e3 	bl	80056b8 <SEGGER_SYSVIEW_OnIdle>
}
 80032f2:	e004      	b.n	80032fe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <vTaskSwitchContext+0xcc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f002 fa3b 	bl	8005774 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200001dc 	.word	0x200001dc
 800330c:	200001c8 	.word	0x200001c8
 8003310:	200001bc 	.word	0x200001bc
 8003314:	200000f8 	.word	0x200000f8
 8003318:	200000f4 	.word	0x200000f4
 800331c:	200001d8 	.word	0x200001d8

08003320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	60fb      	str	r3, [r7, #12]
    }
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <vTaskPlaceOnEventList+0x44>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3318      	adds	r3, #24
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe ff9f 	bl	8002292 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003354:	2101      	movs	r1, #1
 8003356:	6838      	ldr	r0, [r7, #0]
 8003358:	f000 f9ea 	bl	8003730 <prvAddCurrentTaskToDelayedList>
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200000f4 	.word	0x200000f4

08003368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	60fb      	str	r3, [r7, #12]
    }
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3318      	adds	r3, #24
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe ffb3 	bl	8002304 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <xTaskRemoveFromEventList+0xb4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d120      	bne.n	80033e8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe ffaa 	bl	8002304 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f002 fa20 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <xTaskRemoveFromEventList+0xb8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <xTaskRemoveFromEventList+0xb8>)
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4a13      	ldr	r2, [pc, #76]	; (8003424 <xTaskRemoveFromEventList+0xbc>)
 80033d8:	441a      	add	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	3304      	adds	r3, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe ff32 	bl	800224a <vListInsertEnd>
 80033e6:	e005      	b.n	80033f4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	3318      	adds	r3, #24
 80033ec:	4619      	mov	r1, r3
 80033ee:	480e      	ldr	r0, [pc, #56]	; (8003428 <xTaskRemoveFromEventList+0xc0>)
 80033f0:	f7fe ff2b 	bl	800224a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <xTaskRemoveFromEventList+0xc4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	429a      	cmp	r2, r3
 8003400:	d905      	bls.n	800340e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003402:	2301      	movs	r3, #1
 8003404:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003406:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <xTaskRemoveFromEventList+0xc8>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e001      	b.n	8003412 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200001dc 	.word	0x200001dc
 8003420:	200001bc 	.word	0x200001bc
 8003424:	200000f8 	.word	0x200000f8
 8003428:	2000018c 	.word	0x2000018c
 800342c:	200000f4 	.word	0x200000f4
 8003430:	200001c8 	.word	0x200001c8

08003434 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <vTaskInternalSetTimeOutState+0x24>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <vTaskInternalSetTimeOutState+0x28>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	605a      	str	r2, [r3, #4]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	200001cc 	.word	0x200001cc
 800345c:	200001b8 	.word	0x200001b8

08003460 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	613b      	str	r3, [r7, #16]
    }
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	60fb      	str	r3, [r7, #12]
    }
 800349e:	bf00      	nop
 80034a0:	e7fe      	b.n	80034a0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80034a2:	f000 fb67 	bl	8003b74 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <xTaskCheckForTimeOut+0xc4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d102      	bne.n	80034c6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e026      	b.n	8003514 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4b17      	ldr	r3, [pc, #92]	; (8003528 <xTaskCheckForTimeOut+0xc8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d00a      	beq.n	80034e8 <xTaskCheckForTimeOut+0x88>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d305      	bcc.n	80034e8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034dc:	2301      	movs	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e015      	b.n	8003514 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d20b      	bcs.n	800350a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	1ad2      	subs	r2, r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff98 	bl	8003434 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e004      	b.n	8003514 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003514:	f000 fb5e 	bl	8003bd4 <vPortExitCritical>

    return xReturn;
 8003518:	69fb      	ldr	r3, [r7, #28]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200001b8 	.word	0x200001b8
 8003528:	200001cc 	.word	0x200001cc

0800352c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <vTaskMissedYield+0x14>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	200001c8 	.word	0x200001c8

08003544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800354c:	f000 f84c 	bl	80035e8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <prvIdleTask+0x28>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d9f9      	bls.n	800354c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <prvIdleTask+0x2c>)
 800355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003568:	e7f0      	b.n	800354c <prvIdleTask+0x8>
 800356a:	bf00      	nop
 800356c:	200000f8 	.word	0x200000f8
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800357a:	2300      	movs	r3, #0
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	e00c      	b.n	800359a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <prvInitialiseTaskLists+0x58>)
 800358c:	4413      	add	r3, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fe2e 	bl	80021f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3301      	adds	r3, #1
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d9ef      	bls.n	8003580 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <prvInitialiseTaskLists+0x5c>)
 80035a2:	f7fe fe25 	bl	80021f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035a6:	480b      	ldr	r0, [pc, #44]	; (80035d4 <prvInitialiseTaskLists+0x60>)
 80035a8:	f7fe fe22 	bl	80021f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035ac:	480a      	ldr	r0, [pc, #40]	; (80035d8 <prvInitialiseTaskLists+0x64>)
 80035ae:	f7fe fe1f 	bl	80021f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80035b2:	480a      	ldr	r0, [pc, #40]	; (80035dc <prvInitialiseTaskLists+0x68>)
 80035b4:	f7fe fe1c 	bl	80021f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <prvInitialiseTaskLists+0x6c>)
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <prvInitialiseTaskLists+0x5c>)
 80035bc:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <prvInitialiseTaskLists+0x70>)
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <prvInitialiseTaskLists+0x60>)
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	200000f8 	.word	0x200000f8
 80035d0:	2000015c 	.word	0x2000015c
 80035d4:	20000170 	.word	0x20000170
 80035d8:	2000018c 	.word	0x2000018c
 80035dc:	200001a0 	.word	0x200001a0
 80035e0:	20000184 	.word	0x20000184
 80035e4:	20000188 	.word	0x20000188

080035e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <prvResetNextTaskUnblockTime+0x30>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <prvResetNextTaskUnblockTime+0x34>)
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800360e:	e005      	b.n	800361c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <prvResetNextTaskUnblockTime+0x30>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <prvResetNextTaskUnblockTime+0x34>)
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000184 	.word	0x20000184
 800362c:	200001d4 	.word	0x200001d4

08003630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d068      	beq.n	8003718 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003646:	4b37      	ldr	r3, [pc, #220]	; (8003724 <xTaskPriorityDisinherit+0xf4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d00a      	beq.n	8003666 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
    }
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	60bb      	str	r3, [r7, #8]
    }
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003696:	429a      	cmp	r2, r3
 8003698:	d03e      	beq.n	8003718 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d13a      	bne.n	8003718 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	3304      	adds	r3, #4
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe fe2c 	bl	8002304 <uxListRemove>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	2201      	movs	r2, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43da      	mvns	r2, r3
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <xTaskPriorityDisinherit+0xf8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4013      	ands	r3, r2
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <xTaskPriorityDisinherit+0xf8>)
 80036c6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4619      	mov	r1, r3
 80036cc:	204a      	movs	r0, #74	; 0x4a
 80036ce:	f001 fb13 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f1c3 0205 	rsb	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <xTaskPriorityDisinherit+0xf8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <xTaskPriorityDisinherit+0xf8>)
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <xTaskPriorityDisinherit+0xfc>)
 8003706:	441a      	add	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f7fe fd9b 	bl	800224a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003718:	697b      	ldr	r3, [r7, #20]
    }
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200000f4 	.word	0x200000f4
 8003728:	200001bc 	.word	0x200001bc
 800372c:	200000f8 	.word	0x200000f8

08003730 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800373a:	4b32      	ldr	r3, [pc, #200]	; (8003804 <prvAddCurrentTaskToDelayedList+0xd4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003740:	4b31      	ldr	r3, [pc, #196]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3304      	adds	r3, #4
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fddc 	bl	8002304 <uxListRemove>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10b      	bne.n	800376a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003752:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	2201      	movs	r2, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4013      	ands	r3, r2
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003768:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d110      	bne.n	8003794 <prvAddCurrentTaskToDelayedList+0x64>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	211b      	movs	r1, #27
 800377e:	4618      	mov	r0, r3
 8003780:	f002 f87c 	bl	800587c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003784:	4b20      	ldr	r3, [pc, #128]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4820      	ldr	r0, [pc, #128]	; (8003810 <prvAddCurrentTaskToDelayedList+0xe0>)
 800378e:	f7fe fd5c 	bl	800224a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003792:	e032      	b.n	80037fa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d20f      	bcs.n	80037cc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2104      	movs	r1, #4
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 f862 	bl	800587c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <prvAddCurrentTaskToDelayedList+0xe4>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7fe fd64 	bl	8002292 <vListInsert>
}
 80037ca:	e016      	b.n	80037fa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2104      	movs	r1, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 f852 	bl	800587c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7fe fd54 	bl	8002292 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <prvAddCurrentTaskToDelayedList+0xec>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d202      	bcs.n	80037fa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80037f4:	4a09      	ldr	r2, [pc, #36]	; (800381c <prvAddCurrentTaskToDelayedList+0xec>)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	6013      	str	r3, [r2, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200001b8 	.word	0x200001b8
 8003808:	200000f4 	.word	0x200000f4
 800380c:	200001bc 	.word	0x200001bc
 8003810:	200001a0 	.word	0x200001a0
 8003814:	20000188 	.word	0x20000188
 8003818:	20000184 	.word	0x20000184
 800381c:	200001d4 	.word	0x200001d4

08003820 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3b04      	subs	r3, #4
 8003830:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003838:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3b04      	subs	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b04      	subs	r3, #4
 800384e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003850:	4a0c      	ldr	r2, [pc, #48]	; (8003884 <pxPortInitialiseStack+0x64>)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3b14      	subs	r3, #20
 800385a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3b04      	subs	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f06f 0202 	mvn.w	r2, #2
 800386e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3b20      	subs	r3, #32
 8003874:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	08003889 	.word	0x08003889

08003888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <prvTaskExitError+0x54>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d00a      	beq.n	80038b2 <prvTaskExitError+0x2a>
        __asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60fb      	str	r3, [r7, #12]
    }
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <prvTaskExitError+0x28>
        __asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60bb      	str	r3, [r7, #8]
    }
 80038c4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80038c6:	bf00      	nop
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0fc      	beq.n	80038c8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000010 	.word	0x20000010

080038e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <pxCurrentTCBConst2>)
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	6808      	ldr	r0, [r1, #0]
 80038e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ea:	f380 8809 	msr	PSP, r0
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f380 8811 	msr	BASEPRI, r0
 80038fa:	4770      	bx	lr
 80038fc:	f3af 8000 	nop.w

08003900 <pxCurrentTCBConst2>:
 8003900:	200000f4 	.word	0x200000f4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop

08003908 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <prvPortStartFirstTask+0x24>)
 800390a:	6800      	ldr	r0, [r0, #0]
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f380 8808 	msr	MSP, r0
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f380 8814 	msr	CONTROL, r0
 800391a:	b662      	cpsie	i
 800391c:	b661      	cpsie	f
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	df00      	svc	0
 8003928:	bf00      	nop
 800392a:	0000      	.short	0x0000
 800392c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop

08003934 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800393a:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <xPortStartScheduler+0x120>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a46      	ldr	r2, [pc, #280]	; (8003a58 <xPortStartScheduler+0x124>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10a      	bne.n	800395a <xPortStartScheduler+0x26>
        __asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	613b      	str	r3, [r7, #16]
    }
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <xPortStartScheduler+0x120>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a3f      	ldr	r2, [pc, #252]	; (8003a5c <xPortStartScheduler+0x128>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10a      	bne.n	800397a <xPortStartScheduler+0x46>
        __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60fb      	str	r3, [r7, #12]
    }
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <xPortStartScheduler+0x12c>)
 800397c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <xPortStartScheduler+0x130>)
 80039a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <xPortStartScheduler+0x134>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039a8:	e009      	b.n	80039be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <xPortStartScheduler+0x134>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4a2d      	ldr	r2, [pc, #180]	; (8003a68 <xPortStartScheduler+0x134>)
 80039b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d0ef      	beq.n	80039aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <xPortStartScheduler+0x134>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f1c3 0307 	rsb	r3, r3, #7
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d00a      	beq.n	80039ec <xPortStartScheduler+0xb8>
        __asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	60bb      	str	r3, [r7, #8]
    }
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <xPortStartScheduler+0x134>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <xPortStartScheduler+0x134>)
 80039f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <xPortStartScheduler+0x134>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <xPortStartScheduler+0x134>)
 8003a00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003a0a:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <xPortStartScheduler+0x138>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <xPortStartScheduler+0x138>)
 8003a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <xPortStartScheduler+0x138>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <xPortStartScheduler+0x138>)
 8003a1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003a22:	f000 f963 	bl	8003cec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <xPortStartScheduler+0x13c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003a2c:	f000 f97a 	bl	8003d24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <xPortStartScheduler+0x140>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0f      	ldr	r2, [pc, #60]	; (8003a74 <xPortStartScheduler+0x140>)
 8003a36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003a3c:	f7ff ff64 	bl	8003908 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003a40:	f7ff fc04 	bl	800324c <vTaskSwitchContext>
    prvTaskExitError();
 8003a44:	f7ff ff20 	bl	8003888 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000ed00 	.word	0xe000ed00
 8003a58:	410fc271 	.word	0x410fc271
 8003a5c:	410fc270 	.word	0x410fc270
 8003a60:	e000e400 	.word	0xe000e400
 8003a64:	200001e0 	.word	0x200001e0
 8003a68:	200001e4 	.word	0x200001e4
 8003a6c:	e000ed20 	.word	0xe000ed20
 8003a70:	20000010 	.word	0x20000010
 8003a74:	e000ef34 	.word	0xe000ef34

08003a78 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <vInitPrioGroupValue+0xe4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a37      	ldr	r2, [pc, #220]	; (8003b60 <vInitPrioGroupValue+0xe8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d10a      	bne.n	8003a9e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	613b      	str	r3, [r7, #16]
    }
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <vInitPrioGroupValue+0xe4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <vInitPrioGroupValue+0xec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d10a      	bne.n	8003abe <vInitPrioGroupValue+0x46>
        __asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
    }
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <vInitPrioGroupValue+0xf0>)
 8003ac0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <vInitPrioGroupValue+0xf4>)
 8003ae4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aec:	e009      	b.n	8003b02 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003af6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d0ef      	beq.n	8003aee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1c3 0307 	rsb	r3, r3, #7
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d00a      	beq.n	8003b30 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60bb      	str	r3, [r7, #8]
    }
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003b38:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b42:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <vInitPrioGroupValue+0xf8>)
 8003b44:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000ed00 	.word	0xe000ed00
 8003b60:	410fc271 	.word	0x410fc271
 8003b64:	410fc270 	.word	0x410fc270
 8003b68:	e000e400 	.word	0xe000e400
 8003b6c:	200001e0 	.word	0x200001e0
 8003b70:	200001e4 	.word	0x200001e4

08003b74 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
        __asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
    }
 8003b8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10f      	bne.n	8003bc0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <vPortEnterCritical+0x5c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <vPortEnterCritical+0x4c>
        __asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	603b      	str	r3, [r7, #0]
    }
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <vPortEnterCritical+0x4a>
    }
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20000010 	.word	0x20000010
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <vPortExitCritical+0x50>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vPortExitCritical+0x24>
        __asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
    }
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <vPortExitCritical+0x50>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <vPortExitCritical+0x50>)
 8003c00:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <vPortExitCritical+0x50>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <vPortExitCritical+0x42>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c14:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000010 	.word	0x20000010
	...

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <pxCurrentTCBConst>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f01e 0f10 	tst.w	lr, #16
 8003c40:	bf08      	it	eq
 8003c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	6010      	str	r0, [r2, #0]
 8003c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c54:	f380 8811 	msr	BASEPRI, r0
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f7ff faf4 	bl	800324c <vTaskSwitchContext>
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f380 8811 	msr	BASEPRI, r0
 8003c6c:	bc09      	pop	{r0, r3}
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	6808      	ldr	r0, [r1, #0]
 8003c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c76:	f01e 0f10 	tst.w	lr, #16
 8003c7a:	bf08      	it	eq
 8003c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c80:	f380 8809 	msr	PSP, r0
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w

08003c90 <pxCurrentTCBConst>:
 8003c90:	200000f4 	.word	0x200000f4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
    }
 8003cb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003cb2:	f001 fc87 	bl	80055c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003cb6:	f7ff fa0d 	bl	80030d4 <xTaskIncrementTick>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d006      	beq.n	8003cce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003cc0:	f001 fcde 	bl	8005680 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <SysTick_Handler+0x50>)
 8003cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e001      	b.n	8003cd2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003cce:	f001 fcbb 	bl	8005648 <SEGGER_SYSVIEW_RecordExitISR>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f383 8811 	msr	BASEPRI, r3
    }
 8003cdc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <vPortSetupTimerInterrupt+0x28>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <vPortSetupTimerInterrupt+0x2c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <vPortSetupTimerInterrupt+0x30>)
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <vPortSetupTimerInterrupt+0x34>)
 8003d00:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <vPortSetupTimerInterrupt+0x28>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	601a      	str	r2, [r3, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e010 	.word	0xe000e010
 8003d18:	e000e018 	.word	0xe000e018
 8003d1c:	e000e014 	.word	0xe000e014
 8003d20:	0001387f 	.word	0x0001387f

08003d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d34 <vPortEnableVFP+0x10>
 8003d28:	6801      	ldr	r1, [r0, #0]
 8003d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d2e:	6001      	str	r1, [r0, #0]
 8003d30:	4770      	bx	lr
 8003d32:	0000      	.short	0x0000
 8003d34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop

08003d3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003d42:	f3ef 8305 	mrs	r3, IPSR
 8003d46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b0f      	cmp	r3, #15
 8003d4c:	d914      	bls.n	8003d78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d4e:	4a17      	ldr	r2, [pc, #92]	; (8003dac <vPortValidateInterruptPriority+0x70>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <vPortValidateInterruptPriority+0x74>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	7afa      	ldrb	r2, [r7, #11]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d20a      	bcs.n	8003d78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	607b      	str	r3, [r7, #4]
    }
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <vPortValidateInterruptPriority+0x78>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <vPortValidateInterruptPriority+0x7c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d90a      	bls.n	8003d9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	603b      	str	r3, [r7, #0]
    }
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <vPortValidateInterruptPriority+0x60>
    }
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e3f0 	.word	0xe000e3f0
 8003db0:	200001e0 	.word	0x200001e0
 8003db4:	e000ed0c 	.word	0xe000ed0c
 8003db8:	200001e4 	.word	0x200001e4

08003dbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003dc8:	f7ff f8c4 	bl	8002f54 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003dcc:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <pvPortMalloc+0x1a8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003dd4:	f000 f934 	bl	8004040 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dd8:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <pvPortMalloc+0x1ac>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f040 80a7 	bne.w	8003f34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d02d      	beq.n	8003e48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003dec:	2208      	movs	r2, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d227      	bcs.n	8003e48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003df8:	2208      	movs	r2, #8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d021      	beq.n	8003e4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f023 0307 	bic.w	r3, r3, #7
 8003e10:	3308      	adds	r3, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d214      	bcs.n	8003e42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f023 0307 	bic.w	r3, r3, #7
 8003e1e:	3308      	adds	r3, #8
 8003e20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d010      	beq.n	8003e4e <pvPortMalloc+0x92>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	617b      	str	r3, [r7, #20]
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e46:	e002      	b.n	8003e4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e000      	b.n	8003e50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d06e      	beq.n	8003f34 <pvPortMalloc+0x178>
 8003e56:	4b45      	ldr	r3, [pc, #276]	; (8003f6c <pvPortMalloc+0x1b0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d869      	bhi.n	8003f34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <pvPortMalloc+0x1b4>)
 8003e62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003e64:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <pvPortMalloc+0x1b4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e6a:	e004      	b.n	8003e76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d903      	bls.n	8003e88 <pvPortMalloc+0xcc>
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f1      	bne.n	8003e6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003e88:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <pvPortMalloc+0x1a8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d050      	beq.n	8003f34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2208      	movs	r2, #8
 8003e98:	4413      	add	r3, r2
 8003e9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	2308      	movs	r3, #8
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d91f      	bls.n	8003ef4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <pvPortMalloc+0x120>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	613b      	str	r3, [r7, #16]
    }
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eee:	69b8      	ldr	r0, [r7, #24]
 8003ef0:	f000 f908 	bl	8004104 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <pvPortMalloc+0x1b0>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <pvPortMalloc+0x1b0>)
 8003f00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <pvPortMalloc+0x1b0>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <pvPortMalloc+0x1b8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d203      	bcs.n	8003f16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f0e:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <pvPortMalloc+0x1b0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <pvPortMalloc+0x1b8>)
 8003f14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <pvPortMalloc+0x1ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <pvPortMalloc+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	4a11      	ldr	r2, [pc, #68]	; (8003f78 <pvPortMalloc+0x1bc>)
 8003f32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003f34:	f7ff f81c 	bl	8002f70 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <pvPortMalloc+0x19c>
        __asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	60fb      	str	r3, [r7, #12]
    }
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <pvPortMalloc+0x19a>
    return pvReturn;
 8003f58:	69fb      	ldr	r3, [r7, #28]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20012df0 	.word	0x20012df0
 8003f68:	20012e04 	.word	0x20012e04
 8003f6c:	20012df4 	.word	0x20012df4
 8003f70:	20012de8 	.word	0x20012de8
 8003f74:	20012df8 	.word	0x20012df8
 8003f78:	20012dfc 	.word	0x20012dfc

08003f7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d04d      	beq.n	800402a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003f8e:	2308      	movs	r3, #8
 8003f90:	425b      	negs	r3, r3
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4b24      	ldr	r3, [pc, #144]	; (8004034 <vPortFree+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <vPortFree+0x44>
        __asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60fb      	str	r3, [r7, #12]
    }
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <vPortFree+0x62>
        __asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60bb      	str	r3, [r7, #8]
    }
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <vPortFree+0xb8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01e      	beq.n	800402a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d11a      	bne.n	800402a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <vPortFree+0xb8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004004:	f7fe ffa6 	bl	8002f54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <vPortFree+0xbc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4413      	add	r3, r2
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <vPortFree+0xbc>)
 8004014:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004016:	6938      	ldr	r0, [r7, #16]
 8004018:	f000 f874 	bl	8004104 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <vPortFree+0xc0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a06      	ldr	r2, [pc, #24]	; (800403c <vPortFree+0xc0>)
 8004024:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004026:	f7fe ffa3 	bl	8002f70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20012e04 	.word	0x20012e04
 8004038:	20012df4 	.word	0x20012df4
 800403c:	20012e00 	.word	0x20012e00

08004040 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004046:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800404a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <prvHeapInit+0xac>)
 800404e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00c      	beq.n	8004074 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3307      	adds	r3, #7
 800405e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0307 	bic.w	r3, r3, #7
 8004066:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <prvHeapInit+0xac>)
 8004070:	4413      	add	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <prvHeapInit+0xb0>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800407e:	4b1c      	ldr	r3, [pc, #112]	; (80040f0 <prvHeapInit+0xb0>)
 8004080:	2200      	movs	r2, #0
 8004082:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4413      	add	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800408c:	2208      	movs	r2, #8
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <prvHeapInit+0xb4>)
 80040a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <prvHeapInit+0xb4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <prvHeapInit+0xb4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	1ad2      	subs	r2, r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <prvHeapInit+0xb4>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <prvHeapInit+0xb8>)
 80040ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a09      	ldr	r2, [pc, #36]	; (80040fc <prvHeapInit+0xbc>)
 80040d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <prvHeapInit+0xc0>)
 80040da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040de:	601a      	str	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	200001e8 	.word	0x200001e8
 80040f0:	20012de8 	.word	0x20012de8
 80040f4:	20012df0 	.word	0x20012df0
 80040f8:	20012df8 	.word	0x20012df8
 80040fc:	20012df4 	.word	0x20012df4
 8004100:	20012e04 	.word	0x20012e04

08004104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800410c:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <prvInsertBlockIntoFreeList+0xac>)
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e002      	b.n	8004118 <prvInsertBlockIntoFreeList+0x14>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d8f7      	bhi.n	8004112 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d108      	bne.n	8004146 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	441a      	add	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d118      	bne.n	800418c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d00d      	beq.n	8004182 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	441a      	add	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	e008      	b.n	8004194 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e003      	b.n	8004194 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d002      	beq.n	80041a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20012de8 	.word	0x20012de8
 80041b4:	20012df0 	.word	0x20012df0

080041b8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <_cbSendSystemDesc+0x14>)
 80041be:	f001 f9ab 	bl	8005518 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80041c2:	4803      	ldr	r0, [pc, #12]	; (80041d0 <_cbSendSystemDesc+0x18>)
 80041c4:	f001 f9a8 	bl	8005518 <SEGGER_SYSVIEW_SendSysDesc>
}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	0800709c 	.word	0x0800709c
 80041d0:	080070d4 	.word	0x080070d4

080041d4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <SEGGER_SYSVIEW_Conf+0x1c>)
 80041da:	4a06      	ldr	r2, [pc, #24]	; (80041f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80041dc:	4906      	ldr	r1, [pc, #24]	; (80041f8 <SEGGER_SYSVIEW_Conf+0x24>)
 80041de:	4806      	ldr	r0, [pc, #24]	; (80041f8 <SEGGER_SYSVIEW_Conf+0x24>)
 80041e0:	f000 fd18 	bl	8004c14 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80041e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80041e8:	f000 fd58 	bl	8004c9c <SEGGER_SYSVIEW_SetRAMBase>
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	080041b9 	.word	0x080041b9
 80041f4:	080071a4 	.word	0x080071a4
 80041f8:	04c4b400 	.word	0x04c4b400

080041fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fe:	b085      	sub	sp, #20
 8004200:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	e033      	b.n	8004270 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004208:	491e      	ldr	r1, [pc, #120]	; (8004284 <_cbSendTaskList+0x88>)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	491a      	ldr	r1, [pc, #104]	; (8004284 <_cbSendTaskList+0x88>)
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3304      	adds	r3, #4
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	4c16      	ldr	r4, [pc, #88]	; (8004284 <_cbSendTaskList+0x88>)
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4423      	add	r3, r4
 8004238:	3308      	adds	r3, #8
 800423a:	681c      	ldr	r4, [r3, #0]
 800423c:	4d11      	ldr	r5, [pc, #68]	; (8004284 <_cbSendTaskList+0x88>)
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	442b      	add	r3, r5
 800424a:	330c      	adds	r3, #12
 800424c:	681d      	ldr	r5, [r3, #0]
 800424e:	4e0d      	ldr	r6, [pc, #52]	; (8004284 <_cbSendTaskList+0x88>)
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4433      	add	r3, r6
 800425c:	3310      	adds	r3, #16
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	462b      	mov	r3, r5
 8004264:	4622      	mov	r2, r4
 8004266:	f000 f8bd 	bl	80043e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3301      	adds	r3, #1
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <_cbSendTaskList+0x8c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	d3c6      	bcc.n	8004208 <_cbSendTaskList+0xc>
  }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004284:	20012e08 	.word	0x20012e08
 8004288:	20012ea8 	.word	0x20012ea8

0800428c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004294:	f7fe ff0c 	bl	80030b0 <xTaskGetTickCountFromISR>
 8004298:	4603      	mov	r3, r0
 800429a:	2200      	movs	r2, #0
 800429c:	469a      	mov	sl, r3
 800429e:	4693      	mov	fp, r2
 80042a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80042a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	f04f 0a00 	mov.w	sl, #0
 80042b0:	f04f 0b00 	mov.w	fp, #0
 80042b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80042b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80042bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80042c0:	4652      	mov	r2, sl
 80042c2:	465b      	mov	r3, fp
 80042c4:	1a14      	subs	r4, r2, r0
 80042c6:	eb63 0501 	sbc.w	r5, r3, r1
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	00ab      	lsls	r3, r5, #2
 80042d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80042d8:	00a2      	lsls	r2, r4, #2
 80042da:	4614      	mov	r4, r2
 80042dc:	461d      	mov	r5, r3
 80042de:	eb14 0800 	adds.w	r8, r4, r0
 80042e2:	eb45 0901 	adc.w	r9, r5, r1
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042fa:	4690      	mov	r8, r2
 80042fc:	4699      	mov	r9, r3
 80042fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004302:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004314 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004322:	2205      	movs	r2, #5
 8004324:	492b      	ldr	r1, [pc, #172]	; (80043d4 <SYSVIEW_AddTask+0xc0>)
 8004326:	68b8      	ldr	r0, [r7, #8]
 8004328:	f001 fc74 	bl	8005c14 <memcmp>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d04b      	beq.n	80043ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b07      	cmp	r3, #7
 8004338:	d903      	bls.n	8004342 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800433a:	4828      	ldr	r0, [pc, #160]	; (80043dc <SYSVIEW_AddTask+0xc8>)
 800433c:	f001 fbea 	bl	8005b14 <SEGGER_SYSVIEW_Warn>
    return;
 8004340:	e044      	b.n	80043cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4926      	ldr	r1, [pc, #152]	; (80043e0 <SYSVIEW_AddTask+0xcc>)
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4921      	ldr	r1, [pc, #132]	; (80043e0 <SYSVIEW_AddTask+0xcc>)
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	3304      	adds	r3, #4
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	491b      	ldr	r1, [pc, #108]	; (80043e0 <SYSVIEW_AddTask+0xcc>)
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3308      	adds	r3, #8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4916      	ldr	r1, [pc, #88]	; (80043e0 <SYSVIEW_AddTask+0xcc>)
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	330c      	adds	r3, #12
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4910      	ldr	r1, [pc, #64]	; (80043e0 <SYSVIEW_AddTask+0xcc>)
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3310      	adds	r3, #16
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <SYSVIEW_AddTask+0xc4>)
 80043b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f80e 	bl	80043e4 <SYSVIEW_SendTaskInfo>
 80043c8:	e000      	b.n	80043cc <SYSVIEW_AddTask+0xb8>
    return;
 80043ca:	bf00      	nop

}
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	080070e4 	.word	0x080070e4
 80043d8:	20012ea8 	.word	0x20012ea8
 80043dc:	080070ec 	.word	0x080070ec
 80043e0:	20012e08 	.word	0x20012e08

080043e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80043f2:	f107 0314 	add.w	r3, r7, #20
 80043f6:	2214      	movs	r2, #20
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 fc28 	bl	8005c50 <memset>
  TaskInfo.TaskID     = TaskID;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4618      	mov	r0, r3
 800441a:	f000 ff85 	bl	8005328 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800441e:	bf00      	nop
 8004420:	3728      	adds	r7, #40	; 0x28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <_DoInit+0x98>)
 8004430:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2203      	movs	r2, #3
 8004436:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2203      	movs	r2, #3
 800443c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <_DoInit+0x9c>)
 8004442:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <_DoInit+0xa0>)
 8004448:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004450:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <_DoInit+0x9c>)
 8004468:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <_DoInit+0xa4>)
 800446e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2210      	movs	r2, #16
 8004474:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3307      	adds	r3, #7
 800448c:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <_DoInit+0xa8>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004492:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <_DoInit+0xac>)
 800449a:	6810      	ldr	r0, [r2, #0]
 800449c:	6018      	str	r0, [r3, #0]
 800449e:	8891      	ldrh	r1, [r2, #4]
 80044a0:	7992      	ldrb	r2, [r2, #6]
 80044a2:	8099      	strh	r1, [r3, #4]
 80044a4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044a6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80044b0:	f3bf 8f5f 	dmb	sy
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20012eac 	.word	0x20012eac
 80044c4:	0800713c 	.word	0x0800713c
 80044c8:	20012f54 	.word	0x20012f54
 80044cc:	20013354 	.word	0x20013354
 80044d0:	08007148 	.word	0x08007148
 80044d4:	0800714c 	.word	0x0800714c

080044d8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80044e4:	4b3e      	ldr	r3, [pc, #248]	; (80045e0 <SEGGER_RTT_ReadNoLock+0x108>)
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <SEGGER_RTT_ReadNoLock+0x1e>
 80044f2:	f7ff ff99 	bl	8004428 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	3360      	adds	r3, #96	; 0x60
 8004502:	4a37      	ldr	r2, [pc, #220]	; (80045e0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004504:	4413      	add	r3, r2
 8004506:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004518:	2300      	movs	r3, #0
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800451c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d92b      	bls.n	800457c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4293      	cmp	r3, r2
 8004534:	bf28      	it	cs
 8004536:	4613      	movcs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	4413      	add	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800454a:	f001 fb73 	bl	8005c34 <memcpy>
    NumBytesRead += NumBytesRem;
 800454e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4413      	add	r3, r2
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4413      	add	r3, r2
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004574:	429a      	cmp	r2, r3
 8004576:	d101      	bne.n	800457c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4293      	cmp	r3, r2
 800458a:	bf28      	it	cs
 800458c:	4613      	movcs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d019      	beq.n	80045ca <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	4413      	add	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	6939      	ldr	r1, [r7, #16]
 80045a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045a6:	f001 fb45 	bl	8005c34 <memcpy>
    NumBytesRead += NumBytesRem;
 80045aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20012eac 	.word	0x20012eac

080045e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80045f2:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004600:	f7ff ff12 	bl	8004428 <_DoInit>
  SEGGER_RTT_LOCK();
 8004604:	f3ef 8311 	mrs	r3, BASEPRI
 8004608:	f04f 0120 	mov.w	r1, #32
 800460c:	f381 8811 	msr	BASEPRI, r1
 8004610:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004612:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004614:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800461a:	6939      	ldr	r1, [r7, #16]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	3304      	adds	r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	429a      	cmp	r2, r3
 8004640:	dbeb      	blt.n	800461a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004642:	e000      	b.n	8004646 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004644:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	429a      	cmp	r2, r3
 800464e:	da3f      	bge.n	80046d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004664:	6939      	ldr	r1, [r7, #16]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	3304      	adds	r3, #4
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800467a:	6939      	ldr	r1, [r7, #16]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	3320      	adds	r3, #32
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	440b      	add	r3, r1
 800469c:	3328      	adds	r3, #40	; 0x28
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80046a2:	6939      	ldr	r1, [r7, #16]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	440b      	add	r3, r1
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	440b      	add	r3, r1
 80046c4:	332c      	adds	r3, #44	; 0x2c
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046ca:	f3bf 8f5f 	dmb	sy
 80046ce:	e002      	b.n	80046d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80046dc:	69fb      	ldr	r3, [r7, #28]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20012eac 	.word	0x20012eac

080046ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004708:	f7ff fe8e 	bl	8004428 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800470e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	461a      	mov	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4293      	cmp	r3, r2
 800471a:	d24d      	bcs.n	80047b8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800471c:	f3ef 8311 	mrs	r3, BASEPRI
 8004720:	f04f 0120 	mov.w	r1, #32
 8004724:	f381 8811 	msr	BASEPRI, r1
 8004728:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d031      	beq.n	8004794 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	440b      	add	r3, r1
 800473e:	3360      	adds	r3, #96	; 0x60
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3364      	adds	r3, #100	; 0x64
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004758:	6979      	ldr	r1, [r7, #20]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	440b      	add	r3, r1
 8004766:	3368      	adds	r3, #104	; 0x68
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800476c:	6979      	ldr	r1, [r7, #20]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	440b      	add	r3, r1
 800477a:	3370      	adds	r3, #112	; 0x70
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004780:	6979      	ldr	r1, [r7, #20]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	440b      	add	r3, r1
 800478e:	336c      	adds	r3, #108	; 0x6c
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	3374      	adds	r3, #116	; 0x74
 80047a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	e002      	b.n	80047be <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
 80047bc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80047be:	69fb      	ldr	r3, [r7, #28]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20012eac 	.word	0x20012eac

080047cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047dc:	e002      	b.n	80047e4 <_EncodeStr+0x18>
    Len++;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3301      	adds	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f6      	bne.n	80047de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d901      	bls.n	80047fc <_EncodeStr+0x30>
    Len = Limit;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2bfe      	cmp	r3, #254	; 0xfe
 8004800:	d806      	bhi.n	8004810 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	60fa      	str	r2, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e011      	b.n	8004834 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60fa      	str	r2, [r7, #12]
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	60fa      	str	r2, [r7, #12]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	0a19      	lsrs	r1, r3, #8
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	b2ca      	uxtb	r2, r1
 8004832:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004838:	e00a      	b.n	8004850 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	1c53      	adds	r3, r2, #1
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	60f9      	str	r1, [r7, #12]
 8004846:	7812      	ldrb	r2, [r2, #0]
 8004848:	701a      	strb	r2, [r3, #0]
    n++;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3301      	adds	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	429a      	cmp	r2, r3
 8004856:	d3f0      	bcc.n	800483a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004858:	68fb      	ldr	r3, [r7, #12]
}
 800485a:	4618      	mov	r0, r3
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <_HandleIncomingPacket+0xe0>)
 8004888:	7e1b      	ldrb	r3, [r3, #24]
 800488a:	4618      	mov	r0, r3
 800488c:	1cfb      	adds	r3, r7, #3
 800488e:	2201      	movs	r2, #1
 8004890:	4619      	mov	r1, r3
 8004892:	f7ff fe21 	bl	80044d8 <SEGGER_RTT_ReadNoLock>
 8004896:	4603      	mov	r3, r0
 8004898:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	dd54      	ble.n	800494a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	2b80      	cmp	r3, #128	; 0x80
 80048a4:	d032      	beq.n	800490c <_HandleIncomingPacket+0x8c>
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	dc42      	bgt.n	8004930 <_HandleIncomingPacket+0xb0>
 80048aa:	2b07      	cmp	r3, #7
 80048ac:	dc16      	bgt.n	80048dc <_HandleIncomingPacket+0x5c>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dd3e      	ble.n	8004930 <_HandleIncomingPacket+0xb0>
 80048b2:	3b01      	subs	r3, #1
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d83b      	bhi.n	8004930 <_HandleIncomingPacket+0xb0>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <_HandleIncomingPacket+0x40>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048e3 	.word	0x080048e3
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	080048ef 	.word	0x080048ef
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004907 	.word	0x08004907
 80048dc:	2b7f      	cmp	r3, #127	; 0x7f
 80048de:	d036      	beq.n	800494e <_HandleIncomingPacket+0xce>
 80048e0:	e026      	b.n	8004930 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80048e2:	f000 fba7 	bl	8005034 <SEGGER_SYSVIEW_Start>
      break;
 80048e6:	e037      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80048e8:	f000 fc5e 	bl	80051a8 <SEGGER_SYSVIEW_Stop>
      break;
 80048ec:	e034      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80048ee:	f000 fe37 	bl	8005560 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80048f2:	e031      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80048f4:	f000 fdfc 	bl	80054f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80048f8:	e02e      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80048fa:	f000 fc7b 	bl	80051f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80048fe:	e02b      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004900:	f001 f8ca 	bl	8005a98 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004904:	e028      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004906:	f001 f8a9 	bl	8005a5c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800490a:	e025      	b.n	8004958 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800490c:	4b14      	ldr	r3, [pc, #80]	; (8004960 <_HandleIncomingPacket+0xe0>)
 800490e:	7e1b      	ldrb	r3, [r3, #24]
 8004910:	4618      	mov	r0, r3
 8004912:	1cfb      	adds	r3, r7, #3
 8004914:	2201      	movs	r2, #1
 8004916:	4619      	mov	r1, r3
 8004918:	f7ff fdde 	bl	80044d8 <SEGGER_RTT_ReadNoLock>
 800491c:	4603      	mov	r3, r0
 800491e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd15      	ble.n	8004952 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	4618      	mov	r0, r3
 800492a:	f001 f817 	bl	800595c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800492e:	e010      	b.n	8004952 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	b25b      	sxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	da0e      	bge.n	8004956 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <_HandleIncomingPacket+0xe0>)
 800493a:	7e1b      	ldrb	r3, [r3, #24]
 800493c:	4618      	mov	r0, r3
 800493e:	1cfb      	adds	r3, r7, #3
 8004940:	2201      	movs	r2, #1
 8004942:	4619      	mov	r1, r3
 8004944:	f7ff fdc8 	bl	80044d8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004948:	e005      	b.n	8004956 <_HandleIncomingPacket+0xd6>
    }
  }
 800494a:	bf00      	nop
 800494c:	e004      	b.n	8004958 <_HandleIncomingPacket+0xd8>
      break;
 800494e:	bf00      	nop
 8004950:	e002      	b.n	8004958 <_HandleIncomingPacket+0xd8>
      break;
 8004952:	bf00      	nop
 8004954:	e000      	b.n	8004958 <_HandleIncomingPacket+0xd8>
      break;
 8004956:	bf00      	nop
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	2001436c 	.word	0x2001436c

08004964 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	; 0x30
 8004968:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800496a:	2301      	movs	r3, #1
 800496c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	3301      	adds	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 800497e:	e00b      	b.n	8004998 <_TrySendOverflowPacket+0x34>
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	b2da      	uxtb	r2, r3
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	62f9      	str	r1, [r7, #44]	; 0x2c
 800498a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	09db      	lsrs	r3, r3, #7
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b7f      	cmp	r3, #127	; 0x7f
 800499c:	d8f0      	bhi.n	8004980 <_TrySendOverflowPacket+0x1c>
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <_TrySendOverflowPacket+0xe0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	e00b      	b.n	80049e0 <_TrySendOverflowPacket+0x7c>
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	1c59      	adds	r1, r3, #1
 80049d0:	6279      	str	r1, [r7, #36]	; 0x24
 80049d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	09db      	lsrs	r3, r3, #7
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b7f      	cmp	r3, #127	; 0x7f
 80049e4:	d8f0      	bhi.n	80049c8 <_TrySendOverflowPacket+0x64>
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	627a      	str	r2, [r7, #36]	; 0x24
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	4618      	mov	r0, r3
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	1d3b      	adds	r3, r7, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	f7fb fbe2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	e004      	b.n	8004a34 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <_TrySendOverflowPacket+0xdc>)
 8004a32:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004a34:	693b      	ldr	r3, [r7, #16]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3730      	adds	r7, #48	; 0x30
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2001436c 	.word	0x2001436c
 8004a44:	e0001004 	.word	0xe0001004

08004a48 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004a54:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <_SendPacket+0x1c0>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d010      	beq.n	8004a7e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004a5c:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <_SendPacket+0x1c0>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a3 	beq.w	8004bac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004a66:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <_SendPacket+0x1c0>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d109      	bne.n	8004a82 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004a6e:	f7ff ff79 	bl	8004964 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <_SendPacket+0x1c0>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 809a 	bne.w	8004bb0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004a7c:	e001      	b.n	8004a82 <_SendPacket+0x3a>
    goto Send;
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <_SendPacket+0x3c>
Send:
 8004a82:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b1f      	cmp	r3, #31
 8004a88:	d809      	bhi.n	8004a9e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a8a:	4b5f      	ldr	r3, [pc, #380]	; (8004c08 <_SendPacket+0x1c0>)
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 808b 	bne.w	8004bb4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b17      	cmp	r3, #23
 8004aa2:	d807      	bhi.n	8004ab4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	e03d      	b.n	8004b30 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b7f      	cmp	r3, #127	; 0x7f
 8004ac0:	d912      	bls.n	8004ae8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	09da      	lsrs	r2, r3, #7
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	3a01      	subs	r2, #1
 8004ada:	60fa      	str	r2, [r7, #12]
 8004adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e006      	b.n	8004af6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b7f      	cmp	r3, #127	; 0x7f
 8004afa:	d912      	bls.n	8004b22 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	09da      	lsrs	r2, r3, #7
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	3a01      	subs	r2, #1
 8004b14:	60fa      	str	r2, [r7, #12]
 8004b16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e006      	b.n	8004b30 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <_SendPacket+0x1c4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b36:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <_SendPacket+0x1c0>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	e00b      	b.n	8004b62 <_SendPacket+0x11a>
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1c59      	adds	r1, r3, #1
 8004b52:	6279      	str	r1, [r7, #36]	; 0x24
 8004b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	09db      	lsrs	r3, r3, #7
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2b7f      	cmp	r3, #127	; 0x7f
 8004b66:	d8f0      	bhi.n	8004b4a <_SendPacket+0x102>
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b6e:	6a3a      	ldr	r2, [r7, #32]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <_SendPacket+0x1c0>)
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	f7fb fb22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b96:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <_SendPacket+0x1c0>)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	60d3      	str	r3, [r2, #12]
 8004b9c:	e00b      	b.n	8004bb6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <_SendPacket+0x1c0>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <_SendPacket+0x1c0>)
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e004      	b.n	8004bb6 <_SendPacket+0x16e>
    goto SendDone;
 8004bac:	bf00      	nop
 8004bae:	e002      	b.n	8004bb6 <_SendPacket+0x16e>
      goto SendDone;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <_SendPacket+0x16e>
      goto SendDone;
 8004bb4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004bb6:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <_SendPacket+0x1c0>)
 8004bb8:	7e1b      	ldrb	r3, [r3, #24]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <_SendPacket+0x1c8>)
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	440b      	add	r3, r1
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	336c      	adds	r3, #108	; 0x6c
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <_SendPacket+0x1c0>)
 8004bce:	7e1b      	ldrb	r3, [r3, #24]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	490f      	ldr	r1, [pc, #60]	; (8004c10 <_SendPacket+0x1c8>)
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4403      	add	r3, r0
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3370      	adds	r3, #112	; 0x70
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d00b      	beq.n	8004bfe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <_SendPacket+0x1c0>)
 8004be8:	789b      	ldrb	r3, [r3, #2]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <_SendPacket+0x1c0>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bf4:	f7ff fe44 	bl	8004880 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <_SendPacket+0x1c0>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2001436c 	.word	0x2001436c
 8004c0c:	e0001004 	.word	0xe0001004
 8004c10:	20012eac 	.word	0x20012eac

08004c14 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c22:	2300      	movs	r3, #0
 8004c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c28:	4917      	ldr	r1, [pc, #92]	; (8004c88 <SEGGER_SYSVIEW_Init+0x74>)
 8004c2a:	4818      	ldr	r0, [pc, #96]	; (8004c8c <SEGGER_SYSVIEW_Init+0x78>)
 8004c2c:	f7ff fcda 	bl	80045e4 <SEGGER_RTT_AllocUpBuffer>
 8004c30:	4603      	mov	r3, r0
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c36:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3a:	785a      	ldrb	r2, [r3, #1]
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c3e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c42:	7e1b      	ldrb	r3, [r3, #24]
 8004c44:	4618      	mov	r0, r3
 8004c46:	2300      	movs	r3, #0
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <SEGGER_SYSVIEW_Init+0x80>)
 8004c4e:	490f      	ldr	r1, [pc, #60]	; (8004c8c <SEGGER_SYSVIEW_Init+0x78>)
 8004c50:	f7ff fd4c 	bl	80046ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <SEGGER_SYSVIEW_Init+0x84>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a0c      	ldr	r2, [pc, #48]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c60:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c62:	4a0b      	ldr	r2, [pc, #44]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20013364 	.word	0x20013364
 8004c8c:	08007154 	.word	0x08007154
 8004c90:	2001436c 	.word	0x2001436c
 8004c94:	20014364 	.word	0x20014364
 8004c98:	e0001004 	.word	0xe0001004

08004c9c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6113      	str	r3, [r2, #16]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	2001436c 	.word	0x2001436c

08004cbc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc8:	f04f 0120 	mov.w	r1, #32
 8004ccc:	f381 8811 	msr	BASEPRI, r1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	4808      	ldr	r0, [pc, #32]	; (8004cf4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cd4:	f7ff fdc7 	bl	8004866 <_PreparePacket>
 8004cd8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f7ff feb2 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f383 8811 	msr	BASEPRI, r3
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2001439c 	.word	0x2001439c

08004cf8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d02:	f3ef 8311 	mrs	r3, BASEPRI
 8004d06:	f04f 0120 	mov.w	r1, #32
 8004d0a:	f381 8811 	msr	BASEPRI, r1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	4816      	ldr	r0, [pc, #88]	; (8004d6c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d12:	f7ff fda8 	bl	8004866 <_PreparePacket>
 8004d16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	e00b      	b.n	8004d3e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	61f9      	str	r1, [r7, #28]
 8004d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	09db      	lsrs	r3, r3, #7
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2b7f      	cmp	r3, #127	; 0x7f
 8004d42:	d8f0      	bhi.n	8004d26 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	61fa      	str	r2, [r7, #28]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6938      	ldr	r0, [r7, #16]
 8004d5a:	f7ff fe75 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f383 8811 	msr	BASEPRI, r3
}
 8004d64:	bf00      	nop
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	2001439c 	.word	0x2001439c

08004d70 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d80:	f04f 0120 	mov.w	r1, #32
 8004d84:	f381 8811 	msr	BASEPRI, r1
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	4825      	ldr	r0, [pc, #148]	; (8004e20 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d8c:	f7ff fd6b 	bl	8004866 <_PreparePacket>
 8004d90:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d9e:	e00b      	b.n	8004db8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	1c59      	adds	r1, r3, #1
 8004da8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	09db      	lsrs	r3, r3, #7
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	2b7f      	cmp	r3, #127	; 0x7f
 8004dbc:	d8f0      	bhi.n	8004da0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	e00b      	b.n	8004df0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	6279      	str	r1, [r7, #36]	; 0x24
 8004de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	09db      	lsrs	r3, r3, #7
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2b7f      	cmp	r3, #127	; 0x7f
 8004df4:	d8f0      	bhi.n	8004dd8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	69b8      	ldr	r0, [r7, #24]
 8004e0c:	f7ff fe1c 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f383 8811 	msr	BASEPRI, r3
}
 8004e16:	bf00      	nop
 8004e18:	3730      	adds	r7, #48	; 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2001439c 	.word	0x2001439c

08004e24 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08e      	sub	sp, #56	; 0x38
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e32:	f3ef 8311 	mrs	r3, BASEPRI
 8004e36:	f04f 0120 	mov.w	r1, #32
 8004e3a:	f381 8811 	msr	BASEPRI, r1
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	4832      	ldr	r0, [pc, #200]	; (8004f0c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004e42:	f7ff fd10 	bl	8004866 <_PreparePacket>
 8004e46:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	633b      	str	r3, [r7, #48]	; 0x30
 8004e54:	e00b      	b.n	8004e6e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5c:	1c59      	adds	r1, r3, #1
 8004e5e:	6379      	str	r1, [r7, #52]	; 0x34
 8004e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	09db      	lsrs	r3, r3, #7
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	2b7f      	cmp	r3, #127	; 0x7f
 8004e72:	d8f0      	bhi.n	8004e56 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	637a      	str	r2, [r7, #52]	; 0x34
 8004e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8c:	e00b      	b.n	8004ea6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	1c59      	adds	r1, r3, #1
 8004e96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	09db      	lsrs	r3, r3, #7
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eaa:	d8f0      	bhi.n	8004e8e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	e00b      	b.n	8004ede <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1c59      	adds	r1, r3, #1
 8004ece:	6279      	str	r1, [r7, #36]	; 0x24
 8004ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	09db      	lsrs	r3, r3, #7
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee2:	d8f0      	bhi.n	8004ec6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	627a      	str	r2, [r7, #36]	; 0x24
 8004eea:	6a3a      	ldr	r2, [r7, #32]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	69b8      	ldr	r0, [r7, #24]
 8004efa:	f7ff fda5 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f383 8811 	msr	BASEPRI, r3
}
 8004f04:	bf00      	nop
 8004f06:	3738      	adds	r7, #56	; 0x38
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2001439c 	.word	0x2001439c

08004f10 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b090      	sub	sp, #64	; 0x40
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f22:	f04f 0120 	mov.w	r1, #32
 8004f26:	f381 8811 	msr	BASEPRI, r1
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	4840      	ldr	r0, [pc, #256]	; (8005030 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004f2e:	f7ff fc9a 	bl	8004866 <_PreparePacket>
 8004f32:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f40:	e00b      	b.n	8004f5a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	09db      	lsrs	r3, r3, #7
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5e:	d8f0      	bhi.n	8004f42 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
 8004f78:	e00b      	b.n	8004f92 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	6379      	str	r1, [r7, #52]	; 0x34
 8004f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2b7f      	cmp	r3, #127	; 0x7f
 8004f96:	d8f0      	bhi.n	8004f7a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb0:	e00b      	b.n	8004fca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	1c59      	adds	r1, r3, #1
 8004fba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	09db      	lsrs	r3, r3, #7
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fce:	d8f0      	bhi.n	8004fb2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	e00b      	b.n	8005002 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	6279      	str	r1, [r7, #36]	; 0x24
 8004ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	09db      	lsrs	r3, r3, #7
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b7f      	cmp	r3, #127	; 0x7f
 8005006:	d8f0      	bhi.n	8004fea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	627a      	str	r2, [r7, #36]	; 0x24
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	6979      	ldr	r1, [r7, #20]
 800501c:	69b8      	ldr	r0, [r7, #24]
 800501e:	f7ff fd13 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f383 8811 	msr	BASEPRI, r3
}
 8005028:	bf00      	nop
 800502a:	3740      	adds	r7, #64	; 0x40
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2001439c 	.word	0x2001439c

08005034 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800503a:	4b58      	ldr	r3, [pc, #352]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 800503c:	2201      	movs	r2, #1
 800503e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005040:	f3ef 8311 	mrs	r3, BASEPRI
 8005044:	f04f 0120 	mov.w	r1, #32
 8005048:	f381 8811 	msr	BASEPRI, r1
 800504c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800504e:	4b53      	ldr	r3, [pc, #332]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	220a      	movs	r2, #10
 8005054:	4952      	ldr	r1, [pc, #328]	; (80051a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005056:	4618      	mov	r0, r3
 8005058:	f7fb f8ba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005062:	200a      	movs	r0, #10
 8005064:	f7ff fe2a 	bl	8004cbc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005068:	f3ef 8311 	mrs	r3, BASEPRI
 800506c:	f04f 0120 	mov.w	r1, #32
 8005070:	f381 8811 	msr	BASEPRI, r1
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	484b      	ldr	r0, [pc, #300]	; (80051a4 <SEGGER_SYSVIEW_Start+0x170>)
 8005078:	f7ff fbf5 	bl	8004866 <_PreparePacket>
 800507c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	4b45      	ldr	r3, [pc, #276]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
 800508c:	e00b      	b.n	80050a6 <SEGGER_SYSVIEW_Start+0x72>
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	b2da      	uxtb	r2, r3
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	1c59      	adds	r1, r3, #1
 8005096:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	09db      	lsrs	r3, r3, #7
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	2b7f      	cmp	r3, #127	; 0x7f
 80050aa:	d8f0      	bhi.n	800508e <SEGGER_SYSVIEW_Start+0x5a>
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
 80050c0:	4b36      	ldr	r3, [pc, #216]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	e00b      	b.n	80050e0 <SEGGER_SYSVIEW_Start+0xac>
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	6279      	str	r1, [r7, #36]	; 0x24
 80050d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	09db      	lsrs	r3, r3, #7
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	2b7f      	cmp	r3, #127	; 0x7f
 80050e4:	d8f0      	bhi.n	80050c8 <SEGGER_SYSVIEW_Start+0x94>
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	627a      	str	r2, [r7, #36]	; 0x24
 80050ec:	6a3a      	ldr	r2, [r7, #32]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	4b28      	ldr	r3, [pc, #160]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e00b      	b.n	800511a <SEGGER_SYSVIEW_Start+0xe6>
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	1c59      	adds	r1, r3, #1
 800510a:	61f9      	str	r1, [r7, #28]
 800510c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	09db      	lsrs	r3, r3, #7
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b7f      	cmp	r3, #127	; 0x7f
 800511e:	d8f0      	bhi.n	8005102 <SEGGER_SYSVIEW_Start+0xce>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	61fa      	str	r2, [r7, #28]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e00b      	b.n	8005152 <SEGGER_SYSVIEW_Start+0x11e>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	6179      	str	r1, [r7, #20]
 8005144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	09db      	lsrs	r3, r3, #7
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b7f      	cmp	r3, #127	; 0x7f
 8005156:	d8f0      	bhi.n	800513a <SEGGER_SYSVIEW_Start+0x106>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	617a      	str	r2, [r7, #20]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005168:	2218      	movs	r2, #24
 800516a:	6839      	ldr	r1, [r7, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fc6b 	bl	8004a48 <_SendPacket>
      RECORD_END();
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <SEGGER_SYSVIEW_Start+0x168>)
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005186:	f000 f9eb 	bl	8005560 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800518a:	f000 f9b1 	bl	80054f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800518e:	f000 fc83 	bl	8005a98 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005192:	bf00      	nop
 8005194:	3730      	adds	r7, #48	; 0x30
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	2001436c 	.word	0x2001436c
 80051a0:	080071ac 	.word	0x080071ac
 80051a4:	2001439c 	.word	0x2001439c

080051a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051ae:	f3ef 8311 	mrs	r3, BASEPRI
 80051b2:	f04f 0120 	mov.w	r1, #32
 80051b6:	f381 8811 	msr	BASEPRI, r1
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	480b      	ldr	r0, [pc, #44]	; (80051ec <SEGGER_SYSVIEW_Stop+0x44>)
 80051be:	f7ff fb52 	bl	8004866 <_PreparePacket>
 80051c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051cc:	220b      	movs	r2, #11
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	6838      	ldr	r0, [r7, #0]
 80051d2:	f7ff fc39 	bl	8004a48 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f383 8811 	msr	BASEPRI, r3
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	2001439c 	.word	0x2001439c
 80051f0:	2001436c 	.word	0x2001436c

080051f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	; 0x30
 80051f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051fa:	f3ef 8311 	mrs	r3, BASEPRI
 80051fe:	f04f 0120 	mov.w	r1, #32
 8005202:	f381 8811 	msr	BASEPRI, r1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	4845      	ldr	r0, [pc, #276]	; (8005320 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800520a:	f7ff fb2c 	bl	8004866 <_PreparePacket>
 800520e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005218:	4b42      	ldr	r3, [pc, #264]	; (8005324 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
 800521e:	e00b      	b.n	8005238 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	62f9      	str	r1, [r7, #44]	; 0x2c
 800522a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	09db      	lsrs	r3, r3, #7
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	2b7f      	cmp	r3, #127	; 0x7f
 800523c:	d8f0      	bhi.n	8005220 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
 8005252:	4b34      	ldr	r3, [pc, #208]	; (8005324 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	e00b      	b.n	8005272 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	1c59      	adds	r1, r3, #1
 8005262:	6279      	str	r1, [r7, #36]	; 0x24
 8005264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	09db      	lsrs	r3, r3, #7
 8005270:	623b      	str	r3, [r7, #32]
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	2b7f      	cmp	r3, #127	; 0x7f
 8005276:	d8f0      	bhi.n	800525a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	627a      	str	r2, [r7, #36]	; 0x24
 800527e:	6a3a      	ldr	r2, [r7, #32]
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e00b      	b.n	80052ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	61f9      	str	r1, [r7, #28]
 800529e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	09db      	lsrs	r3, r3, #7
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b7f      	cmp	r3, #127	; 0x7f
 80052b0:	d8f0      	bhi.n	8005294 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	61fa      	str	r2, [r7, #28]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	e00b      	b.n	80052e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	6179      	str	r1, [r7, #20]
 80052d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	09db      	lsrs	r3, r3, #7
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b7f      	cmp	r3, #127	; 0x7f
 80052e8:	d8f0      	bhi.n	80052cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	617a      	str	r2, [r7, #20]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052fa:	2218      	movs	r2, #24
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	68b8      	ldr	r0, [r7, #8]
 8005300:	f7ff fba2 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005312:	4b04      	ldr	r3, [pc, #16]	; (8005324 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	4798      	blx	r3
  }
}
 8005318:	bf00      	nop
 800531a:	3730      	adds	r7, #48	; 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	2001439c 	.word	0x2001439c
 8005324:	2001436c 	.word	0x2001436c

08005328 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b092      	sub	sp, #72	; 0x48
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
 8005334:	f04f 0120 	mov.w	r1, #32
 8005338:	f381 8811 	msr	BASEPRI, r1
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	486a      	ldr	r0, [pc, #424]	; (80054e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005340:	f7ff fa91 	bl	8004866 <_PreparePacket>
 8005344:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	647b      	str	r3, [r7, #68]	; 0x44
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b66      	ldr	r3, [pc, #408]	; (80054ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	643b      	str	r3, [r7, #64]	; 0x40
 800535a:	e00b      	b.n	8005374 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535e:	b2da      	uxtb	r2, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	6479      	str	r1, [r7, #68]	; 0x44
 8005366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005370:	09db      	lsrs	r3, r3, #7
 8005372:	643b      	str	r3, [r7, #64]	; 0x40
 8005374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005376:	2b7f      	cmp	r3, #127	; 0x7f
 8005378:	d8f0      	bhi.n	800535c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800537a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	647a      	str	r2, [r7, #68]	; 0x44
 8005380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
 8005394:	e00b      	b.n	80053ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539c:	1c59      	adds	r1, r3, #1
 800539e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80053a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	09db      	lsrs	r3, r3, #7
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	2b7f      	cmp	r3, #127	; 0x7f
 80053b2:	d8f0      	bhi.n	8005396 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	4619      	mov	r1, r3
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff f9fd 	bl	80047cc <_EncodeStr>
 80053d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053d4:	2209      	movs	r2, #9
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6938      	ldr	r0, [r7, #16]
 80053da:	f7ff fb35 	bl	8004a48 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b40      	ldr	r3, [pc, #256]	; (80054ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	633b      	str	r3, [r7, #48]	; 0x30
 80053f2:	e00b      	b.n	800540c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	6379      	str	r1, [r7, #52]	; 0x34
 80053fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	09db      	lsrs	r3, r3, #7
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2b7f      	cmp	r3, #127	; 0x7f
 8005410:	d8f0      	bhi.n	80053f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	637a      	str	r2, [r7, #52]	; 0x34
 8005418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
 800542c:	e00b      	b.n	8005446 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	b2da      	uxtb	r2, r3
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	1c59      	adds	r1, r3, #1
 8005436:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	09db      	lsrs	r3, r3, #7
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2b7f      	cmp	r3, #127	; 0x7f
 800544a:	d8f0      	bhi.n	800542e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	e00b      	b.n	8005480 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	1c59      	adds	r1, r3, #1
 8005470:	6279      	str	r1, [r7, #36]	; 0x24
 8005472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	623b      	str	r3, [r7, #32]
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d8f0      	bhi.n	8005468 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	627a      	str	r2, [r7, #36]	; 0x24
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e00b      	b.n	80054b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	61f9      	str	r1, [r7, #28]
 80054aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b7f      	cmp	r3, #127	; 0x7f
 80054bc:	d8f0      	bhi.n	80054a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	61fa      	str	r2, [r7, #28]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054ce:	2215      	movs	r2, #21
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	6938      	ldr	r0, [r7, #16]
 80054d4:	f7ff fab8 	bl	8004a48 <_SendPacket>
  RECORD_END();
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f383 8811 	msr	BASEPRI, r3
}
 80054de:	bf00      	nop
 80054e0:	3748      	adds	r7, #72	; 0x48
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	2001439c 	.word	0x2001439c
 80054ec:	2001436c 	.word	0x2001436c

080054f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054f4:	4b07      	ldr	r3, [pc, #28]	; (8005514 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005506:	4b03      	ldr	r3, [pc, #12]	; (8005514 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4798      	blx	r3
  }
}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	2001436c 	.word	0x2001436c

08005518 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005520:	f3ef 8311 	mrs	r3, BASEPRI
 8005524:	f04f 0120 	mov.w	r1, #32
 8005528:	f381 8811 	msr	BASEPRI, r1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	480b      	ldr	r0, [pc, #44]	; (800555c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005530:	f7ff f999 	bl	8004866 <_PreparePacket>
 8005534:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005536:	2280      	movs	r2, #128	; 0x80
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	6938      	ldr	r0, [r7, #16]
 800553c:	f7ff f946 	bl	80047cc <_EncodeStr>
 8005540:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005542:	220e      	movs	r2, #14
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f7ff fa7e 	bl	8004a48 <_SendPacket>
  RECORD_END();
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f383 8811 	msr	BASEPRI, r3
}
 8005552:	bf00      	nop
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	2001439c 	.word	0x2001439c

08005560 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01a      	beq.n	80055a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d015      	beq.n	80055a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4798      	blx	r3
 8005580:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005584:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	000a      	movs	r2, r1
 8005594:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005596:	4613      	mov	r3, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4621      	mov	r1, r4
 800559c:	200d      	movs	r0, #13
 800559e:	f7ff fbe7 	bl	8004d70 <SEGGER_SYSVIEW_RecordU32x2>
 80055a2:	e006      	b.n	80055b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4619      	mov	r1, r3
 80055aa:	200c      	movs	r0, #12
 80055ac:	f7ff fba4 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd90      	pop	{r4, r7, pc}
 80055ba:	bf00      	nop
 80055bc:	2001436c 	.word	0x2001436c
 80055c0:	e0001004 	.word	0xe0001004

080055c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055ca:	f3ef 8311 	mrs	r3, BASEPRI
 80055ce:	f04f 0120 	mov.w	r1, #32
 80055d2:	f381 8811 	msr	BASEPRI, r1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	4819      	ldr	r0, [pc, #100]	; (8005640 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80055da:	f7ff f944 	bl	8004866 <_PreparePacket>
 80055de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80055e4:	4b17      	ldr	r3, [pc, #92]	; (8005644 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	e00b      	b.n	8005610 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	6179      	str	r1, [r7, #20]
 8005602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	09db      	lsrs	r3, r3, #7
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b7f      	cmp	r3, #127	; 0x7f
 8005614:	d8f0      	bhi.n	80055f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	617a      	str	r2, [r7, #20]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005626:	2202      	movs	r2, #2
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f7ff fa0c 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f383 8811 	msr	BASEPRI, r3
}
 8005636:	bf00      	nop
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	2001439c 	.word	0x2001439c
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800564e:	f3ef 8311 	mrs	r3, BASEPRI
 8005652:	f04f 0120 	mov.w	r1, #32
 8005656:	f381 8811 	msr	BASEPRI, r1
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	4807      	ldr	r0, [pc, #28]	; (800567c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800565e:	f7ff f902 	bl	8004866 <_PreparePacket>
 8005662:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005664:	2203      	movs	r2, #3
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6838      	ldr	r0, [r7, #0]
 800566a:	f7ff f9ed 	bl	8004a48 <_SendPacket>
  RECORD_END();
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f383 8811 	msr	BASEPRI, r3
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2001439c 	.word	0x2001439c

08005680 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005686:	f3ef 8311 	mrs	r3, BASEPRI
 800568a:	f04f 0120 	mov.w	r1, #32
 800568e:	f381 8811 	msr	BASEPRI, r1
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	4807      	ldr	r0, [pc, #28]	; (80056b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005696:	f7ff f8e6 	bl	8004866 <_PreparePacket>
 800569a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800569c:	2212      	movs	r2, #18
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6838      	ldr	r0, [r7, #0]
 80056a2:	f7ff f9d1 	bl	8004a48 <_SendPacket>
  RECORD_END();
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f383 8811 	msr	BASEPRI, r3
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	2001439c 	.word	0x2001439c

080056b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056be:	f3ef 8311 	mrs	r3, BASEPRI
 80056c2:	f04f 0120 	mov.w	r1, #32
 80056c6:	f381 8811 	msr	BASEPRI, r1
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	4807      	ldr	r0, [pc, #28]	; (80056ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056ce:	f7ff f8ca 	bl	8004866 <_PreparePacket>
 80056d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056d4:	2211      	movs	r2, #17
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	6838      	ldr	r0, [r7, #0]
 80056da:	f7ff f9b5 	bl	8004a48 <_SendPacket>
  RECORD_END();
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f383 8811 	msr	BASEPRI, r3
}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	2001439c 	.word	0x2001439c

080056f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056f8:	f3ef 8311 	mrs	r3, BASEPRI
 80056fc:	f04f 0120 	mov.w	r1, #32
 8005700:	f381 8811 	msr	BASEPRI, r1
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	4819      	ldr	r0, [pc, #100]	; (800576c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005708:	f7ff f8ad 	bl	8004866 <_PreparePacket>
 800570c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e00b      	b.n	800573e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	61f9      	str	r1, [r7, #28]
 8005730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	09db      	lsrs	r3, r3, #7
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b7f      	cmp	r3, #127	; 0x7f
 8005742:	d8f0      	bhi.n	8005726 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	61fa      	str	r2, [r7, #28]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005754:	2208      	movs	r2, #8
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	6938      	ldr	r0, [r7, #16]
 800575a:	f7ff f975 	bl	8004a48 <_SendPacket>
  RECORD_END();
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f383 8811 	msr	BASEPRI, r3
}
 8005764:	bf00      	nop
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	2001439c 	.word	0x2001439c
 8005770:	2001436c 	.word	0x2001436c

08005774 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800577c:	f3ef 8311 	mrs	r3, BASEPRI
 8005780:	f04f 0120 	mov.w	r1, #32
 8005784:	f381 8811 	msr	BASEPRI, r1
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	4819      	ldr	r0, [pc, #100]	; (80057f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800578c:	f7ff f86b 	bl	8004866 <_PreparePacket>
 8005790:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e00b      	b.n	80057c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	1c59      	adds	r1, r3, #1
 80057b2:	61f9      	str	r1, [r7, #28]
 80057b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	09db      	lsrs	r3, r3, #7
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b7f      	cmp	r3, #127	; 0x7f
 80057c6:	d8f0      	bhi.n	80057aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	61fa      	str	r2, [r7, #28]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80057d8:	2204      	movs	r2, #4
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f7ff f933 	bl	8004a48 <_SendPacket>
  RECORD_END();
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f383 8811 	msr	BASEPRI, r3
}
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2001439c 	.word	0x2001439c
 80057f4:	2001436c 	.word	0x2001436c

080057f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005800:	f3ef 8311 	mrs	r3, BASEPRI
 8005804:	f04f 0120 	mov.w	r1, #32
 8005808:	f381 8811 	msr	BASEPRI, r1
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	4819      	ldr	r0, [pc, #100]	; (8005874 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005810:	f7ff f829 	bl	8004866 <_PreparePacket>
 8005814:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800581a:	4b17      	ldr	r3, [pc, #92]	; (8005878 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e00b      	b.n	8005846 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	1c59      	adds	r1, r3, #1
 8005836:	61f9      	str	r1, [r7, #28]
 8005838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	09db      	lsrs	r3, r3, #7
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b7f      	cmp	r3, #127	; 0x7f
 800584a:	d8f0      	bhi.n	800582e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	61fa      	str	r2, [r7, #28]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800585c:	2206      	movs	r2, #6
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	6938      	ldr	r0, [r7, #16]
 8005862:	f7ff f8f1 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f383 8811 	msr	BASEPRI, r3
}
 800586c:	bf00      	nop
 800586e:	3720      	adds	r7, #32
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	2001439c 	.word	0x2001439c
 8005878:	2001436c 	.word	0x2001436c

0800587c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005886:	f3ef 8311 	mrs	r3, BASEPRI
 800588a:	f04f 0120 	mov.w	r1, #32
 800588e:	f381 8811 	msr	BASEPRI, r1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	4827      	ldr	r0, [pc, #156]	; (8005934 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005896:	f7fe ffe6 	bl	8004866 <_PreparePacket>
 800589a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058a0:	4b25      	ldr	r3, [pc, #148]	; (8005938 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	e00b      	b.n	80058cc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	6279      	str	r1, [r7, #36]	; 0x24
 80058be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	2b7f      	cmp	r3, #127	; 0x7f
 80058d0:	d8f0      	bhi.n	80058b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	627a      	str	r2, [r7, #36]	; 0x24
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e00b      	b.n	8005904 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	61f9      	str	r1, [r7, #28]
 80058f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b7f      	cmp	r3, #127	; 0x7f
 8005908:	d8f0      	bhi.n	80058ec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	61fa      	str	r2, [r7, #28]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800591a:	2207      	movs	r2, #7
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	6938      	ldr	r0, [r7, #16]
 8005920:	f7ff f892 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f383 8811 	msr	BASEPRI, r3
}
 800592a:	bf00      	nop
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2001439c 	.word	0x2001439c
 8005938:	2001436c 	.word	0x2001436c

0800593c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	1ad3      	subs	r3, r2, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	2001436c 	.word	0x2001436c

0800595c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	; 0x30
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005966:	4b3b      	ldr	r3, [pc, #236]	; (8005a54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d06d      	beq.n	8005a4a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005974:	2300      	movs	r3, #0
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
 8005978:	e008      	b.n	800598c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	3301      	adds	r3, #1
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005990:	429a      	cmp	r2, r3
 8005992:	d3f2      	bcc.n	800597a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005994:	e000      	b.n	8005998 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005996:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d055      	beq.n	8005a4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800599e:	f3ef 8311 	mrs	r3, BASEPRI
 80059a2:	f04f 0120 	mov.w	r1, #32
 80059a6:	f381 8811 	msr	BASEPRI, r1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	482a      	ldr	r0, [pc, #168]	; (8005a58 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80059ae:	f7fe ff5a 	bl	8004866 <_PreparePacket>
 80059b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	623b      	str	r3, [r7, #32]
 80059c0:	e00b      	b.n	80059da <SEGGER_SYSVIEW_SendModule+0x7e>
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	1c59      	adds	r1, r3, #1
 80059ca:	6279      	str	r1, [r7, #36]	; 0x24
 80059cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	09db      	lsrs	r3, r3, #7
 80059d8:	623b      	str	r3, [r7, #32]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	2b7f      	cmp	r3, #127	; 0x7f
 80059de:	d8f0      	bhi.n	80059c2 <SEGGER_SYSVIEW_SendModule+0x66>
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	627a      	str	r2, [r7, #36]	; 0x24
 80059e6:	6a3a      	ldr	r2, [r7, #32]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	e00b      	b.n	8005a14 <SEGGER_SYSVIEW_SendModule+0xb8>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	61f9      	str	r1, [r7, #28]
 8005a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b7f      	cmp	r3, #127	; 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <SEGGER_SYSVIEW_SendModule+0xa0>
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	61fa      	str	r2, [r7, #28]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2280      	movs	r2, #128	; 0x80
 8005a30:	4619      	mov	r1, r3
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7fe feca 	bl	80047cc <_EncodeStr>
 8005a38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a3a:	2216      	movs	r2, #22
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	6938      	ldr	r0, [r7, #16]
 8005a40:	f7ff f802 	bl	8004a48 <_SendPacket>
      RECORD_END();
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	3730      	adds	r7, #48	; 0x30
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20014394 	.word	0x20014394
 8005a58:	2001439c 	.word	0x2001439c

08005a5c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a62:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a6a:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f2      	bne.n	8005a70 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20014394 	.word	0x20014394

08005a98 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa2:	f04f 0120 	mov.w	r1, #32
 8005aa6:	f381 8811 	msr	BASEPRI, r1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	4817      	ldr	r0, [pc, #92]	; (8005b0c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005aae:	f7fe feda 	bl	8004866 <_PreparePacket>
 8005ab2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e00b      	b.n	8005adc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1c59      	adds	r1, r3, #1
 8005acc:	6179      	str	r1, [r7, #20]
 8005ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	09db      	lsrs	r3, r3, #7
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae0:	d8f0      	bhi.n	8005ac4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	617a      	str	r2, [r7, #20]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005af2:	221b      	movs	r2, #27
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	f7fe ffa6 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f383 8811 	msr	BASEPRI, r3
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2001439c 	.word	0x2001439c
 8005b10:	20014398 	.word	0x20014398

08005b14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b20:	f04f 0120 	mov.w	r1, #32
 8005b24:	f381 8811 	msr	BASEPRI, r1
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	4827      	ldr	r0, [pc, #156]	; (8005bc8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005b2c:	f7fe fe9b 	bl	8004866 <_PreparePacket>
 8005b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	6938      	ldr	r0, [r7, #16]
 8005b38:	f7fe fe48 	bl	80047cc <_EncodeStr>
 8005b3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	2301      	movs	r3, #1
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	e00b      	b.n	8005b60 <SEGGER_SYSVIEW_Warn+0x4c>
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	1c59      	adds	r1, r3, #1
 8005b50:	6279      	str	r1, [r7, #36]	; 0x24
 8005b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	09db      	lsrs	r3, r3, #7
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2b7f      	cmp	r3, #127	; 0x7f
 8005b64:	d8f0      	bhi.n	8005b48 <SEGGER_SYSVIEW_Warn+0x34>
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b6c:	6a3a      	ldr	r2, [r7, #32]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e00b      	b.n	8005b98 <SEGGER_SYSVIEW_Warn+0x84>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	61f9      	str	r1, [r7, #28]
 8005b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	09db      	lsrs	r3, r3, #7
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9c:	d8f0      	bhi.n	8005b80 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	61fa      	str	r2, [r7, #28]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005bae:	221a      	movs	r2, #26
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	6938      	ldr	r0, [r7, #16]
 8005bb4:	f7fe ff48 	bl	8004a48 <_SendPacket>
  RECORD_END();
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2001439c 	.word	0x2001439c

08005bcc <__libc_init_array>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4d0d      	ldr	r5, [pc, #52]	; (8005c04 <__libc_init_array+0x38>)
 8005bd0:	4c0d      	ldr	r4, [pc, #52]	; (8005c08 <__libc_init_array+0x3c>)
 8005bd2:	1b64      	subs	r4, r4, r5
 8005bd4:	10a4      	asrs	r4, r4, #2
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	42a6      	cmp	r6, r4
 8005bda:	d109      	bne.n	8005bf0 <__libc_init_array+0x24>
 8005bdc:	4d0b      	ldr	r5, [pc, #44]	; (8005c0c <__libc_init_array+0x40>)
 8005bde:	4c0c      	ldr	r4, [pc, #48]	; (8005c10 <__libc_init_array+0x44>)
 8005be0:	f001 fa1e 	bl	8007020 <_init>
 8005be4:	1b64      	subs	r4, r4, r5
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	2600      	movs	r6, #0
 8005bea:	42a6      	cmp	r6, r4
 8005bec:	d105      	bne.n	8005bfa <__libc_init_array+0x2e>
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf4:	4798      	blx	r3
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7ee      	b.n	8005bd8 <__libc_init_array+0xc>
 8005bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfe:	4798      	blx	r3
 8005c00:	3601      	adds	r6, #1
 8005c02:	e7f2      	b.n	8005bea <__libc_init_array+0x1e>
 8005c04:	08007250 	.word	0x08007250
 8005c08:	08007250 	.word	0x08007250
 8005c0c:	08007250 	.word	0x08007250
 8005c10:	08007254 	.word	0x08007254

08005c14 <memcmp>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	3901      	subs	r1, #1
 8005c18:	4402      	add	r2, r0
 8005c1a:	4290      	cmp	r0, r2
 8005c1c:	d101      	bne.n	8005c22 <memcmp+0xe>
 8005c1e:	2000      	movs	r0, #0
 8005c20:	e005      	b.n	8005c2e <memcmp+0x1a>
 8005c22:	7803      	ldrb	r3, [r0, #0]
 8005c24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d001      	beq.n	8005c30 <memcmp+0x1c>
 8005c2c:	1b18      	subs	r0, r3, r4
 8005c2e:	bd10      	pop	{r4, pc}
 8005c30:	3001      	adds	r0, #1
 8005c32:	e7f2      	b.n	8005c1a <memcmp+0x6>

08005c34 <memcpy>:
 8005c34:	440a      	add	r2, r1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c3c:	d100      	bne.n	8005c40 <memcpy+0xc>
 8005c3e:	4770      	bx	lr
 8005c40:	b510      	push	{r4, lr}
 8005c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4a:	4291      	cmp	r1, r2
 8005c4c:	d1f9      	bne.n	8005c42 <memcpy+0xe>
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <memset>:
 8005c50:	4402      	add	r2, r0
 8005c52:	4603      	mov	r3, r0
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d100      	bne.n	8005c5a <memset+0xa>
 8005c58:	4770      	bx	lr
 8005c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5e:	e7f9      	b.n	8005c54 <memset+0x4>

08005c60 <iprintf>:
 8005c60:	b40f      	push	{r0, r1, r2, r3}
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <iprintf+0x2c>)
 8005c64:	b513      	push	{r0, r1, r4, lr}
 8005c66:	681c      	ldr	r4, [r3, #0]
 8005c68:	b124      	cbz	r4, 8005c74 <iprintf+0x14>
 8005c6a:	69a3      	ldr	r3, [r4, #24]
 8005c6c:	b913      	cbnz	r3, 8005c74 <iprintf+0x14>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 fa7e 	bl	8006170 <__sinit>
 8005c74:	ab05      	add	r3, sp, #20
 8005c76:	9a04      	ldr	r2, [sp, #16]
 8005c78:	68a1      	ldr	r1, [r4, #8]
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 fde3 	bl	8006848 <_vfiprintf_r>
 8005c82:	b002      	add	sp, #8
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c88:	b004      	add	sp, #16
 8005c8a:	4770      	bx	lr
 8005c8c:	20000014 	.word	0x20000014

08005c90 <_puts_r>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	460e      	mov	r6, r1
 8005c94:	4605      	mov	r5, r0
 8005c96:	b118      	cbz	r0, 8005ca0 <_puts_r+0x10>
 8005c98:	6983      	ldr	r3, [r0, #24]
 8005c9a:	b90b      	cbnz	r3, 8005ca0 <_puts_r+0x10>
 8005c9c:	f000 fa68 	bl	8006170 <__sinit>
 8005ca0:	69ab      	ldr	r3, [r5, #24]
 8005ca2:	68ac      	ldr	r4, [r5, #8]
 8005ca4:	b913      	cbnz	r3, 8005cac <_puts_r+0x1c>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fa62 	bl	8006170 <__sinit>
 8005cac:	4b2c      	ldr	r3, [pc, #176]	; (8005d60 <_puts_r+0xd0>)
 8005cae:	429c      	cmp	r4, r3
 8005cb0:	d120      	bne.n	8005cf4 <_puts_r+0x64>
 8005cb2:	686c      	ldr	r4, [r5, #4]
 8005cb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb6:	07db      	lsls	r3, r3, #31
 8005cb8:	d405      	bmi.n	8005cc6 <_puts_r+0x36>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	0598      	lsls	r0, r3, #22
 8005cbe:	d402      	bmi.n	8005cc6 <_puts_r+0x36>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc2:	f000 faf3 	bl	80062ac <__retarget_lock_acquire_recursive>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	0719      	lsls	r1, r3, #28
 8005cca:	d51d      	bpl.n	8005d08 <_puts_r+0x78>
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	b1db      	cbz	r3, 8005d08 <_puts_r+0x78>
 8005cd0:	3e01      	subs	r6, #1
 8005cd2:	68a3      	ldr	r3, [r4, #8]
 8005cd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	60a3      	str	r3, [r4, #8]
 8005cdc:	bb39      	cbnz	r1, 8005d2e <_puts_r+0x9e>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	da38      	bge.n	8005d54 <_puts_r+0xc4>
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	210a      	movs	r1, #10
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 f868 	bl	8005dbc <__swbuf_r>
 8005cec:	3001      	adds	r0, #1
 8005cee:	d011      	beq.n	8005d14 <_puts_r+0x84>
 8005cf0:	250a      	movs	r5, #10
 8005cf2:	e011      	b.n	8005d18 <_puts_r+0x88>
 8005cf4:	4b1b      	ldr	r3, [pc, #108]	; (8005d64 <_puts_r+0xd4>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d101      	bne.n	8005cfe <_puts_r+0x6e>
 8005cfa:	68ac      	ldr	r4, [r5, #8]
 8005cfc:	e7da      	b.n	8005cb4 <_puts_r+0x24>
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <_puts_r+0xd8>)
 8005d00:	429c      	cmp	r4, r3
 8005d02:	bf08      	it	eq
 8005d04:	68ec      	ldreq	r4, [r5, #12]
 8005d06:	e7d5      	b.n	8005cb4 <_puts_r+0x24>
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 f8a8 	bl	8005e60 <__swsetup_r>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d0dd      	beq.n	8005cd0 <_puts_r+0x40>
 8005d14:	f04f 35ff 	mov.w	r5, #4294967295
 8005d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d405      	bmi.n	8005d2a <_puts_r+0x9a>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	059b      	lsls	r3, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_puts_r+0x9a>
 8005d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d26:	f000 fac2 	bl	80062ae <__retarget_lock_release_recursive>
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da04      	bge.n	8005d3c <_puts_r+0xac>
 8005d32:	69a2      	ldr	r2, [r4, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	dc06      	bgt.n	8005d46 <_puts_r+0xb6>
 8005d38:	290a      	cmp	r1, #10
 8005d3a:	d004      	beq.n	8005d46 <_puts_r+0xb6>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	7019      	strb	r1, [r3, #0]
 8005d44:	e7c5      	b.n	8005cd2 <_puts_r+0x42>
 8005d46:	4622      	mov	r2, r4
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 f837 	bl	8005dbc <__swbuf_r>
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d1bf      	bne.n	8005cd2 <_puts_r+0x42>
 8005d52:	e7df      	b.n	8005d14 <_puts_r+0x84>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	250a      	movs	r5, #10
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	6022      	str	r2, [r4, #0]
 8005d5c:	701d      	strb	r5, [r3, #0]
 8005d5e:	e7db      	b.n	8005d18 <_puts_r+0x88>
 8005d60:	080071dc 	.word	0x080071dc
 8005d64:	080071fc 	.word	0x080071fc
 8005d68:	080071bc 	.word	0x080071bc

08005d6c <puts>:
 8005d6c:	4b02      	ldr	r3, [pc, #8]	; (8005d78 <puts+0xc>)
 8005d6e:	4601      	mov	r1, r0
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f7ff bf8d 	b.w	8005c90 <_puts_r>
 8005d76:	bf00      	nop
 8005d78:	20000014 	.word	0x20000014

08005d7c <siprintf>:
 8005d7c:	b40e      	push	{r1, r2, r3}
 8005d7e:	b500      	push	{lr}
 8005d80:	b09c      	sub	sp, #112	; 0x70
 8005d82:	ab1d      	add	r3, sp, #116	; 0x74
 8005d84:	9002      	str	r0, [sp, #8]
 8005d86:	9006      	str	r0, [sp, #24]
 8005d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d8c:	4809      	ldr	r0, [pc, #36]	; (8005db4 <siprintf+0x38>)
 8005d8e:	9107      	str	r1, [sp, #28]
 8005d90:	9104      	str	r1, [sp, #16]
 8005d92:	4909      	ldr	r1, [pc, #36]	; (8005db8 <siprintf+0x3c>)
 8005d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d98:	9105      	str	r1, [sp, #20]
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	a902      	add	r1, sp, #8
 8005da0:	f000 fc28 	bl	80065f4 <_svfiprintf_r>
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	b01c      	add	sp, #112	; 0x70
 8005dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005db0:	b003      	add	sp, #12
 8005db2:	4770      	bx	lr
 8005db4:	20000014 	.word	0x20000014
 8005db8:	ffff0208 	.word	0xffff0208

08005dbc <__swbuf_r>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	460e      	mov	r6, r1
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	b118      	cbz	r0, 8005dce <__swbuf_r+0x12>
 8005dc6:	6983      	ldr	r3, [r0, #24]
 8005dc8:	b90b      	cbnz	r3, 8005dce <__swbuf_r+0x12>
 8005dca:	f000 f9d1 	bl	8006170 <__sinit>
 8005dce:	4b21      	ldr	r3, [pc, #132]	; (8005e54 <__swbuf_r+0x98>)
 8005dd0:	429c      	cmp	r4, r3
 8005dd2:	d12b      	bne.n	8005e2c <__swbuf_r+0x70>
 8005dd4:	686c      	ldr	r4, [r5, #4]
 8005dd6:	69a3      	ldr	r3, [r4, #24]
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	071a      	lsls	r2, r3, #28
 8005dde:	d52f      	bpl.n	8005e40 <__swbuf_r+0x84>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	b36b      	cbz	r3, 8005e40 <__swbuf_r+0x84>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	1ac0      	subs	r0, r0, r3
 8005dea:	6963      	ldr	r3, [r4, #20]
 8005dec:	b2f6      	uxtb	r6, r6
 8005dee:	4283      	cmp	r3, r0
 8005df0:	4637      	mov	r7, r6
 8005df2:	dc04      	bgt.n	8005dfe <__swbuf_r+0x42>
 8005df4:	4621      	mov	r1, r4
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 f926 	bl	8006048 <_fflush_r>
 8005dfc:	bb30      	cbnz	r0, 8005e4c <__swbuf_r+0x90>
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	701e      	strb	r6, [r3, #0]
 8005e0c:	6963      	ldr	r3, [r4, #20]
 8005e0e:	3001      	adds	r0, #1
 8005e10:	4283      	cmp	r3, r0
 8005e12:	d004      	beq.n	8005e1e <__swbuf_r+0x62>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	07db      	lsls	r3, r3, #31
 8005e18:	d506      	bpl.n	8005e28 <__swbuf_r+0x6c>
 8005e1a:	2e0a      	cmp	r6, #10
 8005e1c:	d104      	bne.n	8005e28 <__swbuf_r+0x6c>
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 f911 	bl	8006048 <_fflush_r>
 8005e26:	b988      	cbnz	r0, 8005e4c <__swbuf_r+0x90>
 8005e28:	4638      	mov	r0, r7
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <__swbuf_r+0x9c>)
 8005e2e:	429c      	cmp	r4, r3
 8005e30:	d101      	bne.n	8005e36 <__swbuf_r+0x7a>
 8005e32:	68ac      	ldr	r4, [r5, #8]
 8005e34:	e7cf      	b.n	8005dd6 <__swbuf_r+0x1a>
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <__swbuf_r+0xa0>)
 8005e38:	429c      	cmp	r4, r3
 8005e3a:	bf08      	it	eq
 8005e3c:	68ec      	ldreq	r4, [r5, #12]
 8005e3e:	e7ca      	b.n	8005dd6 <__swbuf_r+0x1a>
 8005e40:	4621      	mov	r1, r4
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 f80c 	bl	8005e60 <__swsetup_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d0cb      	beq.n	8005de4 <__swbuf_r+0x28>
 8005e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e50:	e7ea      	b.n	8005e28 <__swbuf_r+0x6c>
 8005e52:	bf00      	nop
 8005e54:	080071dc 	.word	0x080071dc
 8005e58:	080071fc 	.word	0x080071fc
 8005e5c:	080071bc 	.word	0x080071bc

08005e60 <__swsetup_r>:
 8005e60:	4b32      	ldr	r3, [pc, #200]	; (8005f2c <__swsetup_r+0xcc>)
 8005e62:	b570      	push	{r4, r5, r6, lr}
 8005e64:	681d      	ldr	r5, [r3, #0]
 8005e66:	4606      	mov	r6, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	b125      	cbz	r5, 8005e76 <__swsetup_r+0x16>
 8005e6c:	69ab      	ldr	r3, [r5, #24]
 8005e6e:	b913      	cbnz	r3, 8005e76 <__swsetup_r+0x16>
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 f97d 	bl	8006170 <__sinit>
 8005e76:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <__swsetup_r+0xd0>)
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	d10f      	bne.n	8005e9c <__swsetup_r+0x3c>
 8005e7c:	686c      	ldr	r4, [r5, #4]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e84:	0719      	lsls	r1, r3, #28
 8005e86:	d42c      	bmi.n	8005ee2 <__swsetup_r+0x82>
 8005e88:	06dd      	lsls	r5, r3, #27
 8005e8a:	d411      	bmi.n	8005eb0 <__swsetup_r+0x50>
 8005e8c:	2309      	movs	r3, #9
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9a:	e03e      	b.n	8005f1a <__swsetup_r+0xba>
 8005e9c:	4b25      	ldr	r3, [pc, #148]	; (8005f34 <__swsetup_r+0xd4>)
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d101      	bne.n	8005ea6 <__swsetup_r+0x46>
 8005ea2:	68ac      	ldr	r4, [r5, #8]
 8005ea4:	e7eb      	b.n	8005e7e <__swsetup_r+0x1e>
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <__swsetup_r+0xd8>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	bf08      	it	eq
 8005eac:	68ec      	ldreq	r4, [r5, #12]
 8005eae:	e7e6      	b.n	8005e7e <__swsetup_r+0x1e>
 8005eb0:	0758      	lsls	r0, r3, #29
 8005eb2:	d512      	bpl.n	8005eda <__swsetup_r+0x7a>
 8005eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eb6:	b141      	cbz	r1, 8005eca <__swsetup_r+0x6a>
 8005eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	d002      	beq.n	8005ec6 <__swsetup_r+0x66>
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f000 fa5b 	bl	800637c <_free_r>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6063      	str	r3, [r4, #4]
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	f043 0308 	orr.w	r3, r3, #8
 8005ee0:	81a3      	strh	r3, [r4, #12]
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	b94b      	cbnz	r3, 8005efa <__swsetup_r+0x9a>
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef0:	d003      	beq.n	8005efa <__swsetup_r+0x9a>
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f000 fa01 	bl	80062fc <__smakebuf_r>
 8005efa:	89a0      	ldrh	r0, [r4, #12]
 8005efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f00:	f010 0301 	ands.w	r3, r0, #1
 8005f04:	d00a      	beq.n	8005f1c <__swsetup_r+0xbc>
 8005f06:	2300      	movs	r3, #0
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6963      	ldr	r3, [r4, #20]
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	61a3      	str	r3, [r4, #24]
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	b943      	cbnz	r3, 8005f26 <__swsetup_r+0xc6>
 8005f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f18:	d1ba      	bne.n	8005e90 <__swsetup_r+0x30>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	0781      	lsls	r1, r0, #30
 8005f1e:	bf58      	it	pl
 8005f20:	6963      	ldrpl	r3, [r4, #20]
 8005f22:	60a3      	str	r3, [r4, #8]
 8005f24:	e7f4      	b.n	8005f10 <__swsetup_r+0xb0>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e7f7      	b.n	8005f1a <__swsetup_r+0xba>
 8005f2a:	bf00      	nop
 8005f2c:	20000014 	.word	0x20000014
 8005f30:	080071dc 	.word	0x080071dc
 8005f34:	080071fc 	.word	0x080071fc
 8005f38:	080071bc 	.word	0x080071bc

08005f3c <__sflush_r>:
 8005f3c:	898a      	ldrh	r2, [r1, #12]
 8005f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f42:	4605      	mov	r5, r0
 8005f44:	0710      	lsls	r0, r2, #28
 8005f46:	460c      	mov	r4, r1
 8005f48:	d458      	bmi.n	8005ffc <__sflush_r+0xc0>
 8005f4a:	684b      	ldr	r3, [r1, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dc05      	bgt.n	8005f5c <__sflush_r+0x20>
 8005f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dc02      	bgt.n	8005f5c <__sflush_r+0x20>
 8005f56:	2000      	movs	r0, #0
 8005f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	d0f9      	beq.n	8005f56 <__sflush_r+0x1a>
 8005f62:	2300      	movs	r3, #0
 8005f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f68:	682f      	ldr	r7, [r5, #0]
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	d032      	beq.n	8005fd4 <__sflush_r+0x98>
 8005f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	075a      	lsls	r2, r3, #29
 8005f74:	d505      	bpl.n	8005f82 <__sflush_r+0x46>
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	1ac0      	subs	r0, r0, r3
 8005f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f7c:	b10b      	cbz	r3, 8005f82 <__sflush_r+0x46>
 8005f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f80:	1ac0      	subs	r0, r0, r3
 8005f82:	2300      	movs	r3, #0
 8005f84:	4602      	mov	r2, r0
 8005f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f88:	6a21      	ldr	r1, [r4, #32]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b0      	blx	r6
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	d106      	bne.n	8005fa2 <__sflush_r+0x66>
 8005f94:	6829      	ldr	r1, [r5, #0]
 8005f96:	291d      	cmp	r1, #29
 8005f98:	d82c      	bhi.n	8005ff4 <__sflush_r+0xb8>
 8005f9a:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <__sflush_r+0x108>)
 8005f9c:	40ca      	lsrs	r2, r1
 8005f9e:	07d6      	lsls	r6, r2, #31
 8005fa0:	d528      	bpl.n	8005ff4 <__sflush_r+0xb8>
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	6062      	str	r2, [r4, #4]
 8005fa6:	04d9      	lsls	r1, r3, #19
 8005fa8:	6922      	ldr	r2, [r4, #16]
 8005faa:	6022      	str	r2, [r4, #0]
 8005fac:	d504      	bpl.n	8005fb8 <__sflush_r+0x7c>
 8005fae:	1c42      	adds	r2, r0, #1
 8005fb0:	d101      	bne.n	8005fb6 <__sflush_r+0x7a>
 8005fb2:	682b      	ldr	r3, [r5, #0]
 8005fb4:	b903      	cbnz	r3, 8005fb8 <__sflush_r+0x7c>
 8005fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8005fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fba:	602f      	str	r7, [r5, #0]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d0ca      	beq.n	8005f56 <__sflush_r+0x1a>
 8005fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	d002      	beq.n	8005fce <__sflush_r+0x92>
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 f9d7 	bl	800637c <_free_r>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8005fd2:	e7c1      	b.n	8005f58 <__sflush_r+0x1c>
 8005fd4:	6a21      	ldr	r1, [r4, #32]
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b0      	blx	r6
 8005fdc:	1c41      	adds	r1, r0, #1
 8005fde:	d1c7      	bne.n	8005f70 <__sflush_r+0x34>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0c4      	beq.n	8005f70 <__sflush_r+0x34>
 8005fe6:	2b1d      	cmp	r3, #29
 8005fe8:	d001      	beq.n	8005fee <__sflush_r+0xb2>
 8005fea:	2b16      	cmp	r3, #22
 8005fec:	d101      	bne.n	8005ff2 <__sflush_r+0xb6>
 8005fee:	602f      	str	r7, [r5, #0]
 8005ff0:	e7b1      	b.n	8005f56 <__sflush_r+0x1a>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	e7ad      	b.n	8005f58 <__sflush_r+0x1c>
 8005ffc:	690f      	ldr	r7, [r1, #16]
 8005ffe:	2f00      	cmp	r7, #0
 8006000:	d0a9      	beq.n	8005f56 <__sflush_r+0x1a>
 8006002:	0793      	lsls	r3, r2, #30
 8006004:	680e      	ldr	r6, [r1, #0]
 8006006:	bf08      	it	eq
 8006008:	694b      	ldreq	r3, [r1, #20]
 800600a:	600f      	str	r7, [r1, #0]
 800600c:	bf18      	it	ne
 800600e:	2300      	movne	r3, #0
 8006010:	eba6 0807 	sub.w	r8, r6, r7
 8006014:	608b      	str	r3, [r1, #8]
 8006016:	f1b8 0f00 	cmp.w	r8, #0
 800601a:	dd9c      	ble.n	8005f56 <__sflush_r+0x1a>
 800601c:	6a21      	ldr	r1, [r4, #32]
 800601e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006020:	4643      	mov	r3, r8
 8006022:	463a      	mov	r2, r7
 8006024:	4628      	mov	r0, r5
 8006026:	47b0      	blx	r6
 8006028:	2800      	cmp	r0, #0
 800602a:	dc06      	bgt.n	800603a <__sflush_r+0xfe>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	e78e      	b.n	8005f58 <__sflush_r+0x1c>
 800603a:	4407      	add	r7, r0
 800603c:	eba8 0800 	sub.w	r8, r8, r0
 8006040:	e7e9      	b.n	8006016 <__sflush_r+0xda>
 8006042:	bf00      	nop
 8006044:	20400001 	.word	0x20400001

08006048 <_fflush_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	690b      	ldr	r3, [r1, #16]
 800604c:	4605      	mov	r5, r0
 800604e:	460c      	mov	r4, r1
 8006050:	b913      	cbnz	r3, 8006058 <_fflush_r+0x10>
 8006052:	2500      	movs	r5, #0
 8006054:	4628      	mov	r0, r5
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	b118      	cbz	r0, 8006062 <_fflush_r+0x1a>
 800605a:	6983      	ldr	r3, [r0, #24]
 800605c:	b90b      	cbnz	r3, 8006062 <_fflush_r+0x1a>
 800605e:	f000 f887 	bl	8006170 <__sinit>
 8006062:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <_fflush_r+0x6c>)
 8006064:	429c      	cmp	r4, r3
 8006066:	d11b      	bne.n	80060a0 <_fflush_r+0x58>
 8006068:	686c      	ldr	r4, [r5, #4]
 800606a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0ef      	beq.n	8006052 <_fflush_r+0xa>
 8006072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006074:	07d0      	lsls	r0, r2, #31
 8006076:	d404      	bmi.n	8006082 <_fflush_r+0x3a>
 8006078:	0599      	lsls	r1, r3, #22
 800607a:	d402      	bmi.n	8006082 <_fflush_r+0x3a>
 800607c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607e:	f000 f915 	bl	80062ac <__retarget_lock_acquire_recursive>
 8006082:	4628      	mov	r0, r5
 8006084:	4621      	mov	r1, r4
 8006086:	f7ff ff59 	bl	8005f3c <__sflush_r>
 800608a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800608c:	07da      	lsls	r2, r3, #31
 800608e:	4605      	mov	r5, r0
 8006090:	d4e0      	bmi.n	8006054 <_fflush_r+0xc>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	059b      	lsls	r3, r3, #22
 8006096:	d4dd      	bmi.n	8006054 <_fflush_r+0xc>
 8006098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800609a:	f000 f908 	bl	80062ae <__retarget_lock_release_recursive>
 800609e:	e7d9      	b.n	8006054 <_fflush_r+0xc>
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <_fflush_r+0x70>)
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d101      	bne.n	80060aa <_fflush_r+0x62>
 80060a6:	68ac      	ldr	r4, [r5, #8]
 80060a8:	e7df      	b.n	800606a <_fflush_r+0x22>
 80060aa:	4b04      	ldr	r3, [pc, #16]	; (80060bc <_fflush_r+0x74>)
 80060ac:	429c      	cmp	r4, r3
 80060ae:	bf08      	it	eq
 80060b0:	68ec      	ldreq	r4, [r5, #12]
 80060b2:	e7da      	b.n	800606a <_fflush_r+0x22>
 80060b4:	080071dc 	.word	0x080071dc
 80060b8:	080071fc 	.word	0x080071fc
 80060bc:	080071bc 	.word	0x080071bc

080060c0 <std>:
 80060c0:	2300      	movs	r3, #0
 80060c2:	b510      	push	{r4, lr}
 80060c4:	4604      	mov	r4, r0
 80060c6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ce:	6083      	str	r3, [r0, #8]
 80060d0:	8181      	strh	r1, [r0, #12]
 80060d2:	6643      	str	r3, [r0, #100]	; 0x64
 80060d4:	81c2      	strh	r2, [r0, #14]
 80060d6:	6183      	str	r3, [r0, #24]
 80060d8:	4619      	mov	r1, r3
 80060da:	2208      	movs	r2, #8
 80060dc:	305c      	adds	r0, #92	; 0x5c
 80060de:	f7ff fdb7 	bl	8005c50 <memset>
 80060e2:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <std+0x38>)
 80060e4:	6263      	str	r3, [r4, #36]	; 0x24
 80060e6:	4b05      	ldr	r3, [pc, #20]	; (80060fc <std+0x3c>)
 80060e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <std+0x40>)
 80060ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <std+0x44>)
 80060f0:	6224      	str	r4, [r4, #32]
 80060f2:	6323      	str	r3, [r4, #48]	; 0x30
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	bf00      	nop
 80060f8:	08006df1 	.word	0x08006df1
 80060fc:	08006e13 	.word	0x08006e13
 8006100:	08006e4b 	.word	0x08006e4b
 8006104:	08006e6f 	.word	0x08006e6f

08006108 <_cleanup_r>:
 8006108:	4901      	ldr	r1, [pc, #4]	; (8006110 <_cleanup_r+0x8>)
 800610a:	f000 b8af 	b.w	800626c <_fwalk_reent>
 800610e:	bf00      	nop
 8006110:	08006049 	.word	0x08006049

08006114 <__sfmoreglue>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	2268      	movs	r2, #104	; 0x68
 8006118:	1e4d      	subs	r5, r1, #1
 800611a:	4355      	muls	r5, r2
 800611c:	460e      	mov	r6, r1
 800611e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006122:	f000 f997 	bl	8006454 <_malloc_r>
 8006126:	4604      	mov	r4, r0
 8006128:	b140      	cbz	r0, 800613c <__sfmoreglue+0x28>
 800612a:	2100      	movs	r1, #0
 800612c:	e9c0 1600 	strd	r1, r6, [r0]
 8006130:	300c      	adds	r0, #12
 8006132:	60a0      	str	r0, [r4, #8]
 8006134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006138:	f7ff fd8a 	bl	8005c50 <memset>
 800613c:	4620      	mov	r0, r4
 800613e:	bd70      	pop	{r4, r5, r6, pc}

08006140 <__sfp_lock_acquire>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__sfp_lock_acquire+0x8>)
 8006142:	f000 b8b3 	b.w	80062ac <__retarget_lock_acquire_recursive>
 8006146:	bf00      	nop
 8006148:	20014480 	.word	0x20014480

0800614c <__sfp_lock_release>:
 800614c:	4801      	ldr	r0, [pc, #4]	; (8006154 <__sfp_lock_release+0x8>)
 800614e:	f000 b8ae 	b.w	80062ae <__retarget_lock_release_recursive>
 8006152:	bf00      	nop
 8006154:	20014480 	.word	0x20014480

08006158 <__sinit_lock_acquire>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__sinit_lock_acquire+0x8>)
 800615a:	f000 b8a7 	b.w	80062ac <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	20014481 	.word	0x20014481

08006164 <__sinit_lock_release>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__sinit_lock_release+0x8>)
 8006166:	f000 b8a2 	b.w	80062ae <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	20014481 	.word	0x20014481

08006170 <__sinit>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	f7ff fff0 	bl	8006158 <__sinit_lock_acquire>
 8006178:	69a3      	ldr	r3, [r4, #24]
 800617a:	b11b      	cbz	r3, 8006184 <__sinit+0x14>
 800617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006180:	f7ff bff0 	b.w	8006164 <__sinit_lock_release>
 8006184:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006188:	6523      	str	r3, [r4, #80]	; 0x50
 800618a:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <__sinit+0x68>)
 800618c:	4a13      	ldr	r2, [pc, #76]	; (80061dc <__sinit+0x6c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	62a2      	str	r2, [r4, #40]	; 0x28
 8006192:	42a3      	cmp	r3, r4
 8006194:	bf04      	itt	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	61a3      	streq	r3, [r4, #24]
 800619a:	4620      	mov	r0, r4
 800619c:	f000 f820 	bl	80061e0 <__sfp>
 80061a0:	6060      	str	r0, [r4, #4]
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f81c 	bl	80061e0 <__sfp>
 80061a8:	60a0      	str	r0, [r4, #8]
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 f818 	bl	80061e0 <__sfp>
 80061b0:	2200      	movs	r2, #0
 80061b2:	60e0      	str	r0, [r4, #12]
 80061b4:	2104      	movs	r1, #4
 80061b6:	6860      	ldr	r0, [r4, #4]
 80061b8:	f7ff ff82 	bl	80060c0 <std>
 80061bc:	68a0      	ldr	r0, [r4, #8]
 80061be:	2201      	movs	r2, #1
 80061c0:	2109      	movs	r1, #9
 80061c2:	f7ff ff7d 	bl	80060c0 <std>
 80061c6:	68e0      	ldr	r0, [r4, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	2112      	movs	r1, #18
 80061cc:	f7ff ff78 	bl	80060c0 <std>
 80061d0:	2301      	movs	r3, #1
 80061d2:	61a3      	str	r3, [r4, #24]
 80061d4:	e7d2      	b.n	800617c <__sinit+0xc>
 80061d6:	bf00      	nop
 80061d8:	080071b8 	.word	0x080071b8
 80061dc:	08006109 	.word	0x08006109

080061e0 <__sfp>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	4607      	mov	r7, r0
 80061e4:	f7ff ffac 	bl	8006140 <__sfp_lock_acquire>
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <__sfp+0x84>)
 80061ea:	681e      	ldr	r6, [r3, #0]
 80061ec:	69b3      	ldr	r3, [r6, #24]
 80061ee:	b913      	cbnz	r3, 80061f6 <__sfp+0x16>
 80061f0:	4630      	mov	r0, r6
 80061f2:	f7ff ffbd 	bl	8006170 <__sinit>
 80061f6:	3648      	adds	r6, #72	; 0x48
 80061f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	d503      	bpl.n	8006208 <__sfp+0x28>
 8006200:	6833      	ldr	r3, [r6, #0]
 8006202:	b30b      	cbz	r3, 8006248 <__sfp+0x68>
 8006204:	6836      	ldr	r6, [r6, #0]
 8006206:	e7f7      	b.n	80061f8 <__sfp+0x18>
 8006208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800620c:	b9d5      	cbnz	r5, 8006244 <__sfp+0x64>
 800620e:	4b16      	ldr	r3, [pc, #88]	; (8006268 <__sfp+0x88>)
 8006210:	60e3      	str	r3, [r4, #12]
 8006212:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006216:	6665      	str	r5, [r4, #100]	; 0x64
 8006218:	f000 f847 	bl	80062aa <__retarget_lock_init_recursive>
 800621c:	f7ff ff96 	bl	800614c <__sfp_lock_release>
 8006220:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006224:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006228:	6025      	str	r5, [r4, #0]
 800622a:	61a5      	str	r5, [r4, #24]
 800622c:	2208      	movs	r2, #8
 800622e:	4629      	mov	r1, r5
 8006230:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006234:	f7ff fd0c 	bl	8005c50 <memset>
 8006238:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800623c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006240:	4620      	mov	r0, r4
 8006242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006244:	3468      	adds	r4, #104	; 0x68
 8006246:	e7d9      	b.n	80061fc <__sfp+0x1c>
 8006248:	2104      	movs	r1, #4
 800624a:	4638      	mov	r0, r7
 800624c:	f7ff ff62 	bl	8006114 <__sfmoreglue>
 8006250:	4604      	mov	r4, r0
 8006252:	6030      	str	r0, [r6, #0]
 8006254:	2800      	cmp	r0, #0
 8006256:	d1d5      	bne.n	8006204 <__sfp+0x24>
 8006258:	f7ff ff78 	bl	800614c <__sfp_lock_release>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	e7ee      	b.n	8006240 <__sfp+0x60>
 8006262:	bf00      	nop
 8006264:	080071b8 	.word	0x080071b8
 8006268:	ffff0001 	.word	0xffff0001

0800626c <_fwalk_reent>:
 800626c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006270:	4606      	mov	r6, r0
 8006272:	4688      	mov	r8, r1
 8006274:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006278:	2700      	movs	r7, #0
 800627a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800627e:	f1b9 0901 	subs.w	r9, r9, #1
 8006282:	d505      	bpl.n	8006290 <_fwalk_reent+0x24>
 8006284:	6824      	ldr	r4, [r4, #0]
 8006286:	2c00      	cmp	r4, #0
 8006288:	d1f7      	bne.n	800627a <_fwalk_reent+0xe>
 800628a:	4638      	mov	r0, r7
 800628c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006290:	89ab      	ldrh	r3, [r5, #12]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d907      	bls.n	80062a6 <_fwalk_reent+0x3a>
 8006296:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800629a:	3301      	adds	r3, #1
 800629c:	d003      	beq.n	80062a6 <_fwalk_reent+0x3a>
 800629e:	4629      	mov	r1, r5
 80062a0:	4630      	mov	r0, r6
 80062a2:	47c0      	blx	r8
 80062a4:	4307      	orrs	r7, r0
 80062a6:	3568      	adds	r5, #104	; 0x68
 80062a8:	e7e9      	b.n	800627e <_fwalk_reent+0x12>

080062aa <__retarget_lock_init_recursive>:
 80062aa:	4770      	bx	lr

080062ac <__retarget_lock_acquire_recursive>:
 80062ac:	4770      	bx	lr

080062ae <__retarget_lock_release_recursive>:
 80062ae:	4770      	bx	lr

080062b0 <__swhatbuf_r>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	460e      	mov	r6, r1
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	2900      	cmp	r1, #0
 80062ba:	b096      	sub	sp, #88	; 0x58
 80062bc:	4614      	mov	r4, r2
 80062be:	461d      	mov	r5, r3
 80062c0:	da08      	bge.n	80062d4 <__swhatbuf_r+0x24>
 80062c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	602a      	str	r2, [r5, #0]
 80062ca:	061a      	lsls	r2, r3, #24
 80062cc:	d410      	bmi.n	80062f0 <__swhatbuf_r+0x40>
 80062ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d2:	e00e      	b.n	80062f2 <__swhatbuf_r+0x42>
 80062d4:	466a      	mov	r2, sp
 80062d6:	f000 fdf1 	bl	8006ebc <_fstat_r>
 80062da:	2800      	cmp	r0, #0
 80062dc:	dbf1      	blt.n	80062c2 <__swhatbuf_r+0x12>
 80062de:	9a01      	ldr	r2, [sp, #4]
 80062e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062e8:	425a      	negs	r2, r3
 80062ea:	415a      	adcs	r2, r3
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	e7ee      	b.n	80062ce <__swhatbuf_r+0x1e>
 80062f0:	2340      	movs	r3, #64	; 0x40
 80062f2:	2000      	movs	r0, #0
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	b016      	add	sp, #88	; 0x58
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080062fc <__smakebuf_r>:
 80062fc:	898b      	ldrh	r3, [r1, #12]
 80062fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006300:	079d      	lsls	r5, r3, #30
 8006302:	4606      	mov	r6, r0
 8006304:	460c      	mov	r4, r1
 8006306:	d507      	bpl.n	8006318 <__smakebuf_r+0x1c>
 8006308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	2301      	movs	r3, #1
 8006312:	6163      	str	r3, [r4, #20]
 8006314:	b002      	add	sp, #8
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	ab01      	add	r3, sp, #4
 800631a:	466a      	mov	r2, sp
 800631c:	f7ff ffc8 	bl	80062b0 <__swhatbuf_r>
 8006320:	9900      	ldr	r1, [sp, #0]
 8006322:	4605      	mov	r5, r0
 8006324:	4630      	mov	r0, r6
 8006326:	f000 f895 	bl	8006454 <_malloc_r>
 800632a:	b948      	cbnz	r0, 8006340 <__smakebuf_r+0x44>
 800632c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006330:	059a      	lsls	r2, r3, #22
 8006332:	d4ef      	bmi.n	8006314 <__smakebuf_r+0x18>
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	f043 0302 	orr.w	r3, r3, #2
 800633c:	81a3      	strh	r3, [r4, #12]
 800633e:	e7e3      	b.n	8006308 <__smakebuf_r+0xc>
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <__smakebuf_r+0x7c>)
 8006342:	62b3      	str	r3, [r6, #40]	; 0x28
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	6020      	str	r0, [r4, #0]
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	9b00      	ldr	r3, [sp, #0]
 8006350:	6163      	str	r3, [r4, #20]
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	6120      	str	r0, [r4, #16]
 8006356:	b15b      	cbz	r3, 8006370 <__smakebuf_r+0x74>
 8006358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 fdbf 	bl	8006ee0 <_isatty_r>
 8006362:	b128      	cbz	r0, 8006370 <__smakebuf_r+0x74>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	89a0      	ldrh	r0, [r4, #12]
 8006372:	4305      	orrs	r5, r0
 8006374:	81a5      	strh	r5, [r4, #12]
 8006376:	e7cd      	b.n	8006314 <__smakebuf_r+0x18>
 8006378:	08006109 	.word	0x08006109

0800637c <_free_r>:
 800637c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800637e:	2900      	cmp	r1, #0
 8006380:	d044      	beq.n	800640c <_free_r+0x90>
 8006382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006386:	9001      	str	r0, [sp, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f1a1 0404 	sub.w	r4, r1, #4
 800638e:	bfb8      	it	lt
 8006390:	18e4      	addlt	r4, r4, r3
 8006392:	f000 fde1 	bl	8006f58 <__malloc_lock>
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <_free_r+0x94>)
 8006398:	9801      	ldr	r0, [sp, #4]
 800639a:	6813      	ldr	r3, [r2, #0]
 800639c:	b933      	cbnz	r3, 80063ac <_free_r+0x30>
 800639e:	6063      	str	r3, [r4, #4]
 80063a0:	6014      	str	r4, [r2, #0]
 80063a2:	b003      	add	sp, #12
 80063a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063a8:	f000 bddc 	b.w	8006f64 <__malloc_unlock>
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d908      	bls.n	80063c2 <_free_r+0x46>
 80063b0:	6825      	ldr	r5, [r4, #0]
 80063b2:	1961      	adds	r1, r4, r5
 80063b4:	428b      	cmp	r3, r1
 80063b6:	bf01      	itttt	eq
 80063b8:	6819      	ldreq	r1, [r3, #0]
 80063ba:	685b      	ldreq	r3, [r3, #4]
 80063bc:	1949      	addeq	r1, r1, r5
 80063be:	6021      	streq	r1, [r4, #0]
 80063c0:	e7ed      	b.n	800639e <_free_r+0x22>
 80063c2:	461a      	mov	r2, r3
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b10b      	cbz	r3, 80063cc <_free_r+0x50>
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d9fa      	bls.n	80063c2 <_free_r+0x46>
 80063cc:	6811      	ldr	r1, [r2, #0]
 80063ce:	1855      	adds	r5, r2, r1
 80063d0:	42a5      	cmp	r5, r4
 80063d2:	d10b      	bne.n	80063ec <_free_r+0x70>
 80063d4:	6824      	ldr	r4, [r4, #0]
 80063d6:	4421      	add	r1, r4
 80063d8:	1854      	adds	r4, r2, r1
 80063da:	42a3      	cmp	r3, r4
 80063dc:	6011      	str	r1, [r2, #0]
 80063de:	d1e0      	bne.n	80063a2 <_free_r+0x26>
 80063e0:	681c      	ldr	r4, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	6053      	str	r3, [r2, #4]
 80063e6:	4421      	add	r1, r4
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	e7da      	b.n	80063a2 <_free_r+0x26>
 80063ec:	d902      	bls.n	80063f4 <_free_r+0x78>
 80063ee:	230c      	movs	r3, #12
 80063f0:	6003      	str	r3, [r0, #0]
 80063f2:	e7d6      	b.n	80063a2 <_free_r+0x26>
 80063f4:	6825      	ldr	r5, [r4, #0]
 80063f6:	1961      	adds	r1, r4, r5
 80063f8:	428b      	cmp	r3, r1
 80063fa:	bf04      	itt	eq
 80063fc:	6819      	ldreq	r1, [r3, #0]
 80063fe:	685b      	ldreq	r3, [r3, #4]
 8006400:	6063      	str	r3, [r4, #4]
 8006402:	bf04      	itt	eq
 8006404:	1949      	addeq	r1, r1, r5
 8006406:	6021      	streq	r1, [r4, #0]
 8006408:	6054      	str	r4, [r2, #4]
 800640a:	e7ca      	b.n	80063a2 <_free_r+0x26>
 800640c:	b003      	add	sp, #12
 800640e:	bd30      	pop	{r4, r5, pc}
 8006410:	20014484 	.word	0x20014484

08006414 <sbrk_aligned>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	4e0e      	ldr	r6, [pc, #56]	; (8006450 <sbrk_aligned+0x3c>)
 8006418:	460c      	mov	r4, r1
 800641a:	6831      	ldr	r1, [r6, #0]
 800641c:	4605      	mov	r5, r0
 800641e:	b911      	cbnz	r1, 8006426 <sbrk_aligned+0x12>
 8006420:	f000 fcd6 	bl	8006dd0 <_sbrk_r>
 8006424:	6030      	str	r0, [r6, #0]
 8006426:	4621      	mov	r1, r4
 8006428:	4628      	mov	r0, r5
 800642a:	f000 fcd1 	bl	8006dd0 <_sbrk_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d00a      	beq.n	8006448 <sbrk_aligned+0x34>
 8006432:	1cc4      	adds	r4, r0, #3
 8006434:	f024 0403 	bic.w	r4, r4, #3
 8006438:	42a0      	cmp	r0, r4
 800643a:	d007      	beq.n	800644c <sbrk_aligned+0x38>
 800643c:	1a21      	subs	r1, r4, r0
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fcc6 	bl	8006dd0 <_sbrk_r>
 8006444:	3001      	adds	r0, #1
 8006446:	d101      	bne.n	800644c <sbrk_aligned+0x38>
 8006448:	f04f 34ff 	mov.w	r4, #4294967295
 800644c:	4620      	mov	r0, r4
 800644e:	bd70      	pop	{r4, r5, r6, pc}
 8006450:	20014488 	.word	0x20014488

08006454 <_malloc_r>:
 8006454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006458:	1ccd      	adds	r5, r1, #3
 800645a:	f025 0503 	bic.w	r5, r5, #3
 800645e:	3508      	adds	r5, #8
 8006460:	2d0c      	cmp	r5, #12
 8006462:	bf38      	it	cc
 8006464:	250c      	movcc	r5, #12
 8006466:	2d00      	cmp	r5, #0
 8006468:	4607      	mov	r7, r0
 800646a:	db01      	blt.n	8006470 <_malloc_r+0x1c>
 800646c:	42a9      	cmp	r1, r5
 800646e:	d905      	bls.n	800647c <_malloc_r+0x28>
 8006470:	230c      	movs	r3, #12
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	2600      	movs	r6, #0
 8006476:	4630      	mov	r0, r6
 8006478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800647c:	4e2e      	ldr	r6, [pc, #184]	; (8006538 <_malloc_r+0xe4>)
 800647e:	f000 fd6b 	bl	8006f58 <__malloc_lock>
 8006482:	6833      	ldr	r3, [r6, #0]
 8006484:	461c      	mov	r4, r3
 8006486:	bb34      	cbnz	r4, 80064d6 <_malloc_r+0x82>
 8006488:	4629      	mov	r1, r5
 800648a:	4638      	mov	r0, r7
 800648c:	f7ff ffc2 	bl	8006414 <sbrk_aligned>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	4604      	mov	r4, r0
 8006494:	d14d      	bne.n	8006532 <_malloc_r+0xde>
 8006496:	6834      	ldr	r4, [r6, #0]
 8006498:	4626      	mov	r6, r4
 800649a:	2e00      	cmp	r6, #0
 800649c:	d140      	bne.n	8006520 <_malloc_r+0xcc>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	4631      	mov	r1, r6
 80064a2:	4638      	mov	r0, r7
 80064a4:	eb04 0803 	add.w	r8, r4, r3
 80064a8:	f000 fc92 	bl	8006dd0 <_sbrk_r>
 80064ac:	4580      	cmp	r8, r0
 80064ae:	d13a      	bne.n	8006526 <_malloc_r+0xd2>
 80064b0:	6821      	ldr	r1, [r4, #0]
 80064b2:	3503      	adds	r5, #3
 80064b4:	1a6d      	subs	r5, r5, r1
 80064b6:	f025 0503 	bic.w	r5, r5, #3
 80064ba:	3508      	adds	r5, #8
 80064bc:	2d0c      	cmp	r5, #12
 80064be:	bf38      	it	cc
 80064c0:	250c      	movcc	r5, #12
 80064c2:	4629      	mov	r1, r5
 80064c4:	4638      	mov	r0, r7
 80064c6:	f7ff ffa5 	bl	8006414 <sbrk_aligned>
 80064ca:	3001      	adds	r0, #1
 80064cc:	d02b      	beq.n	8006526 <_malloc_r+0xd2>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	442b      	add	r3, r5
 80064d2:	6023      	str	r3, [r4, #0]
 80064d4:	e00e      	b.n	80064f4 <_malloc_r+0xa0>
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	1b52      	subs	r2, r2, r5
 80064da:	d41e      	bmi.n	800651a <_malloc_r+0xc6>
 80064dc:	2a0b      	cmp	r2, #11
 80064de:	d916      	bls.n	800650e <_malloc_r+0xba>
 80064e0:	1961      	adds	r1, r4, r5
 80064e2:	42a3      	cmp	r3, r4
 80064e4:	6025      	str	r5, [r4, #0]
 80064e6:	bf18      	it	ne
 80064e8:	6059      	strne	r1, [r3, #4]
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	bf08      	it	eq
 80064ee:	6031      	streq	r1, [r6, #0]
 80064f0:	5162      	str	r2, [r4, r5]
 80064f2:	604b      	str	r3, [r1, #4]
 80064f4:	4638      	mov	r0, r7
 80064f6:	f104 060b 	add.w	r6, r4, #11
 80064fa:	f000 fd33 	bl	8006f64 <__malloc_unlock>
 80064fe:	f026 0607 	bic.w	r6, r6, #7
 8006502:	1d23      	adds	r3, r4, #4
 8006504:	1af2      	subs	r2, r6, r3
 8006506:	d0b6      	beq.n	8006476 <_malloc_r+0x22>
 8006508:	1b9b      	subs	r3, r3, r6
 800650a:	50a3      	str	r3, [r4, r2]
 800650c:	e7b3      	b.n	8006476 <_malloc_r+0x22>
 800650e:	6862      	ldr	r2, [r4, #4]
 8006510:	42a3      	cmp	r3, r4
 8006512:	bf0c      	ite	eq
 8006514:	6032      	streq	r2, [r6, #0]
 8006516:	605a      	strne	r2, [r3, #4]
 8006518:	e7ec      	b.n	80064f4 <_malloc_r+0xa0>
 800651a:	4623      	mov	r3, r4
 800651c:	6864      	ldr	r4, [r4, #4]
 800651e:	e7b2      	b.n	8006486 <_malloc_r+0x32>
 8006520:	4634      	mov	r4, r6
 8006522:	6876      	ldr	r6, [r6, #4]
 8006524:	e7b9      	b.n	800649a <_malloc_r+0x46>
 8006526:	230c      	movs	r3, #12
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4638      	mov	r0, r7
 800652c:	f000 fd1a 	bl	8006f64 <__malloc_unlock>
 8006530:	e7a1      	b.n	8006476 <_malloc_r+0x22>
 8006532:	6025      	str	r5, [r4, #0]
 8006534:	e7de      	b.n	80064f4 <_malloc_r+0xa0>
 8006536:	bf00      	nop
 8006538:	20014484 	.word	0x20014484

0800653c <__ssputs_r>:
 800653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	688e      	ldr	r6, [r1, #8]
 8006542:	429e      	cmp	r6, r3
 8006544:	4682      	mov	sl, r0
 8006546:	460c      	mov	r4, r1
 8006548:	4690      	mov	r8, r2
 800654a:	461f      	mov	r7, r3
 800654c:	d838      	bhi.n	80065c0 <__ssputs_r+0x84>
 800654e:	898a      	ldrh	r2, [r1, #12]
 8006550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006554:	d032      	beq.n	80065bc <__ssputs_r+0x80>
 8006556:	6825      	ldr	r5, [r4, #0]
 8006558:	6909      	ldr	r1, [r1, #16]
 800655a:	eba5 0901 	sub.w	r9, r5, r1
 800655e:	6965      	ldr	r5, [r4, #20]
 8006560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006568:	3301      	adds	r3, #1
 800656a:	444b      	add	r3, r9
 800656c:	106d      	asrs	r5, r5, #1
 800656e:	429d      	cmp	r5, r3
 8006570:	bf38      	it	cc
 8006572:	461d      	movcc	r5, r3
 8006574:	0553      	lsls	r3, r2, #21
 8006576:	d531      	bpl.n	80065dc <__ssputs_r+0xa0>
 8006578:	4629      	mov	r1, r5
 800657a:	f7ff ff6b 	bl	8006454 <_malloc_r>
 800657e:	4606      	mov	r6, r0
 8006580:	b950      	cbnz	r0, 8006598 <__ssputs_r+0x5c>
 8006582:	230c      	movs	r3, #12
 8006584:	f8ca 3000 	str.w	r3, [sl]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006598:	6921      	ldr	r1, [r4, #16]
 800659a:	464a      	mov	r2, r9
 800659c:	f7ff fb4a 	bl	8005c34 <memcpy>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	6126      	str	r6, [r4, #16]
 80065ae:	6165      	str	r5, [r4, #20]
 80065b0:	444e      	add	r6, r9
 80065b2:	eba5 0509 	sub.w	r5, r5, r9
 80065b6:	6026      	str	r6, [r4, #0]
 80065b8:	60a5      	str	r5, [r4, #8]
 80065ba:	463e      	mov	r6, r7
 80065bc:	42be      	cmp	r6, r7
 80065be:	d900      	bls.n	80065c2 <__ssputs_r+0x86>
 80065c0:	463e      	mov	r6, r7
 80065c2:	6820      	ldr	r0, [r4, #0]
 80065c4:	4632      	mov	r2, r6
 80065c6:	4641      	mov	r1, r8
 80065c8:	f000 fcac 	bl	8006f24 <memmove>
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	1b9b      	subs	r3, r3, r6
 80065d0:	60a3      	str	r3, [r4, #8]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	4433      	add	r3, r6
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	2000      	movs	r0, #0
 80065da:	e7db      	b.n	8006594 <__ssputs_r+0x58>
 80065dc:	462a      	mov	r2, r5
 80065de:	f000 fcc7 	bl	8006f70 <_realloc_r>
 80065e2:	4606      	mov	r6, r0
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d1e1      	bne.n	80065ac <__ssputs_r+0x70>
 80065e8:	6921      	ldr	r1, [r4, #16]
 80065ea:	4650      	mov	r0, sl
 80065ec:	f7ff fec6 	bl	800637c <_free_r>
 80065f0:	e7c7      	b.n	8006582 <__ssputs_r+0x46>
	...

080065f4 <_svfiprintf_r>:
 80065f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	4698      	mov	r8, r3
 80065fa:	898b      	ldrh	r3, [r1, #12]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	b09d      	sub	sp, #116	; 0x74
 8006600:	4607      	mov	r7, r0
 8006602:	460d      	mov	r5, r1
 8006604:	4614      	mov	r4, r2
 8006606:	d50e      	bpl.n	8006626 <_svfiprintf_r+0x32>
 8006608:	690b      	ldr	r3, [r1, #16]
 800660a:	b963      	cbnz	r3, 8006626 <_svfiprintf_r+0x32>
 800660c:	2140      	movs	r1, #64	; 0x40
 800660e:	f7ff ff21 	bl	8006454 <_malloc_r>
 8006612:	6028      	str	r0, [r5, #0]
 8006614:	6128      	str	r0, [r5, #16]
 8006616:	b920      	cbnz	r0, 8006622 <_svfiprintf_r+0x2e>
 8006618:	230c      	movs	r3, #12
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	e0d1      	b.n	80067c6 <_svfiprintf_r+0x1d2>
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	616b      	str	r3, [r5, #20]
 8006626:	2300      	movs	r3, #0
 8006628:	9309      	str	r3, [sp, #36]	; 0x24
 800662a:	2320      	movs	r3, #32
 800662c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006630:	f8cd 800c 	str.w	r8, [sp, #12]
 8006634:	2330      	movs	r3, #48	; 0x30
 8006636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067e0 <_svfiprintf_r+0x1ec>
 800663a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800663e:	f04f 0901 	mov.w	r9, #1
 8006642:	4623      	mov	r3, r4
 8006644:	469a      	mov	sl, r3
 8006646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800664a:	b10a      	cbz	r2, 8006650 <_svfiprintf_r+0x5c>
 800664c:	2a25      	cmp	r2, #37	; 0x25
 800664e:	d1f9      	bne.n	8006644 <_svfiprintf_r+0x50>
 8006650:	ebba 0b04 	subs.w	fp, sl, r4
 8006654:	d00b      	beq.n	800666e <_svfiprintf_r+0x7a>
 8006656:	465b      	mov	r3, fp
 8006658:	4622      	mov	r2, r4
 800665a:	4629      	mov	r1, r5
 800665c:	4638      	mov	r0, r7
 800665e:	f7ff ff6d 	bl	800653c <__ssputs_r>
 8006662:	3001      	adds	r0, #1
 8006664:	f000 80aa 	beq.w	80067bc <_svfiprintf_r+0x1c8>
 8006668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666a:	445a      	add	r2, fp
 800666c:	9209      	str	r2, [sp, #36]	; 0x24
 800666e:	f89a 3000 	ldrb.w	r3, [sl]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80a2 	beq.w	80067bc <_svfiprintf_r+0x1c8>
 8006678:	2300      	movs	r3, #0
 800667a:	f04f 32ff 	mov.w	r2, #4294967295
 800667e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006682:	f10a 0a01 	add.w	sl, sl, #1
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	9307      	str	r3, [sp, #28]
 800668a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800668e:	931a      	str	r3, [sp, #104]	; 0x68
 8006690:	4654      	mov	r4, sl
 8006692:	2205      	movs	r2, #5
 8006694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006698:	4851      	ldr	r0, [pc, #324]	; (80067e0 <_svfiprintf_r+0x1ec>)
 800669a:	f7f9 fde9 	bl	8000270 <memchr>
 800669e:	9a04      	ldr	r2, [sp, #16]
 80066a0:	b9d8      	cbnz	r0, 80066da <_svfiprintf_r+0xe6>
 80066a2:	06d0      	lsls	r0, r2, #27
 80066a4:	bf44      	itt	mi
 80066a6:	2320      	movmi	r3, #32
 80066a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066ac:	0711      	lsls	r1, r2, #28
 80066ae:	bf44      	itt	mi
 80066b0:	232b      	movmi	r3, #43	; 0x2b
 80066b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ba:	2b2a      	cmp	r3, #42	; 0x2a
 80066bc:	d015      	beq.n	80066ea <_svfiprintf_r+0xf6>
 80066be:	9a07      	ldr	r2, [sp, #28]
 80066c0:	4654      	mov	r4, sl
 80066c2:	2000      	movs	r0, #0
 80066c4:	f04f 0c0a 	mov.w	ip, #10
 80066c8:	4621      	mov	r1, r4
 80066ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ce:	3b30      	subs	r3, #48	; 0x30
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d94e      	bls.n	8006772 <_svfiprintf_r+0x17e>
 80066d4:	b1b0      	cbz	r0, 8006704 <_svfiprintf_r+0x110>
 80066d6:	9207      	str	r2, [sp, #28]
 80066d8:	e014      	b.n	8006704 <_svfiprintf_r+0x110>
 80066da:	eba0 0308 	sub.w	r3, r0, r8
 80066de:	fa09 f303 	lsl.w	r3, r9, r3
 80066e2:	4313      	orrs	r3, r2
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	46a2      	mov	sl, r4
 80066e8:	e7d2      	b.n	8006690 <_svfiprintf_r+0x9c>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	1d19      	adds	r1, r3, #4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	9103      	str	r1, [sp, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfbb      	ittet	lt
 80066f6:	425b      	neglt	r3, r3
 80066f8:	f042 0202 	orrlt.w	r2, r2, #2
 80066fc:	9307      	strge	r3, [sp, #28]
 80066fe:	9307      	strlt	r3, [sp, #28]
 8006700:	bfb8      	it	lt
 8006702:	9204      	strlt	r2, [sp, #16]
 8006704:	7823      	ldrb	r3, [r4, #0]
 8006706:	2b2e      	cmp	r3, #46	; 0x2e
 8006708:	d10c      	bne.n	8006724 <_svfiprintf_r+0x130>
 800670a:	7863      	ldrb	r3, [r4, #1]
 800670c:	2b2a      	cmp	r3, #42	; 0x2a
 800670e:	d135      	bne.n	800677c <_svfiprintf_r+0x188>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1d1a      	adds	r2, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9203      	str	r2, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	bfb8      	it	lt
 800671c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006720:	3402      	adds	r4, #2
 8006722:	9305      	str	r3, [sp, #20]
 8006724:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067f0 <_svfiprintf_r+0x1fc>
 8006728:	7821      	ldrb	r1, [r4, #0]
 800672a:	2203      	movs	r2, #3
 800672c:	4650      	mov	r0, sl
 800672e:	f7f9 fd9f 	bl	8000270 <memchr>
 8006732:	b140      	cbz	r0, 8006746 <_svfiprintf_r+0x152>
 8006734:	2340      	movs	r3, #64	; 0x40
 8006736:	eba0 000a 	sub.w	r0, r0, sl
 800673a:	fa03 f000 	lsl.w	r0, r3, r0
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	4303      	orrs	r3, r0
 8006742:	3401      	adds	r4, #1
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674a:	4826      	ldr	r0, [pc, #152]	; (80067e4 <_svfiprintf_r+0x1f0>)
 800674c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006750:	2206      	movs	r2, #6
 8006752:	f7f9 fd8d 	bl	8000270 <memchr>
 8006756:	2800      	cmp	r0, #0
 8006758:	d038      	beq.n	80067cc <_svfiprintf_r+0x1d8>
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <_svfiprintf_r+0x1f4>)
 800675c:	bb1b      	cbnz	r3, 80067a6 <_svfiprintf_r+0x1b2>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	3307      	adds	r3, #7
 8006762:	f023 0307 	bic.w	r3, r3, #7
 8006766:	3308      	adds	r3, #8
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676c:	4433      	add	r3, r6
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	e767      	b.n	8006642 <_svfiprintf_r+0x4e>
 8006772:	fb0c 3202 	mla	r2, ip, r2, r3
 8006776:	460c      	mov	r4, r1
 8006778:	2001      	movs	r0, #1
 800677a:	e7a5      	b.n	80066c8 <_svfiprintf_r+0xd4>
 800677c:	2300      	movs	r3, #0
 800677e:	3401      	adds	r4, #1
 8006780:	9305      	str	r3, [sp, #20]
 8006782:	4619      	mov	r1, r3
 8006784:	f04f 0c0a 	mov.w	ip, #10
 8006788:	4620      	mov	r0, r4
 800678a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800678e:	3a30      	subs	r2, #48	; 0x30
 8006790:	2a09      	cmp	r2, #9
 8006792:	d903      	bls.n	800679c <_svfiprintf_r+0x1a8>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0c5      	beq.n	8006724 <_svfiprintf_r+0x130>
 8006798:	9105      	str	r1, [sp, #20]
 800679a:	e7c3      	b.n	8006724 <_svfiprintf_r+0x130>
 800679c:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a0:	4604      	mov	r4, r0
 80067a2:	2301      	movs	r3, #1
 80067a4:	e7f0      	b.n	8006788 <_svfiprintf_r+0x194>
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	462a      	mov	r2, r5
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <_svfiprintf_r+0x1f8>)
 80067ae:	a904      	add	r1, sp, #16
 80067b0:	4638      	mov	r0, r7
 80067b2:	f3af 8000 	nop.w
 80067b6:	1c42      	adds	r2, r0, #1
 80067b8:	4606      	mov	r6, r0
 80067ba:	d1d6      	bne.n	800676a <_svfiprintf_r+0x176>
 80067bc:	89ab      	ldrh	r3, [r5, #12]
 80067be:	065b      	lsls	r3, r3, #25
 80067c0:	f53f af2c 	bmi.w	800661c <_svfiprintf_r+0x28>
 80067c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067c6:	b01d      	add	sp, #116	; 0x74
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4b06      	ldr	r3, [pc, #24]	; (80067ec <_svfiprintf_r+0x1f8>)
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	4638      	mov	r0, r7
 80067d8:	f000 f9d4 	bl	8006b84 <_printf_i>
 80067dc:	e7eb      	b.n	80067b6 <_svfiprintf_r+0x1c2>
 80067de:	bf00      	nop
 80067e0:	0800721c 	.word	0x0800721c
 80067e4:	08007226 	.word	0x08007226
 80067e8:	00000000 	.word	0x00000000
 80067ec:	0800653d 	.word	0x0800653d
 80067f0:	08007222 	.word	0x08007222

080067f4 <__sfputc_r>:
 80067f4:	6893      	ldr	r3, [r2, #8]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	b410      	push	{r4}
 80067fc:	6093      	str	r3, [r2, #8]
 80067fe:	da08      	bge.n	8006812 <__sfputc_r+0x1e>
 8006800:	6994      	ldr	r4, [r2, #24]
 8006802:	42a3      	cmp	r3, r4
 8006804:	db01      	blt.n	800680a <__sfputc_r+0x16>
 8006806:	290a      	cmp	r1, #10
 8006808:	d103      	bne.n	8006812 <__sfputc_r+0x1e>
 800680a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800680e:	f7ff bad5 	b.w	8005dbc <__swbuf_r>
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	1c58      	adds	r0, r3, #1
 8006816:	6010      	str	r0, [r2, #0]
 8006818:	7019      	strb	r1, [r3, #0]
 800681a:	4608      	mov	r0, r1
 800681c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006820:	4770      	bx	lr

08006822 <__sfputs_r>:
 8006822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	4614      	mov	r4, r2
 800682a:	18d5      	adds	r5, r2, r3
 800682c:	42ac      	cmp	r4, r5
 800682e:	d101      	bne.n	8006834 <__sfputs_r+0x12>
 8006830:	2000      	movs	r0, #0
 8006832:	e007      	b.n	8006844 <__sfputs_r+0x22>
 8006834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006838:	463a      	mov	r2, r7
 800683a:	4630      	mov	r0, r6
 800683c:	f7ff ffda 	bl	80067f4 <__sfputc_r>
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	d1f3      	bne.n	800682c <__sfputs_r+0xa>
 8006844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006848 <_vfiprintf_r>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	460d      	mov	r5, r1
 800684e:	b09d      	sub	sp, #116	; 0x74
 8006850:	4614      	mov	r4, r2
 8006852:	4698      	mov	r8, r3
 8006854:	4606      	mov	r6, r0
 8006856:	b118      	cbz	r0, 8006860 <_vfiprintf_r+0x18>
 8006858:	6983      	ldr	r3, [r0, #24]
 800685a:	b90b      	cbnz	r3, 8006860 <_vfiprintf_r+0x18>
 800685c:	f7ff fc88 	bl	8006170 <__sinit>
 8006860:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <_vfiprintf_r+0x240>)
 8006862:	429d      	cmp	r5, r3
 8006864:	d11b      	bne.n	800689e <_vfiprintf_r+0x56>
 8006866:	6875      	ldr	r5, [r6, #4]
 8006868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800686a:	07d9      	lsls	r1, r3, #31
 800686c:	d405      	bmi.n	800687a <_vfiprintf_r+0x32>
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d402      	bmi.n	800687a <_vfiprintf_r+0x32>
 8006874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006876:	f7ff fd19 	bl	80062ac <__retarget_lock_acquire_recursive>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	071b      	lsls	r3, r3, #28
 800687e:	d501      	bpl.n	8006884 <_vfiprintf_r+0x3c>
 8006880:	692b      	ldr	r3, [r5, #16]
 8006882:	b9eb      	cbnz	r3, 80068c0 <_vfiprintf_r+0x78>
 8006884:	4629      	mov	r1, r5
 8006886:	4630      	mov	r0, r6
 8006888:	f7ff faea 	bl	8005e60 <__swsetup_r>
 800688c:	b1c0      	cbz	r0, 80068c0 <_vfiprintf_r+0x78>
 800688e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006890:	07dc      	lsls	r4, r3, #31
 8006892:	d50e      	bpl.n	80068b2 <_vfiprintf_r+0x6a>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	b01d      	add	sp, #116	; 0x74
 800689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689e:	4b7b      	ldr	r3, [pc, #492]	; (8006a8c <_vfiprintf_r+0x244>)
 80068a0:	429d      	cmp	r5, r3
 80068a2:	d101      	bne.n	80068a8 <_vfiprintf_r+0x60>
 80068a4:	68b5      	ldr	r5, [r6, #8]
 80068a6:	e7df      	b.n	8006868 <_vfiprintf_r+0x20>
 80068a8:	4b79      	ldr	r3, [pc, #484]	; (8006a90 <_vfiprintf_r+0x248>)
 80068aa:	429d      	cmp	r5, r3
 80068ac:	bf08      	it	eq
 80068ae:	68f5      	ldreq	r5, [r6, #12]
 80068b0:	e7da      	b.n	8006868 <_vfiprintf_r+0x20>
 80068b2:	89ab      	ldrh	r3, [r5, #12]
 80068b4:	0598      	lsls	r0, r3, #22
 80068b6:	d4ed      	bmi.n	8006894 <_vfiprintf_r+0x4c>
 80068b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ba:	f7ff fcf8 	bl	80062ae <__retarget_lock_release_recursive>
 80068be:	e7e9      	b.n	8006894 <_vfiprintf_r+0x4c>
 80068c0:	2300      	movs	r3, #0
 80068c2:	9309      	str	r3, [sp, #36]	; 0x24
 80068c4:	2320      	movs	r3, #32
 80068c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ce:	2330      	movs	r3, #48	; 0x30
 80068d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a94 <_vfiprintf_r+0x24c>
 80068d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d8:	f04f 0901 	mov.w	r9, #1
 80068dc:	4623      	mov	r3, r4
 80068de:	469a      	mov	sl, r3
 80068e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e4:	b10a      	cbz	r2, 80068ea <_vfiprintf_r+0xa2>
 80068e6:	2a25      	cmp	r2, #37	; 0x25
 80068e8:	d1f9      	bne.n	80068de <_vfiprintf_r+0x96>
 80068ea:	ebba 0b04 	subs.w	fp, sl, r4
 80068ee:	d00b      	beq.n	8006908 <_vfiprintf_r+0xc0>
 80068f0:	465b      	mov	r3, fp
 80068f2:	4622      	mov	r2, r4
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ff93 	bl	8006822 <__sfputs_r>
 80068fc:	3001      	adds	r0, #1
 80068fe:	f000 80aa 	beq.w	8006a56 <_vfiprintf_r+0x20e>
 8006902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006904:	445a      	add	r2, fp
 8006906:	9209      	str	r2, [sp, #36]	; 0x24
 8006908:	f89a 3000 	ldrb.w	r3, [sl]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80a2 	beq.w	8006a56 <_vfiprintf_r+0x20e>
 8006912:	2300      	movs	r3, #0
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691c:	f10a 0a01 	add.w	sl, sl, #1
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	9307      	str	r3, [sp, #28]
 8006924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006928:	931a      	str	r3, [sp, #104]	; 0x68
 800692a:	4654      	mov	r4, sl
 800692c:	2205      	movs	r2, #5
 800692e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006932:	4858      	ldr	r0, [pc, #352]	; (8006a94 <_vfiprintf_r+0x24c>)
 8006934:	f7f9 fc9c 	bl	8000270 <memchr>
 8006938:	9a04      	ldr	r2, [sp, #16]
 800693a:	b9d8      	cbnz	r0, 8006974 <_vfiprintf_r+0x12c>
 800693c:	06d1      	lsls	r1, r2, #27
 800693e:	bf44      	itt	mi
 8006940:	2320      	movmi	r3, #32
 8006942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006946:	0713      	lsls	r3, r2, #28
 8006948:	bf44      	itt	mi
 800694a:	232b      	movmi	r3, #43	; 0x2b
 800694c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006950:	f89a 3000 	ldrb.w	r3, [sl]
 8006954:	2b2a      	cmp	r3, #42	; 0x2a
 8006956:	d015      	beq.n	8006984 <_vfiprintf_r+0x13c>
 8006958:	9a07      	ldr	r2, [sp, #28]
 800695a:	4654      	mov	r4, sl
 800695c:	2000      	movs	r0, #0
 800695e:	f04f 0c0a 	mov.w	ip, #10
 8006962:	4621      	mov	r1, r4
 8006964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006968:	3b30      	subs	r3, #48	; 0x30
 800696a:	2b09      	cmp	r3, #9
 800696c:	d94e      	bls.n	8006a0c <_vfiprintf_r+0x1c4>
 800696e:	b1b0      	cbz	r0, 800699e <_vfiprintf_r+0x156>
 8006970:	9207      	str	r2, [sp, #28]
 8006972:	e014      	b.n	800699e <_vfiprintf_r+0x156>
 8006974:	eba0 0308 	sub.w	r3, r0, r8
 8006978:	fa09 f303 	lsl.w	r3, r9, r3
 800697c:	4313      	orrs	r3, r2
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	46a2      	mov	sl, r4
 8006982:	e7d2      	b.n	800692a <_vfiprintf_r+0xe2>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	1d19      	adds	r1, r3, #4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9103      	str	r1, [sp, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfbb      	ittet	lt
 8006990:	425b      	neglt	r3, r3
 8006992:	f042 0202 	orrlt.w	r2, r2, #2
 8006996:	9307      	strge	r3, [sp, #28]
 8006998:	9307      	strlt	r3, [sp, #28]
 800699a:	bfb8      	it	lt
 800699c:	9204      	strlt	r2, [sp, #16]
 800699e:	7823      	ldrb	r3, [r4, #0]
 80069a0:	2b2e      	cmp	r3, #46	; 0x2e
 80069a2:	d10c      	bne.n	80069be <_vfiprintf_r+0x176>
 80069a4:	7863      	ldrb	r3, [r4, #1]
 80069a6:	2b2a      	cmp	r3, #42	; 0x2a
 80069a8:	d135      	bne.n	8006a16 <_vfiprintf_r+0x1ce>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	1d1a      	adds	r2, r3, #4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	9203      	str	r2, [sp, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfb8      	it	lt
 80069b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ba:	3402      	adds	r4, #2
 80069bc:	9305      	str	r3, [sp, #20]
 80069be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006aa4 <_vfiprintf_r+0x25c>
 80069c2:	7821      	ldrb	r1, [r4, #0]
 80069c4:	2203      	movs	r2, #3
 80069c6:	4650      	mov	r0, sl
 80069c8:	f7f9 fc52 	bl	8000270 <memchr>
 80069cc:	b140      	cbz	r0, 80069e0 <_vfiprintf_r+0x198>
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	eba0 000a 	sub.w	r0, r0, sl
 80069d4:	fa03 f000 	lsl.w	r0, r3, r0
 80069d8:	9b04      	ldr	r3, [sp, #16]
 80069da:	4303      	orrs	r3, r0
 80069dc:	3401      	adds	r4, #1
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e4:	482c      	ldr	r0, [pc, #176]	; (8006a98 <_vfiprintf_r+0x250>)
 80069e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ea:	2206      	movs	r2, #6
 80069ec:	f7f9 fc40 	bl	8000270 <memchr>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d03f      	beq.n	8006a74 <_vfiprintf_r+0x22c>
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <_vfiprintf_r+0x254>)
 80069f6:	bb1b      	cbnz	r3, 8006a40 <_vfiprintf_r+0x1f8>
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	3307      	adds	r3, #7
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	3308      	adds	r3, #8
 8006a02:	9303      	str	r3, [sp, #12]
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	443b      	add	r3, r7
 8006a08:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0a:	e767      	b.n	80068dc <_vfiprintf_r+0x94>
 8006a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a10:	460c      	mov	r4, r1
 8006a12:	2001      	movs	r0, #1
 8006a14:	e7a5      	b.n	8006962 <_vfiprintf_r+0x11a>
 8006a16:	2300      	movs	r3, #0
 8006a18:	3401      	adds	r4, #1
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f04f 0c0a 	mov.w	ip, #10
 8006a22:	4620      	mov	r0, r4
 8006a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a28:	3a30      	subs	r2, #48	; 0x30
 8006a2a:	2a09      	cmp	r2, #9
 8006a2c:	d903      	bls.n	8006a36 <_vfiprintf_r+0x1ee>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0c5      	beq.n	80069be <_vfiprintf_r+0x176>
 8006a32:	9105      	str	r1, [sp, #20]
 8006a34:	e7c3      	b.n	80069be <_vfiprintf_r+0x176>
 8006a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e7f0      	b.n	8006a22 <_vfiprintf_r+0x1da>
 8006a40:	ab03      	add	r3, sp, #12
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	462a      	mov	r2, r5
 8006a46:	4b16      	ldr	r3, [pc, #88]	; (8006aa0 <_vfiprintf_r+0x258>)
 8006a48:	a904      	add	r1, sp, #16
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f3af 8000 	nop.w
 8006a50:	4607      	mov	r7, r0
 8006a52:	1c78      	adds	r0, r7, #1
 8006a54:	d1d6      	bne.n	8006a04 <_vfiprintf_r+0x1bc>
 8006a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a58:	07d9      	lsls	r1, r3, #31
 8006a5a:	d405      	bmi.n	8006a68 <_vfiprintf_r+0x220>
 8006a5c:	89ab      	ldrh	r3, [r5, #12]
 8006a5e:	059a      	lsls	r2, r3, #22
 8006a60:	d402      	bmi.n	8006a68 <_vfiprintf_r+0x220>
 8006a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a64:	f7ff fc23 	bl	80062ae <__retarget_lock_release_recursive>
 8006a68:	89ab      	ldrh	r3, [r5, #12]
 8006a6a:	065b      	lsls	r3, r3, #25
 8006a6c:	f53f af12 	bmi.w	8006894 <_vfiprintf_r+0x4c>
 8006a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a72:	e711      	b.n	8006898 <_vfiprintf_r+0x50>
 8006a74:	ab03      	add	r3, sp, #12
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	462a      	mov	r2, r5
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <_vfiprintf_r+0x258>)
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f000 f880 	bl	8006b84 <_printf_i>
 8006a84:	e7e4      	b.n	8006a50 <_vfiprintf_r+0x208>
 8006a86:	bf00      	nop
 8006a88:	080071dc 	.word	0x080071dc
 8006a8c:	080071fc 	.word	0x080071fc
 8006a90:	080071bc 	.word	0x080071bc
 8006a94:	0800721c 	.word	0x0800721c
 8006a98:	08007226 	.word	0x08007226
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	08006823 	.word	0x08006823
 8006aa4:	08007222 	.word	0x08007222

08006aa8 <_printf_common>:
 8006aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aac:	4616      	mov	r6, r2
 8006aae:	4699      	mov	r9, r3
 8006ab0:	688a      	ldr	r2, [r1, #8]
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	bfb8      	it	lt
 8006abc:	4613      	movlt	r3, r2
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	b10a      	cbz	r2, 8006ace <_printf_common+0x26>
 8006aca:	3301      	adds	r3, #1
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	0699      	lsls	r1, r3, #26
 8006ad2:	bf42      	ittt	mi
 8006ad4:	6833      	ldrmi	r3, [r6, #0]
 8006ad6:	3302      	addmi	r3, #2
 8006ad8:	6033      	strmi	r3, [r6, #0]
 8006ada:	6825      	ldr	r5, [r4, #0]
 8006adc:	f015 0506 	ands.w	r5, r5, #6
 8006ae0:	d106      	bne.n	8006af0 <_printf_common+0x48>
 8006ae2:	f104 0a19 	add.w	sl, r4, #25
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	6832      	ldr	r2, [r6, #0]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc26      	bgt.n	8006b3e <_printf_common+0x96>
 8006af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006af4:	1e13      	subs	r3, r2, #0
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	bf18      	it	ne
 8006afa:	2301      	movne	r3, #1
 8006afc:	0692      	lsls	r2, r2, #26
 8006afe:	d42b      	bmi.n	8006b58 <_printf_common+0xb0>
 8006b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b04:	4649      	mov	r1, r9
 8006b06:	4638      	mov	r0, r7
 8006b08:	47c0      	blx	r8
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d01e      	beq.n	8006b4c <_printf_common+0xa4>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	68e5      	ldr	r5, [r4, #12]
 8006b12:	6832      	ldr	r2, [r6, #0]
 8006b14:	f003 0306 	and.w	r3, r3, #6
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	bf08      	it	eq
 8006b1c:	1aad      	subeq	r5, r5, r2
 8006b1e:	68a3      	ldr	r3, [r4, #8]
 8006b20:	6922      	ldr	r2, [r4, #16]
 8006b22:	bf0c      	ite	eq
 8006b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b28:	2500      	movne	r5, #0
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	bfc4      	itt	gt
 8006b2e:	1a9b      	subgt	r3, r3, r2
 8006b30:	18ed      	addgt	r5, r5, r3
 8006b32:	2600      	movs	r6, #0
 8006b34:	341a      	adds	r4, #26
 8006b36:	42b5      	cmp	r5, r6
 8006b38:	d11a      	bne.n	8006b70 <_printf_common+0xc8>
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e008      	b.n	8006b50 <_printf_common+0xa8>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4652      	mov	r2, sl
 8006b42:	4649      	mov	r1, r9
 8006b44:	4638      	mov	r0, r7
 8006b46:	47c0      	blx	r8
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d103      	bne.n	8006b54 <_printf_common+0xac>
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	3501      	adds	r5, #1
 8006b56:	e7c6      	b.n	8006ae6 <_printf_common+0x3e>
 8006b58:	18e1      	adds	r1, r4, r3
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	2030      	movs	r0, #48	; 0x30
 8006b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b62:	4422      	add	r2, r4
 8006b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	e7c7      	b.n	8006b00 <_printf_common+0x58>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4622      	mov	r2, r4
 8006b74:	4649      	mov	r1, r9
 8006b76:	4638      	mov	r0, r7
 8006b78:	47c0      	blx	r8
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d0e6      	beq.n	8006b4c <_printf_common+0xa4>
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7d9      	b.n	8006b36 <_printf_common+0x8e>
	...

08006b84 <_printf_i>:
 8006b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	7e0f      	ldrb	r7, [r1, #24]
 8006b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b8c:	2f78      	cmp	r7, #120	; 0x78
 8006b8e:	4691      	mov	r9, r2
 8006b90:	4680      	mov	r8, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	469a      	mov	sl, r3
 8006b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b9a:	d807      	bhi.n	8006bac <_printf_i+0x28>
 8006b9c:	2f62      	cmp	r7, #98	; 0x62
 8006b9e:	d80a      	bhi.n	8006bb6 <_printf_i+0x32>
 8006ba0:	2f00      	cmp	r7, #0
 8006ba2:	f000 80d8 	beq.w	8006d56 <_printf_i+0x1d2>
 8006ba6:	2f58      	cmp	r7, #88	; 0x58
 8006ba8:	f000 80a3 	beq.w	8006cf2 <_printf_i+0x16e>
 8006bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bb4:	e03a      	b.n	8006c2c <_printf_i+0xa8>
 8006bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bba:	2b15      	cmp	r3, #21
 8006bbc:	d8f6      	bhi.n	8006bac <_printf_i+0x28>
 8006bbe:	a101      	add	r1, pc, #4	; (adr r1, 8006bc4 <_printf_i+0x40>)
 8006bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bc4:	08006c1d 	.word	0x08006c1d
 8006bc8:	08006c31 	.word	0x08006c31
 8006bcc:	08006bad 	.word	0x08006bad
 8006bd0:	08006bad 	.word	0x08006bad
 8006bd4:	08006bad 	.word	0x08006bad
 8006bd8:	08006bad 	.word	0x08006bad
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006bad 	.word	0x08006bad
 8006be4:	08006bad 	.word	0x08006bad
 8006be8:	08006bad 	.word	0x08006bad
 8006bec:	08006bad 	.word	0x08006bad
 8006bf0:	08006d3d 	.word	0x08006d3d
 8006bf4:	08006c61 	.word	0x08006c61
 8006bf8:	08006d1f 	.word	0x08006d1f
 8006bfc:	08006bad 	.word	0x08006bad
 8006c00:	08006bad 	.word	0x08006bad
 8006c04:	08006d5f 	.word	0x08006d5f
 8006c08:	08006bad 	.word	0x08006bad
 8006c0c:	08006c61 	.word	0x08006c61
 8006c10:	08006bad 	.word	0x08006bad
 8006c14:	08006bad 	.word	0x08006bad
 8006c18:	08006d27 	.word	0x08006d27
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	602a      	str	r2, [r5, #0]
 8006c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0a3      	b.n	8006d78 <_printf_i+0x1f4>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	6829      	ldr	r1, [r5, #0]
 8006c34:	0606      	lsls	r6, r0, #24
 8006c36:	f101 0304 	add.w	r3, r1, #4
 8006c3a:	d50a      	bpl.n	8006c52 <_printf_i+0xce>
 8006c3c:	680e      	ldr	r6, [r1, #0]
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	da03      	bge.n	8006c4c <_printf_i+0xc8>
 8006c44:	232d      	movs	r3, #45	; 0x2d
 8006c46:	4276      	negs	r6, r6
 8006c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c4c:	485e      	ldr	r0, [pc, #376]	; (8006dc8 <_printf_i+0x244>)
 8006c4e:	230a      	movs	r3, #10
 8006c50:	e019      	b.n	8006c86 <_printf_i+0x102>
 8006c52:	680e      	ldr	r6, [r1, #0]
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c5a:	bf18      	it	ne
 8006c5c:	b236      	sxthne	r6, r6
 8006c5e:	e7ef      	b.n	8006c40 <_printf_i+0xbc>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	1d19      	adds	r1, r3, #4
 8006c66:	6029      	str	r1, [r5, #0]
 8006c68:	0601      	lsls	r1, r0, #24
 8006c6a:	d501      	bpl.n	8006c70 <_printf_i+0xec>
 8006c6c:	681e      	ldr	r6, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <_printf_i+0xf2>
 8006c70:	0646      	lsls	r6, r0, #25
 8006c72:	d5fb      	bpl.n	8006c6c <_printf_i+0xe8>
 8006c74:	881e      	ldrh	r6, [r3, #0]
 8006c76:	4854      	ldr	r0, [pc, #336]	; (8006dc8 <_printf_i+0x244>)
 8006c78:	2f6f      	cmp	r7, #111	; 0x6f
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2308      	moveq	r3, #8
 8006c7e:	230a      	movne	r3, #10
 8006c80:	2100      	movs	r1, #0
 8006c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c86:	6865      	ldr	r5, [r4, #4]
 8006c88:	60a5      	str	r5, [r4, #8]
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	bfa2      	ittt	ge
 8006c8e:	6821      	ldrge	r1, [r4, #0]
 8006c90:	f021 0104 	bicge.w	r1, r1, #4
 8006c94:	6021      	strge	r1, [r4, #0]
 8006c96:	b90e      	cbnz	r6, 8006c9c <_printf_i+0x118>
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	d04d      	beq.n	8006d38 <_printf_i+0x1b4>
 8006c9c:	4615      	mov	r5, r2
 8006c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ca6:	5dc7      	ldrb	r7, [r0, r7]
 8006ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cac:	4637      	mov	r7, r6
 8006cae:	42bb      	cmp	r3, r7
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	d9f4      	bls.n	8006c9e <_printf_i+0x11a>
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d10b      	bne.n	8006cd0 <_printf_i+0x14c>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	07de      	lsls	r6, r3, #31
 8006cbc:	d508      	bpl.n	8006cd0 <_printf_i+0x14c>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	6861      	ldr	r1, [r4, #4]
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	bfde      	ittt	le
 8006cc6:	2330      	movle	r3, #48	; 0x30
 8006cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cd0:	1b52      	subs	r2, r2, r5
 8006cd2:	6122      	str	r2, [r4, #16]
 8006cd4:	f8cd a000 	str.w	sl, [sp]
 8006cd8:	464b      	mov	r3, r9
 8006cda:	aa03      	add	r2, sp, #12
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4640      	mov	r0, r8
 8006ce0:	f7ff fee2 	bl	8006aa8 <_printf_common>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d14c      	bne.n	8006d82 <_printf_i+0x1fe>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	b004      	add	sp, #16
 8006cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf2:	4835      	ldr	r0, [pc, #212]	; (8006dc8 <_printf_i+0x244>)
 8006cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cf8:	6829      	ldr	r1, [r5, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d00:	6029      	str	r1, [r5, #0]
 8006d02:	061d      	lsls	r5, r3, #24
 8006d04:	d514      	bpl.n	8006d30 <_printf_i+0x1ac>
 8006d06:	07df      	lsls	r7, r3, #31
 8006d08:	bf44      	itt	mi
 8006d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d0e:	6023      	strmi	r3, [r4, #0]
 8006d10:	b91e      	cbnz	r6, 8006d1a <_printf_i+0x196>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f023 0320 	bic.w	r3, r3, #32
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	e7b0      	b.n	8006c80 <_printf_i+0xfc>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f043 0320 	orr.w	r3, r3, #32
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	2378      	movs	r3, #120	; 0x78
 8006d28:	4828      	ldr	r0, [pc, #160]	; (8006dcc <_printf_i+0x248>)
 8006d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d2e:	e7e3      	b.n	8006cf8 <_printf_i+0x174>
 8006d30:	0659      	lsls	r1, r3, #25
 8006d32:	bf48      	it	mi
 8006d34:	b2b6      	uxthmi	r6, r6
 8006d36:	e7e6      	b.n	8006d06 <_printf_i+0x182>
 8006d38:	4615      	mov	r5, r2
 8006d3a:	e7bb      	b.n	8006cb4 <_printf_i+0x130>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	6826      	ldr	r6, [r4, #0]
 8006d40:	6961      	ldr	r1, [r4, #20]
 8006d42:	1d18      	adds	r0, r3, #4
 8006d44:	6028      	str	r0, [r5, #0]
 8006d46:	0635      	lsls	r5, r6, #24
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0x1cc>
 8006d4c:	6019      	str	r1, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <_printf_i+0x1d2>
 8006d50:	0670      	lsls	r0, r6, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0x1c8>
 8006d54:	8019      	strh	r1, [r3, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	4615      	mov	r5, r2
 8006d5c:	e7ba      	b.n	8006cd4 <_printf_i+0x150>
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	1d1a      	adds	r2, r3, #4
 8006d62:	602a      	str	r2, [r5, #0]
 8006d64:	681d      	ldr	r5, [r3, #0]
 8006d66:	6862      	ldr	r2, [r4, #4]
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f7f9 fa80 	bl	8000270 <memchr>
 8006d70:	b108      	cbz	r0, 8006d76 <_printf_i+0x1f2>
 8006d72:	1b40      	subs	r0, r0, r5
 8006d74:	6060      	str	r0, [r4, #4]
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d80:	e7a8      	b.n	8006cd4 <_printf_i+0x150>
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	462a      	mov	r2, r5
 8006d86:	4649      	mov	r1, r9
 8006d88:	4640      	mov	r0, r8
 8006d8a:	47d0      	blx	sl
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d0ab      	beq.n	8006ce8 <_printf_i+0x164>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	079b      	lsls	r3, r3, #30
 8006d94:	d413      	bmi.n	8006dbe <_printf_i+0x23a>
 8006d96:	68e0      	ldr	r0, [r4, #12]
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	4298      	cmp	r0, r3
 8006d9c:	bfb8      	it	lt
 8006d9e:	4618      	movlt	r0, r3
 8006da0:	e7a4      	b.n	8006cec <_printf_i+0x168>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4632      	mov	r2, r6
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	47d0      	blx	sl
 8006dac:	3001      	adds	r0, #1
 8006dae:	d09b      	beq.n	8006ce8 <_printf_i+0x164>
 8006db0:	3501      	adds	r5, #1
 8006db2:	68e3      	ldr	r3, [r4, #12]
 8006db4:	9903      	ldr	r1, [sp, #12]
 8006db6:	1a5b      	subs	r3, r3, r1
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	dcf2      	bgt.n	8006da2 <_printf_i+0x21e>
 8006dbc:	e7eb      	b.n	8006d96 <_printf_i+0x212>
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	f104 0619 	add.w	r6, r4, #25
 8006dc4:	e7f5      	b.n	8006db2 <_printf_i+0x22e>
 8006dc6:	bf00      	nop
 8006dc8:	0800722d 	.word	0x0800722d
 8006dcc:	0800723e 	.word	0x0800723e

08006dd0 <_sbrk_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d06      	ldr	r5, [pc, #24]	; (8006dec <_sbrk_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f000 f912 	bl	8007004 <_sbrk>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_sbrk_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_sbrk_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	2001448c 	.word	0x2001448c

08006df0 <__sread>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	460c      	mov	r4, r1
 8006df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df8:	f000 f8ea 	bl	8006fd0 <_read_r>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	bfab      	itete	ge
 8006e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e02:	89a3      	ldrhlt	r3, [r4, #12]
 8006e04:	181b      	addge	r3, r3, r0
 8006e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e0a:	bfac      	ite	ge
 8006e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e0e:	81a3      	strhlt	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__swrite>:
 8006e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	461f      	mov	r7, r3
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4616      	mov	r6, r2
 8006e22:	d505      	bpl.n	8006e30 <__swrite+0x1e>
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	2302      	movs	r3, #2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 f868 	bl	8006f00 <_lseek_r>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	f000 b817 	b.w	8006e78 <_write_r>

08006e4a <__sseek>:
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e52:	f000 f855 	bl	8006f00 <_lseek_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	bf15      	itete	ne
 8006e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e66:	81a3      	strheq	r3, [r4, #12]
 8006e68:	bf18      	it	ne
 8006e6a:	81a3      	strhne	r3, [r4, #12]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__sclose>:
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 b813 	b.w	8006e9c <_close_r>
	...

08006e78 <_write_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_write_r+0x20>)
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	4608      	mov	r0, r1
 8006e80:	4611      	mov	r1, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	602a      	str	r2, [r5, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f7f9 fcef 	bl	800086a <_write>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_write_r+0x1e>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_write_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	2001448c 	.word	0x2001448c

08006e9c <_close_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_close_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7f9 fcfb 	bl	80008a2 <_close>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_close_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_close_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	2001448c 	.word	0x2001448c

08006ebc <_fstat_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	; (8006edc <_fstat_r+0x20>)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	4608      	mov	r0, r1
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	602b      	str	r3, [r5, #0]
 8006eca:	f7f9 fcf6 	bl	80008ba <_fstat>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d102      	bne.n	8006ed8 <_fstat_r+0x1c>
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	b103      	cbz	r3, 8006ed8 <_fstat_r+0x1c>
 8006ed6:	6023      	str	r3, [r4, #0]
 8006ed8:	bd38      	pop	{r3, r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	2001448c 	.word	0x2001448c

08006ee0 <_isatty_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d06      	ldr	r5, [pc, #24]	; (8006efc <_isatty_r+0x1c>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	602b      	str	r3, [r5, #0]
 8006eec:	f7f9 fcf5 	bl	80008da <_isatty>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d102      	bne.n	8006efa <_isatty_r+0x1a>
 8006ef4:	682b      	ldr	r3, [r5, #0]
 8006ef6:	b103      	cbz	r3, 8006efa <_isatty_r+0x1a>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	2001448c 	.word	0x2001448c

08006f00 <_lseek_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d07      	ldr	r5, [pc, #28]	; (8006f20 <_lseek_r+0x20>)
 8006f04:	4604      	mov	r4, r0
 8006f06:	4608      	mov	r0, r1
 8006f08:	4611      	mov	r1, r2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f7f9 fcee 	bl	80008f0 <_lseek>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_lseek_r+0x1e>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_lseek_r+0x1e>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	2001448c 	.word	0x2001448c

08006f24 <memmove>:
 8006f24:	4288      	cmp	r0, r1
 8006f26:	b510      	push	{r4, lr}
 8006f28:	eb01 0402 	add.w	r4, r1, r2
 8006f2c:	d902      	bls.n	8006f34 <memmove+0x10>
 8006f2e:	4284      	cmp	r4, r0
 8006f30:	4623      	mov	r3, r4
 8006f32:	d807      	bhi.n	8006f44 <memmove+0x20>
 8006f34:	1e43      	subs	r3, r0, #1
 8006f36:	42a1      	cmp	r1, r4
 8006f38:	d008      	beq.n	8006f4c <memmove+0x28>
 8006f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f42:	e7f8      	b.n	8006f36 <memmove+0x12>
 8006f44:	4402      	add	r2, r0
 8006f46:	4601      	mov	r1, r0
 8006f48:	428a      	cmp	r2, r1
 8006f4a:	d100      	bne.n	8006f4e <memmove+0x2a>
 8006f4c:	bd10      	pop	{r4, pc}
 8006f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f56:	e7f7      	b.n	8006f48 <memmove+0x24>

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	; (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff b9a7 	b.w	80062ac <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	2001447f 	.word	0x2001447f

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff b9a2 	b.w	80062ae <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	2001447f 	.word	0x2001447f

08006f70 <_realloc_r>:
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	4680      	mov	r8, r0
 8006f76:	4614      	mov	r4, r2
 8006f78:	460e      	mov	r6, r1
 8006f7a:	b921      	cbnz	r1, 8006f86 <_realloc_r+0x16>
 8006f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	4611      	mov	r1, r2
 8006f82:	f7ff ba67 	b.w	8006454 <_malloc_r>
 8006f86:	b92a      	cbnz	r2, 8006f94 <_realloc_r+0x24>
 8006f88:	f7ff f9f8 	bl	800637c <_free_r>
 8006f8c:	4625      	mov	r5, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f94:	f000 f82e 	bl	8006ff4 <_malloc_usable_size_r>
 8006f98:	4284      	cmp	r4, r0
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	d802      	bhi.n	8006fa4 <_realloc_r+0x34>
 8006f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fa2:	d812      	bhi.n	8006fca <_realloc_r+0x5a>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	f7ff fa54 	bl	8006454 <_malloc_r>
 8006fac:	4605      	mov	r5, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d0ed      	beq.n	8006f8e <_realloc_r+0x1e>
 8006fb2:	42bc      	cmp	r4, r7
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	bf28      	it	cs
 8006fba:	463a      	movcs	r2, r7
 8006fbc:	f7fe fe3a 	bl	8005c34 <memcpy>
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f7ff f9da 	bl	800637c <_free_r>
 8006fc8:	e7e1      	b.n	8006f8e <_realloc_r+0x1e>
 8006fca:	4635      	mov	r5, r6
 8006fcc:	e7df      	b.n	8006f8e <_realloc_r+0x1e>
	...

08006fd0 <_read_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	; (8006ff0 <_read_r+0x20>)
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	4611      	mov	r1, r2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	602a      	str	r2, [r5, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f7f9 fc26 	bl	8000830 <_read>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_read_r+0x1e>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_read_r+0x1e>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	2001448c 	.word	0x2001448c

08006ff4 <_malloc_usable_size_r>:
 8006ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff8:	1f18      	subs	r0, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bfbc      	itt	lt
 8006ffe:	580b      	ldrlt	r3, [r1, r0]
 8007000:	18c0      	addlt	r0, r0, r3
 8007002:	4770      	bx	lr

08007004 <_sbrk>:
 8007004:	4a04      	ldr	r2, [pc, #16]	; (8007018 <_sbrk+0x14>)
 8007006:	6811      	ldr	r1, [r2, #0]
 8007008:	4603      	mov	r3, r0
 800700a:	b909      	cbnz	r1, 8007010 <_sbrk+0xc>
 800700c:	4903      	ldr	r1, [pc, #12]	; (800701c <_sbrk+0x18>)
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	6810      	ldr	r0, [r2, #0]
 8007012:	4403      	add	r3, r0
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4770      	bx	lr
 8007018:	20014490 	.word	0x20014490
 800701c:	20014498 	.word	0x20014498

08007020 <_init>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr

0800702c <_fini>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr
