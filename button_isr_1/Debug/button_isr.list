
button_isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  2000000c  08003440  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08003440  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c46  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002473  00000000  00000000  00031c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00035298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002823f  00000000  00000000  00036300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ad5  00000000  00000000  0005e53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9e77  00000000  00000000  00070014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  00169edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033a8 	.word	0x080033a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080033a8 	.word	0x080033a8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20000134 	.word	0x20000134

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fa0e 	bl	8000688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f803 	bl	8000276 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f852 	bl	8000318 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x10>

08000276 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b096      	sub	sp, #88	; 0x58
 800027a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2244      	movs	r2, #68	; 0x44
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f003 f887 	bl	8003398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028a:	463b      	mov	r3, r7
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000298:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029c:	f000 fd0a 	bl	8000cb4 <HAL_PWREx_ControlVoltageScaling>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a6:	f000 f8ef 	bl	8000488 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b4:	2310      	movs	r3, #16
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	2302      	movs	r3, #2
 80002be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002c4:	230a      	movs	r3, #10
 80002c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002c8:	2307      	movs	r3, #7
 80002ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002cc:	2302      	movs	r3, #2
 80002ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fd41 	bl	8000d60 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002e4:	f000 f8d0 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2303      	movs	r3, #3
 80002ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002fc:	463b      	mov	r3, r7
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f001 f909 	bl	8001518 <HAL_RCC_ClockConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030c:	f000 f8bc 	bl	8000488 <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3758      	adds	r7, #88	; 0x58
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b38      	ldr	r3, [pc, #224]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a37      	ldr	r2, [pc, #220]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b35      	ldr	r3, [pc, #212]	; (8000410 <MX_GPIO_Init+0xf8>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000346:	4b32      	ldr	r3, [pc, #200]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a31      	ldr	r2, [pc, #196]	; (8000410 <MX_GPIO_Init+0xf8>)
 800034c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b29      	ldr	r3, [pc, #164]	; (8000410 <MX_GPIO_Init+0xf8>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	4b26      	ldr	r3, [pc, #152]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	4a25      	ldr	r2, [pc, #148]	; (8000410 <MX_GPIO_Init+0xf8>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000382:	4b23      	ldr	r3, [pc, #140]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	f003 0302 	and.w	r3, r3, #2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f000 fc43 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800039a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4619      	mov	r1, r3
 80003b0:	4818      	ldr	r0, [pc, #96]	; (8000414 <MX_GPIO_Init+0xfc>)
 80003b2:	f000 fa8b 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003b6:	230c      	movs	r3, #12
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003c2:	2303      	movs	r3, #3
 80003c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003c6:	2307      	movs	r3, #7
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 fa7a 	bl	80008cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d8:	2320      	movs	r3, #32
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	4619      	mov	r1, r3
 80003ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f2:	f000 fa6b 	bl	80008cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	2028      	movs	r0, #40	; 0x28
 80003fc:	f000 fa3c 	bl	8000878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000400:	2028      	movs	r0, #40	; 0x28
 8000402:	f000 fa55 	bl	80008b0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3728      	adds	r7, #40	; 0x28
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	48000800 	.word	0x48000800

08000418 <EXTI15_10_IRQHandler>:
}



void EXTI15_10_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800041e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000422:	f000 fc15 	bl	8000c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BaseType_t xYieldRequired;
  xYieldRequired = xTaskResumeFromISR( task2_handle );
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <EXTI15_10_IRQHandler+0x44>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fdf8 	bl	8002020 <xTaskResumeFromISR>
 8000430:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( xYieldRequired );
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00a      	beq.n	800044e <EXTI15_10_IRQHandler+0x36>
 8000438:	f002 fdd4 	bl	8002fe4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <EXTI15_10_IRQHandler+0x48>)
 800043e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800044c:	e001      	b.n	8000452 <EXTI15_10_IRQHandler+0x3a>
  portYIELD_FROM_ISR( xYieldRequired );
 800044e:	f002 fdad 	bl	8002fac <SEGGER_SYSVIEW_RecordExitISR>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000028 	.word	0x20000028
 8000460:	e000ed04 	.word	0xe000ed04

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000476:	f000 f927 	bl	80006c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40001000 	.word	0x40001000

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x44>)
 800049c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x44>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6613      	str	r3, [r2, #96]	; 0x60
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x44>)
 80004a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_MspInit+0x44>)
 80004b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	6593      	str	r3, [r2, #88]	; 0x58
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_MspInit+0x44>)
 80004c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80004ca:	f001 ff4d 	bl	8002368 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08e      	sub	sp, #56	; 0x38
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80004ea:	4b34      	ldr	r3, [pc, #208]	; (80005bc <HAL_InitTick+0xe0>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ee:	4a33      	ldr	r2, [pc, #204]	; (80005bc <HAL_InitTick+0xe0>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6593      	str	r3, [r2, #88]	; 0x58
 80004f6:	4b31      	ldr	r3, [pc, #196]	; (80005bc <HAL_InitTick+0xe0>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000502:	f107 0210 	add.w	r2, r7, #16
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f001 f9b1 	bl	8001874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000512:	6a3b      	ldr	r3, [r7, #32]
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800051c:	f001 f994 	bl	8001848 <HAL_RCC_GetPCLK1Freq>
 8000520:	6378      	str	r0, [r7, #52]	; 0x34
 8000522:	e004      	b.n	800052e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000524:	f001 f990 	bl	8001848 <HAL_RCC_GetPCLK1Freq>
 8000528:	4603      	mov	r3, r0
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000530:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <HAL_InitTick+0xe4>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	0c9b      	lsrs	r3, r3, #18
 8000538:	3b01      	subs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <HAL_InitTick+0xe8>)
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <HAL_InitTick+0xec>)
 8000540:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <HAL_InitTick+0xe8>)
 8000544:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000548:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800054a:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <HAL_InitTick+0xe8>)
 800054c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <HAL_InitTick+0xe8>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <HAL_InitTick+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <HAL_InitTick+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000562:	4818      	ldr	r0, [pc, #96]	; (80005c4 <HAL_InitTick+0xe8>)
 8000564:	f001 fa18 	bl	8001998 <HAL_TIM_Base_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800056e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000572:	2b00      	cmp	r3, #0
 8000574:	d11b      	bne.n	80005ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000576:	4813      	ldr	r0, [pc, #76]	; (80005c4 <HAL_InitTick+0xe8>)
 8000578:	f001 fa70 	bl	8001a5c <HAL_TIM_Base_Start_IT>
 800057c:	4603      	mov	r3, r0
 800057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000586:	2b00      	cmp	r3, #0
 8000588:	d111      	bne.n	80005ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800058a:	2036      	movs	r0, #54	; 0x36
 800058c:	f000 f990 	bl	80008b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b0f      	cmp	r3, #15
 8000594:	d808      	bhi.n	80005a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000596:	2200      	movs	r2, #0
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	2036      	movs	r0, #54	; 0x36
 800059c:	f000 f96c 	bl	8000878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <HAL_InitTick+0xf0>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	e002      	b.n	80005ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3738      	adds	r7, #56	; 0x38
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	431bde83 	.word	0x431bde83
 80005c4:	2000002c 	.word	0x2000002c
 80005c8:	40001000 	.word	0x40001000
 80005cc:	20000004 	.word	0x20000004

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <TIM6_DAC_IRQHandler+0x10>)
 8000602:	f001 fa9b 	bl	8001b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000002c 	.word	0x2000002c

08000610 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <SystemInit+0x20>)
 8000616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <SystemInit+0x20>)
 800061c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800066c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000638:	f7ff ffea 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000662:	f002 fe67 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000666:	f7ff fdfd 	bl	8000264 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800066c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000678:	08003434 	.word	0x08003434
  ldr r2, =_sbss
 800067c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000680:	20000700 	.word	0x20000700

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>
	...

08000688 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_Init+0x3c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <HAL_Init+0x3c>)
 8000698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f8df 	bl	8000862 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a4:	200f      	movs	r0, #15
 80006a6:	f7ff ff19 	bl	80004dc <HAL_InitTick>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	e001      	b.n	80006ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b6:	f7ff feed 	bl	8000494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x20>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x24>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_IncTick+0x24>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000078 	.word	0x20000078

080006f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return uwTick;
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <HAL_GetTick+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000078 	.word	0x20000078

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	db0b      	blt.n	8000796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 021f 	and.w	r2, r3, #31
 8000784:	4907      	ldr	r1, [pc, #28]	; (80007a4 <__NVIC_EnableIRQ+0x38>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	095b      	lsrs	r3, r3, #5
 800078c:	2001      	movs	r0, #1
 800078e:	fa00 f202 	lsl.w	r2, r0, r2
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	; 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff4c 	bl	8000708 <__NVIC_SetPriorityGrouping>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800088a:	f7ff ff61 	bl	8000750 <__NVIC_GetPriorityGrouping>
 800088e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	6978      	ldr	r0, [r7, #20]
 8000896:	f7ff ffb1 	bl	80007fc <NVIC_EncodePriority>
 800089a:	4602      	mov	r2, r0
 800089c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff80 	bl	80007a8 <__NVIC_SetPriority>
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff54 	bl	800076c <__NVIC_EnableIRQ>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008da:	e17f      	b.n	8000bdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	2101      	movs	r1, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 8171 	beq.w	8000bd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d005      	beq.n	800090c <HAL_GPIO_Init+0x40>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b02      	cmp	r3, #2
 800090a:	d130      	bne.n	800096e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000942:	2201      	movs	r2, #1
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	091b      	lsrs	r3, r3, #4
 8000958:	f003 0201 	and.w	r2, r3, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	2b03      	cmp	r3, #3
 8000978:	d118      	bne.n	80009ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000980:	2201      	movs	r2, #1
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d017      	beq.n	80009e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d123      	bne.n	8000a3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	691a      	ldr	r2, [r3, #16]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3208      	adds	r2, #8
 8000a36:	6939      	ldr	r1, [r7, #16]
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0203 	and.w	r2, r3, #3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 80ac 	beq.w	8000bd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a5e      	ldr	r2, [pc, #376]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b5c      	ldr	r3, [pc, #368]	; (8000bfc <HAL_GPIO_Init+0x330>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a96:	4a5a      	ldr	r2, [pc, #360]	; (8000c00 <HAL_GPIO_Init+0x334>)
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	220f      	movs	r2, #15
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac0:	d025      	beq.n	8000b0e <HAL_GPIO_Init+0x242>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <HAL_GPIO_Init+0x338>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d01f      	beq.n	8000b0a <HAL_GPIO_Init+0x23e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4e      	ldr	r2, [pc, #312]	; (8000c08 <HAL_GPIO_Init+0x33c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d019      	beq.n	8000b06 <HAL_GPIO_Init+0x23a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4d      	ldr	r2, [pc, #308]	; (8000c0c <HAL_GPIO_Init+0x340>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0x236>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <HAL_GPIO_Init+0x344>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d00d      	beq.n	8000afe <HAL_GPIO_Init+0x232>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <HAL_GPIO_Init+0x348>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d007      	beq.n	8000afa <HAL_GPIO_Init+0x22e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4a      	ldr	r2, [pc, #296]	; (8000c18 <HAL_GPIO_Init+0x34c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_GPIO_Init+0x22a>
 8000af2:	2306      	movs	r3, #6
 8000af4:	e00c      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000af6:	2307      	movs	r3, #7
 8000af8:	e00a      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000afa:	2305      	movs	r3, #5
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x244>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b20:	4937      	ldr	r1, [pc, #220]	; (8000c00 <HAL_GPIO_Init+0x334>)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b58:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b7c:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <HAL_GPIO_Init+0x350>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f47f ae78 	bne.w	80008dc <HAL_GPIO_Init+0x10>
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000800 	.word	0x48000800
 8000c0c:	48000c00 	.word	0x48000c00
 8000c10:	48001000 	.word	0x48001000
 8000c14:	48001400 	.word	0x48001400
 8000c18:	48001800 	.word	0x48001800
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c3c:	e002      	b.n	8000c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f806 	bl	8000c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc2:	d130      	bne.n	8000d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cd0:	d038      	beq.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2232      	movs	r2, #50	; 0x32
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf8:	e002      	b.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0c:	d102      	bne.n	8000d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f2      	bne.n	8000cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d20:	d110      	bne.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e00f      	b.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d32:	d007      	beq.n	8000d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d3c:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40007000 	.word	0x40007000
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	431bde83 	.word	0x431bde83

08000d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e3ca      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d72:	4b97      	ldr	r3, [pc, #604]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d7c:	4b94      	ldr	r3, [pc, #592]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 80e4 	beq.w	8000f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <HAL_RCC_OscConfig+0x4a>
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b0c      	cmp	r3, #12
 8000d9e:	f040 808b 	bne.w	8000eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f040 8087 	bne.w	8000eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000daa:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x62>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e3a2      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	4b82      	ldr	r3, [pc, #520]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <HAL_RCC_OscConfig+0x7c>
 8000dd2:	4b7f      	ldr	r3, [pc, #508]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dda:	e005      	b.n	8000de8 <HAL_RCC_OscConfig+0x88>
 8000ddc:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d223      	bcs.n	8000e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fd71 	bl	80018d8 <RCC_SetFlashLatencyFromMSIRange>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e383      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e00:	4b73      	ldr	r3, [pc, #460]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a72      	ldr	r2, [pc, #456]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	496d      	ldr	r1, [pc, #436]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1e:	4b6c      	ldr	r3, [pc, #432]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	4968      	ldr	r1, [pc, #416]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	604b      	str	r3, [r1, #4]
 8000e32:	e025      	b.n	8000e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e34:	4b66      	ldr	r3, [pc, #408]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a65      	ldr	r2, [pc, #404]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b63      	ldr	r3, [pc, #396]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4960      	ldr	r1, [pc, #384]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e52:	4b5f      	ldr	r3, [pc, #380]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	495b      	ldr	r1, [pc, #364]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d109      	bne.n	8000e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fd31 	bl	80018d8 <RCC_SetFlashLatencyFromMSIRange>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e343      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e80:	f000 fc4a 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b52      	ldr	r3, [pc, #328]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	4950      	ldr	r1, [pc, #320]	; (8000fd4 <HAL_RCC_OscConfig+0x274>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <HAL_RCC_OscConfig+0x278>)
 8000e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ea0:	4b4e      	ldr	r3, [pc, #312]	; (8000fdc <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb19 	bl	80004dc <HAL_InitTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d052      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	e327      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d032      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ec0:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a42      	ldr	r2, [pc, #264]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc10 	bl	80006f0 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc0c 	bl	80006f0 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e310      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a36      	ldr	r2, [pc, #216]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4931      	ldr	r1, [pc, #196]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
 8000f24:	e01a      	b.n	8000f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fbdd 	bl	80006f0 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fbd9 	bl	80006f0 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e2dd      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x1da>
 8000f58:	e000      	b.n	8000f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d074      	beq.n	8001052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d005      	beq.n	8000f7a <HAL_RCC_OscConfig+0x21a>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	d10e      	bne.n	8000f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d10b      	bne.n	8000f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d064      	beq.n	8001050 <HAL_RCC_OscConfig+0x2f0>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d160      	bne.n	8001050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e2ba      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x24a>
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e026      	b.n	8000ff8 <HAL_RCC_OscConfig+0x298>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb2:	d115      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x280>
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x298>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	080033d8 	.word	0x080033d8
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	4ba0      	ldr	r3, [pc, #640]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a9f      	ldr	r2, [pc, #636]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b9d      	ldr	r3, [pc, #628]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a9c      	ldr	r2, [pc, #624]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d013      	beq.n	8001028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fb76 	bl	80006f0 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fb72 	bl	80006f0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e276      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800101a:	4b92      	ldr	r3, [pc, #584]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x2a8>
 8001026:	e014      	b.n	8001052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001028:	f7ff fb62 	bl	80006f0 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fb5e 	bl	80006f0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e262      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001042:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x2d0>
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d060      	beq.n	8001120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x310>
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	2b0c      	cmp	r3, #12
 8001068:	d119      	bne.n	800109e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d116      	bne.n	800109e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001070:	4b7c      	ldr	r3, [pc, #496]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_OscConfig+0x328>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e23f      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001088:	4b76      	ldr	r3, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	4973      	ldr	r1, [pc, #460]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800109c:	e040      	b.n	8001120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d023      	beq.n	80010ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a6:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6e      	ldr	r2, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fb1d 	bl	80006f0 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fb19 	bl	80006f0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e21d      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010cc:	4b65      	ldr	r3, [pc, #404]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b62      	ldr	r3, [pc, #392]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	061b      	lsls	r3, r3, #24
 80010e6:	495f      	ldr	r1, [pc, #380]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
 80010ec:	e018      	b.n	8001120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80010f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fa:	f7ff faf9 	bl	80006f0 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff faf5 	bl	80006f0 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1f9      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d03c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d01c      	beq.n	800116e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001134:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800113a:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001144:	f7ff fad4 	bl	80006f0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fad0 	bl	80006f0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1d4      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0ef      	beq.n	800114c <HAL_RCC_OscConfig+0x3ec>
 800116c:	e01b      	b.n	80011a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001174:	4a3b      	ldr	r2, [pc, #236]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117e:	f7ff fab7 	bl	80006f0 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fab3 	bl	80006f0 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1b7      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 800119a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1ef      	bne.n	8001186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80a6 	beq.w	8001300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10d      	bne.n	80011e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ce:	6593      	str	r3, [r2, #88]	; 0x58
 80011d0:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80011d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011dc:	2301      	movs	r3, #1
 80011de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_RCC_OscConfig+0x508>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d118      	bne.n	800121e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_RCC_OscConfig+0x508>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_RCC_OscConfig+0x508>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fa7a 	bl	80006f0 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001200:	f7ff fa76 	bl	80006f0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e17a      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_RCC_OscConfig+0x508>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_RCC_OscConfig+0x4d8>
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001236:	e029      	b.n	800128c <HAL_RCC_OscConfig+0x52c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d115      	bne.n	800126c <HAL_RCC_OscConfig+0x50c>
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001256:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001260:	e014      	b.n	800128c <HAL_RCC_OscConfig+0x52c>
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	40007000 	.word	0x40007000
 800126c:	4b9c      	ldr	r3, [pc, #624]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 800126e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001272:	4a9b      	ldr	r2, [pc, #620]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800127c:	4b98      	ldr	r3, [pc, #608]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 800127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001282:	4a97      	ldr	r2, [pc, #604]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d016      	beq.n	80012c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fa2c 	bl	80006f0 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff fa28 	bl	80006f0 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e12a      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0ed      	beq.n	800129c <HAL_RCC_OscConfig+0x53c>
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fa15 	bl	80006f0 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fa11 	bl	80006f0 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e113      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012e0:	4b7f      	ldr	r3, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ed      	bne.n	80012ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ee:	7ffb      	ldrb	r3, [r7, #31]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a79      	ldr	r2, [pc, #484]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80012fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80fe 	beq.w	8001506 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	2b02      	cmp	r3, #2
 8001310:	f040 80d0 	bne.w	80014b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001314:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	429a      	cmp	r2, r3
 8001326:	d130      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	3b01      	subs	r3, #1
 8001334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d127      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d11f      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001354:	2a07      	cmp	r2, #7
 8001356:	bf14      	ite	ne
 8001358:	2201      	movne	r2, #1
 800135a:	2200      	moveq	r2, #0
 800135c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135e:	4293      	cmp	r3, r2
 8001360:	d113      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	3b01      	subs	r3, #1
 8001370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d109      	bne.n	800138a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	3b01      	subs	r3, #1
 8001384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d06e      	beq.n	8001468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d069      	beq.n	8001464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d105      	bne.n	80013a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0ad      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013ac:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a4b      	ldr	r2, [pc, #300]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013b8:	f7ff f99a 	bl	80006f0 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff f996 	bl	80006f0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e09a      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <HAL_RCC_OscConfig+0x784>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013ee:	3a01      	subs	r2, #1
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	4311      	orrs	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013f8:	0212      	lsls	r2, r2, #8
 80013fa:	4311      	orrs	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001400:	0852      	lsrs	r2, r2, #1
 8001402:	3a01      	subs	r2, #1
 8001404:	0552      	lsls	r2, r2, #21
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140c:	0852      	lsrs	r2, r2, #1
 800140e:	3a01      	subs	r2, #1
 8001410:	0652      	lsls	r2, r2, #25
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001418:	0912      	lsrs	r2, r2, #4
 800141a:	0452      	lsls	r2, r2, #17
 800141c:	430a      	orrs	r2, r1
 800141e:	4930      	ldr	r1, [pc, #192]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a2d      	ldr	r2, [pc, #180]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a2a      	ldr	r2, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800143a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800143c:	f7ff f958 	bl	80006f0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff f954 	bl	80006f0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e058      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001462:	e050      	b.n	8001506 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e04f      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d148      	bne.n	8001506 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800148c:	f7ff f930 	bl	80006f0 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff f92c 	bl	80006f0 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e030      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x734>
 80014b2:	e028      	b.n	8001506 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d023      	beq.n	8001502 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_RCC_OscConfig+0x780>)
 80014c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff f913 	bl	80006f0 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014cc:	e00c      	b.n	80014e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f90f 	bl	80006f0 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d905      	bls.n	80014e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
 80014e0:	40021000 	.word	0x40021000
 80014e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x7b0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ec      	bne.n	80014ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x7b0>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4905      	ldr	r1, [pc, #20]	; (8001510 <HAL_RCC_OscConfig+0x7b0>)
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x7b4>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
 8001500:	e001      	b.n	8001506 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	feeefffc 	.word	0xfeeefffc

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0e7      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b75      	ldr	r3, [pc, #468]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d910      	bls.n	800155c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b72      	ldr	r3, [pc, #456]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	4970      	ldr	r1, [pc, #448]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b6e      	ldr	r3, [pc, #440]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0cf      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d010      	beq.n	800158a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001574:	429a      	cmp	r2, r3
 8001576:	d908      	bls.n	800158a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4960      	ldr	r1, [pc, #384]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04c      	beq.n	8001630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d121      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0a6      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d115      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e09a      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ce:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e08e      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e086      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f023 0203 	bic.w	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4943      	ldr	r1, [pc, #268]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001600:	f7ff f876 	bl	80006f0 <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	e00a      	b.n	800161e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff f872 	bl	80006f0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e06e      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	429a      	cmp	r2, r3
 800162e:	d1eb      	bne.n	8001608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d010      	beq.n	800165e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001648:	429a      	cmp	r2, r3
 800164a:	d208      	bcs.n	800165e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	492b      	ldr	r1, [pc, #172]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d210      	bcs.n	800168e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 0207 	bic.w	r2, r3, #7
 8001674:	4923      	ldr	r1, [pc, #140]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_ClockConfig+0x1ec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e036      	b.n	80016fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4918      	ldr	r1, [pc, #96]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4910      	ldr	r1, [pc, #64]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016cc:	f000 f824 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	490b      	ldr	r1, [pc, #44]	; (800170c <HAL_RCC_ClockConfig+0x1f4>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1f8>)
 80016ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1fc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fef3 	bl	80004dc <HAL_InitTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80016fa:	7afb      	ldrb	r3, [r7, #11]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40022000 	.word	0x40022000
 8001708:	40021000 	.word	0x40021000
 800170c:	080033d8 	.word	0x080033d8
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001730:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d121      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d11e      	bne.n	800178a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e005      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001774:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d102      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_RCC_GetSysClockFreq+0x110>)
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	e004      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b08      	cmp	r3, #8
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_RCC_GetSysClockFreq+0x114>)
 800179e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d134      	bne.n	8001810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d003      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0xa6>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d003      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0xac>
 80017bc:	e005      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_RCC_GetSysClockFreq+0x110>)
 80017c0:	617b      	str	r3, [r7, #20]
      break;
 80017c2:	e005      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_GetSysClockFreq+0x114>)
 80017c6:	617b      	str	r3, [r7, #20]
      break;
 80017c8:	e002      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	617b      	str	r3, [r7, #20]
      break;
 80017ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	3301      	adds	r3, #1
 80017dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	0a1b      	lsrs	r3, r3, #8
 80017e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	fb03 f202 	mul.w	r2, r3, r2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	0e5b      	lsrs	r3, r3, #25
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	3301      	adds	r3, #1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001810:	69bb      	ldr	r3, [r7, #24]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	080033f0 	.word	0x080033f0
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200

08001830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_RCC_GetHCLKFreq+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000000 	.word	0x20000000

08001848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800184c:	f7ff fff0 	bl	8001830 <HAL_RCC_GetHCLKFreq>
 8001850:	4602      	mov	r2, r0
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800185e:	5ccb      	ldrb	r3, [r1, r3]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	080033e8 	.word	0x080033e8

08001874 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	220f      	movs	r2, #15
 8001882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_GetClockConfig+0x5c>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	08db      	lsrs	r3, r3, #3
 80018ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_RCC_GetClockConfig+0x60>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0207 	and.w	r2, r3, #7
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	601a      	str	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40022000 	.word	0x40022000

080018d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018f0:	f7ff f9d2 	bl	8000c98 <HAL_PWREx_GetVoltageRange>
 80018f4:	6178      	str	r0, [r7, #20]
 80018f6:	e014      	b.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	; 0x58
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001910:	f7ff f9c2 	bl	8000c98 <HAL_PWREx_GetVoltageRange>
 8001914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001928:	d10b      	bne.n	8001942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b80      	cmp	r3, #128	; 0x80
 800192e:	d919      	bls.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2ba0      	cmp	r3, #160	; 0xa0
 8001934:	d902      	bls.n	800193c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	e013      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e010      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b80      	cmp	r3, #128	; 0x80
 8001946:	d902      	bls.n	800194e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	e00a      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d102      	bne.n	800195a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e004      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b70      	cmp	r3, #112	; 0x70
 800195e:	d101      	bne.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 0207 	bic.w	r2, r3, #7
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e049      	b.n	8001a3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f841 	bl	8001a46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3304      	adds	r3, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f000 f9f8 	bl	8001dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d001      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e04f      	b.n	8001b14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01d      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x76>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9e:	d018      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x76>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x76>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x76>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d009      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x76>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x76>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d115      	bne.n	8001afe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d015      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0xb4>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d011      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afc:	e008      	b.n	8001b10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e000      	b.n	8001b12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40013400 	.word	0x40013400
 8001b34:	40014000 	.word	0x40014000
 8001b38:	00010007 	.word	0x00010007

08001b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d122      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d11b      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0202 	mvn.w	r2, #2
 8001b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f905 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 8001b84:	e005      	b.n	8001b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8f7 	bl	8001d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f908 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d122      	bne.n	8001bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d11b      	bne.n	8001bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0204 	mvn.w	r2, #4
 8001bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8db 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 8001bd8:	e005      	b.n	8001be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8cd 	bl	8001d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8de 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0208 	mvn.w	r2, #8
 8001c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8b1 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8a3 	bl	8001d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8b4 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0210 	mvn.w	r2, #16
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f887 	bl	8001d8e <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f879 	bl	8001d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f88a 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0201 	mvn.w	r2, #1
 8001cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fbd2 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b80      	cmp	r3, #128	; 0x80
 8001ccc:	d10e      	bne.n	8001cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d107      	bne.n	8001cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f914 	bl	8001f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfa:	d10e      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d107      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f907 	bl	8001f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d10e      	bne.n	8001d46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d107      	bne.n	8001d46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f838 	bl	8001db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d10e      	bne.n	8001d72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d107      	bne.n	8001d72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f06f 0220 	mvn.w	r2, #32
 8001d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8c7 	bl	8001f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a40      	ldr	r2, [pc, #256]	; (8001ee0 <TIM_Base_SetConfig+0x114>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <TIM_Base_SetConfig+0x40>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d00f      	beq.n	8001e0c <TIM_Base_SetConfig+0x40>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a3d      	ldr	r2, [pc, #244]	; (8001ee4 <TIM_Base_SetConfig+0x118>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00b      	beq.n	8001e0c <TIM_Base_SetConfig+0x40>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a3c      	ldr	r2, [pc, #240]	; (8001ee8 <TIM_Base_SetConfig+0x11c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d007      	beq.n	8001e0c <TIM_Base_SetConfig+0x40>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3b      	ldr	r2, [pc, #236]	; (8001eec <TIM_Base_SetConfig+0x120>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d003      	beq.n	8001e0c <TIM_Base_SetConfig+0x40>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <TIM_Base_SetConfig+0x124>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d108      	bne.n	8001e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <TIM_Base_SetConfig+0x114>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01f      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d01b      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <TIM_Base_SetConfig+0x118>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d017      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <TIM_Base_SetConfig+0x11c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <TIM_Base_SetConfig+0x120>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00f      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <TIM_Base_SetConfig+0x124>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00b      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <TIM_Base_SetConfig+0x128>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <TIM_Base_SetConfig+0x12c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d003      	beq.n	8001e66 <TIM_Base_SetConfig+0x9a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a26      	ldr	r2, [pc, #152]	; (8001efc <TIM_Base_SetConfig+0x130>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d108      	bne.n	8001e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <TIM_Base_SetConfig+0x114>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00f      	beq.n	8001ec4 <TIM_Base_SetConfig+0xf8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <TIM_Base_SetConfig+0x124>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00b      	beq.n	8001ec4 <TIM_Base_SetConfig+0xf8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <TIM_Base_SetConfig+0x128>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <TIM_Base_SetConfig+0xf8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <TIM_Base_SetConfig+0x12c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <TIM_Base_SetConfig+0xf8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <TIM_Base_SetConfig+0x130>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d103      	bne.n	8001ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	615a      	str	r2, [r3, #20]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	40013400 	.word	0x40013400
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40014400 	.word	0x40014400
 8001efc:	40014800 	.word	0x40014800

08001f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6892      	ldr	r2, [r2, #8]
 8001f9a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6852      	ldr	r2, [r2, #4]
 8001fa4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d103      	bne.n	8001fb8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <prvTaskIsTaskSuspended+0x40>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10a      	bne.n	8002008 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <prvTaskIsTaskSuspended+0x44>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d005      	beq.n	8002008 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8002004:	2301      	movs	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002008:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000100 	.word	0x20000100
 800201c:	200000ec 	.word	0x200000ec

08002020 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
        TCB_t * const pxTCB = xTaskToResume;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	61bb      	str	r3, [r7, #24]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002030:	f3ef 8211 	mrs	r2, BASEPRI
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	613a      	str	r2, [r7, #16]
 8002046:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002048:	693b      	ldr	r3, [r7, #16]
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800204a:	617b      	str	r3, [r7, #20]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800204c:	69b8      	ldr	r0, [r7, #24]
 800204e:	f7ff ffc3 	bl	8001fd8 <prvTaskIsTaskSuspended>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03f      	beq.n	80020d8 <xTaskResumeFromISR+0xb8>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 f87e 	bl	800315c <SEGGER_SYSVIEW_ShrinkId>
 8002060:	4603      	mov	r3, r0
 8002062:	4619      	mov	r1, r3
 8002064:	202b      	movs	r0, #43	; 0x2b
 8002066:	f000 fd09 	bl	8002a7c <SEGGER_SYSVIEW_RecordU32>

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <xTaskResumeFromISR+0xd0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d12c      	bne.n	80020cc <xTaskResumeFromISR+0xac>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <xTaskResumeFromISR+0xd4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	429a      	cmp	r2, r3
 800207e:	d304      	bcc.n	800208a <xTaskResumeFromISR+0x6a>
                    {
                        xYieldRequired = pdTRUE;
 8002080:	2301      	movs	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <xTaskResumeFromISR+0xd8>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3304      	adds	r3, #4
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff78 	bl	8001f84 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4618      	mov	r0, r3
 8002098:	f001 f81e 	bl	80030d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2201      	movs	r2, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <xTaskResumeFromISR+0xdc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <xTaskResumeFromISR+0xdc>)
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <xTaskResumeFromISR+0xe0>)
 80020bc:	441a      	add	r2, r3
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	3304      	adds	r3, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f7ff ff39 	bl	8001f3c <vListInsertEnd>
 80020ca:	e005      	b.n	80020d8 <xTaskResumeFromISR+0xb8>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3318      	adds	r3, #24
 80020d0:	4619      	mov	r1, r3
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <xTaskResumeFromISR+0xe4>)
 80020d4:	f7ff ff32 	bl	8001f3c <vListInsertEnd>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80020e2:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 80020e4:	69fb      	ldr	r3, [r7, #28]
    }
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000130 	.word	0x20000130
 80020f4:	2000007c 	.word	0x2000007c
 80020f8:	20000120 	.word	0x20000120
 80020fc:	20000118 	.word	0x20000118
 8002100:	20000080 	.word	0x20000080
 8002104:	200000ec 	.word	0x200000ec

08002108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <xTaskIncrementTick+0x12c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8082 	bne.w	8002220 <xTaskIncrementTick+0x118>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <xTaskIncrementTick+0x130>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002124:	4a44      	ldr	r2, [pc, #272]	; (8002238 <xTaskIncrementTick+0x130>)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d110      	bne.n	8002152 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <xTaskIncrementTick+0x134>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <xTaskIncrementTick+0x138>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <xTaskIncrementTick+0x134>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4a40      	ldr	r2, [pc, #256]	; (8002240 <xTaskIncrementTick+0x138>)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <xTaskIncrementTick+0x13c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <xTaskIncrementTick+0x13c>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	f000 f8db 	bl	8002308 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <xTaskIncrementTick+0x140>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d34c      	bcc.n	80021f6 <xTaskIncrementTick+0xee>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <xTaskIncrementTick+0x134>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <xTaskIncrementTick+0x68>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <xTaskIncrementTick+0x140>)
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	601a      	str	r2, [r3, #0]
                    break;
 800216e:	e042      	b.n	80021f6 <xTaskIncrementTick+0xee>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <xTaskIncrementTick+0x134>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d203      	bcs.n	8002190 <xTaskIncrementTick+0x88>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <xTaskIncrementTick+0x140>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800218e:	e032      	b.n	80021f6 <xTaskIncrementTick+0xee>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3304      	adds	r3, #4
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fef5 	bl	8001f84 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <xTaskIncrementTick+0xa4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3318      	adds	r3, #24
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff feec 	bl	8001f84 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 ff92 	bl	80030d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	2201      	movs	r2, #1
 80021ba:	409a      	lsls	r2, r3
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <xTaskIncrementTick+0x144>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <xTaskIncrementTick+0x144>)
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <xTaskIncrementTick+0x148>)
 80021d4:	441a      	add	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f7ff fead 	bl	8001f3c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <xTaskIncrementTick+0x14c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d3b5      	bcc.n	800215c <xTaskIncrementTick+0x54>
                            {
                                xSwitchRequired = pdTRUE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f4:	e7b2      	b.n	800215c <xTaskIncrementTick+0x54>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <xTaskIncrementTick+0x14c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	4914      	ldr	r1, [pc, #80]	; (8002250 <xTaskIncrementTick+0x148>)
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d901      	bls.n	8002212 <xTaskIncrementTick+0x10a>
                {
                    xSwitchRequired = pdTRUE;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <xTaskIncrementTick+0x150>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e004      	b.n	800222a <xTaskIncrementTick+0x122>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <xTaskIncrementTick+0x154>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	4a0d      	ldr	r2, [pc, #52]	; (800225c <xTaskIncrementTick+0x154>)
 8002228:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800222a:	697b      	ldr	r3, [r7, #20]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000130 	.word	0x20000130
 8002238:	20000114 	.word	0x20000114
 800223c:	200000e4 	.word	0x200000e4
 8002240:	200000e8 	.word	0x200000e8
 8002244:	20000124 	.word	0x20000124
 8002248:	20000128 	.word	0x20000128
 800224c:	20000118 	.word	0x20000118
 8002250:	20000080 	.word	0x20000080
 8002254:	2000007c 	.word	0x2000007c
 8002258:	20000120 	.word	0x20000120
 800225c:	2000011c 	.word	0x2000011c

08002260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <vTaskSwitchContext+0x90>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <vTaskSwitchContext+0x94>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002274:	e038      	b.n	80022e8 <vTaskSwitchContext+0x88>
        xYieldPending = pdFALSE;
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <vTaskSwitchContext+0x94>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <vTaskSwitchContext+0x98>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	f1c3 031f 	rsb	r3, r3, #31
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <vTaskSwitchContext+0x9c>)
 800229e:	4413      	add	r3, r2
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3308      	adds	r3, #8
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d104      	bne.n	80022c2 <vTaskSwitchContext+0x62>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <vTaskSwitchContext+0xa0>)
 80022ca:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <vTaskSwitchContext+0xa0>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <vTaskSwitchContext+0xa4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d102      	bne.n	80022de <vTaskSwitchContext+0x7e>
 80022d8:	f000 fea0 	bl	800301c <SEGGER_SYSVIEW_OnIdle>
}
 80022dc:	e004      	b.n	80022e8 <vTaskSwitchContext+0x88>
        traceTASK_SWITCHED_IN();
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <vTaskSwitchContext+0xa0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 feb6 	bl	8003054 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000130 	.word	0x20000130
 80022f4:	20000120 	.word	0x20000120
 80022f8:	20000118 	.word	0x20000118
 80022fc:	20000080 	.word	0x20000080
 8002300:	2000007c 	.word	0x2000007c
 8002304:	2000012c 	.word	0x2000012c

08002308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <prvResetNextTaskUnblockTime+0x30>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <prvResetNextTaskUnblockTime+0x34>)
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800231e:	e005      	b.n	800232c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <prvResetNextTaskUnblockTime+0x30>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <prvResetNextTaskUnblockTime+0x34>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200000e4 	.word	0x200000e4
 800233c:	20000128 	.word	0x20000128

08002340 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <pxCurrentTCBConst2>)
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	6808      	ldr	r0, [r1, #0]
 8002346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800234a:	f380 8809 	msr	PSP, r0
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f380 8811 	msr	BASEPRI, r0
 800235a:	4770      	bx	lr
 800235c:	f3af 8000 	nop.w

08002360 <pxCurrentTCBConst2>:
 8002360:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop

08002368 <vInitPrioGroupValue>:
}
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002380:	f3ef 8009 	mrs	r0, PSP
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <pxCurrentTCBConst>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f01e 0f10 	tst.w	lr, #16
 8002390:	bf08      	it	eq
 8002392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239a:	6010      	str	r0, [r2, #0]
 800239c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80023a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80023a4:	f380 8811 	msr	BASEPRI, r0
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f7ff ff56 	bl	8002260 <vTaskSwitchContext>
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	f380 8811 	msr	BASEPRI, r0
 80023bc:	bc09      	pop	{r0, r3}
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	6808      	ldr	r0, [r1, #0]
 80023c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c6:	f01e 0f10 	tst.w	lr, #16
 80023ca:	bf08      	it	eq
 80023cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80023d0:	f380 8809 	msr	PSP, r0
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	f3af 8000 	nop.w

080023e0 <pxCurrentTCBConst>:
 80023e0:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop

080023e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	607b      	str	r3, [r7, #4]
    }
 8002400:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002402:	f000 fd91 	bl	8002f28 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002406:	f7ff fe7f 	bl	8002108 <xTaskIncrementTick>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002410:	f000 fde8 	bl	8002fe4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <SysTick_Handler+0x50>)
 8002416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e001      	b.n	8002422 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800241e:	f000 fdc5 	bl	8002fac <SEGGER_SYSVIEW_RecordExitISR>
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f383 8811 	msr	BASEPRI, r3
    }
 800242c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000ed04 	.word	0xe000ed04

0800243c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <_DoInit+0x98>)
 8002444:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <_DoInit+0x9c>)
 8002456:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a20      	ldr	r2, [pc, #128]	; (80024dc <_DoInit+0xa0>)
 800245c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002464:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <_DoInit+0x9c>)
 800247c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <_DoInit+0xa4>)
 8002482:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2210      	movs	r2, #16
 8002488:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3307      	adds	r3, #7
 80024a0:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <_DoInit+0xa8>)
 80024a2:	6810      	ldr	r0, [r2, #0]
 80024a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80024a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <_DoInit+0xac>)
 80024ae:	6810      	ldr	r0, [r2, #0]
 80024b0:	6018      	str	r0, [r3, #0]
 80024b2:	8891      	ldrh	r1, [r2, #4]
 80024b4:	7992      	ldrb	r2, [r2, #6]
 80024b6:	8099      	strh	r1, [r3, #4]
 80024b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80024ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80024c4:	f3bf 8f5f 	dmb	sy
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000134 	.word	0x20000134
 80024d8:	080033c0 	.word	0x080033c0
 80024dc:	200001dc 	.word	0x200001dc
 80024e0:	200005dc 	.word	0x200005dc
 80024e4:	080033cc 	.word	0x080033cc
 80024e8:	080033d0 	.word	0x080033d0

080024ec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80024f8:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <SEGGER_RTT_ReadNoLock+0x108>)
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <SEGGER_RTT_ReadNoLock+0x1e>
 8002506:	f7ff ff99 	bl	800243c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	3360      	adds	r3, #96	; 0x60
 8002516:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8002518:	4413      	add	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	429a      	cmp	r2, r3
 8002536:	d92b      	bls.n	8002590 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4293      	cmp	r3, r2
 8002548:	bf28      	it	cs
 800254a:	4613      	movcs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	4413      	add	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6939      	ldr	r1, [r7, #16]
 800255c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255e:	f000 ff0d 	bl	800337c <memcpy>
    NumBytesRead += NumBytesRem;
 8002562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	4413      	add	r3, r2
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4413      	add	r3, r2
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800257a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4413      	add	r3, r2
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002588:	429a      	cmp	r2, r3
 800258a:	d101      	bne.n	8002590 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4293      	cmp	r3, r2
 800259e:	bf28      	it	cs
 80025a0:	4613      	movcs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d019      	beq.n	80025de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	4413      	add	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6939      	ldr	r1, [r7, #16]
 80025b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025ba:	f000 fedf 	bl	800337c <memcpy>
    NumBytesRead += NumBytesRem;
 80025be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	4413      	add	r3, r2
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80025c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4413      	add	r3, r2
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80025d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3730      	adds	r7, #48	; 0x30
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000134 	.word	0x20000134

080025f8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002608:	e002      	b.n	8002610 <_EncodeStr+0x18>
    Len++;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	3301      	adds	r3, #1
 800260e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f6      	bne.n	800260a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d901      	bls.n	8002628 <_EncodeStr+0x30>
    Len = Limit;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2bfe      	cmp	r3, #254	; 0xfe
 800262c:	d806      	bhi.n	800263c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e011      	b.n	8002660 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60fa      	str	r2, [r7, #12]
 8002642:	22ff      	movs	r2, #255	; 0xff
 8002644:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	0a19      	lsrs	r1, r3, #8
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	b2ca      	uxtb	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002664:	e00a      	b.n	800267c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	1c53      	adds	r3, r2, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	60f9      	str	r1, [r7, #12]
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	701a      	strb	r2, [r3, #0]
    n++;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d3f0      	bcc.n	8002666 <_EncodeStr+0x6e>
  }
  return pPayload;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	4618      	mov	r0, r3
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80026b2:	4b36      	ldr	r3, [pc, #216]	; (800278c <_HandleIncomingPacket+0xe0>)
 80026b4:	7e1b      	ldrb	r3, [r3, #24]
 80026b6:	4618      	mov	r0, r3
 80026b8:	1cfb      	adds	r3, r7, #3
 80026ba:	2201      	movs	r2, #1
 80026bc:	4619      	mov	r1, r3
 80026be:	f7ff ff15 	bl	80024ec <SEGGER_RTT_ReadNoLock>
 80026c2:	4603      	mov	r3, r0
 80026c4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dd54      	ble.n	8002776 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2b80      	cmp	r3, #128	; 0x80
 80026d0:	d032      	beq.n	8002738 <_HandleIncomingPacket+0x8c>
 80026d2:	2b80      	cmp	r3, #128	; 0x80
 80026d4:	dc42      	bgt.n	800275c <_HandleIncomingPacket+0xb0>
 80026d6:	2b07      	cmp	r3, #7
 80026d8:	dc16      	bgt.n	8002708 <_HandleIncomingPacket+0x5c>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	dd3e      	ble.n	800275c <_HandleIncomingPacket+0xb0>
 80026de:	3b01      	subs	r3, #1
 80026e0:	2b06      	cmp	r3, #6
 80026e2:	d83b      	bhi.n	800275c <_HandleIncomingPacket+0xb0>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <_HandleIncomingPacket+0x40>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	0800270f 	.word	0x0800270f
 80026f0:	08002715 	.word	0x08002715
 80026f4:	0800271b 	.word	0x0800271b
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002727 	.word	0x08002727
 8002700:	0800272d 	.word	0x0800272d
 8002704:	08002733 	.word	0x08002733
 8002708:	2b7f      	cmp	r3, #127	; 0x7f
 800270a:	d036      	beq.n	800277a <_HandleIncomingPacket+0xce>
 800270c:	e026      	b.n	800275c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800270e:	f000 fa4b 	bl	8002ba8 <SEGGER_SYSVIEW_Start>
      break;
 8002712:	e037      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002714:	f000 fb02 	bl	8002d1c <SEGGER_SYSVIEW_Stop>
      break;
 8002718:	e034      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800271a:	f000 fbd3 	bl	8002ec4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800271e:	e031      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002720:	f000 fbbc 	bl	8002e9c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002724:	e02e      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002726:	f000 fb1f 	bl	8002d68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800272a:	e02b      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800272c:	f000 fdc4 	bl	80032b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002730:	e028      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002732:	f000 fda3 	bl	800327c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002736:	e025      	b.n	8002784 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <_HandleIncomingPacket+0xe0>)
 800273a:	7e1b      	ldrb	r3, [r3, #24]
 800273c:	4618      	mov	r0, r3
 800273e:	1cfb      	adds	r3, r7, #3
 8002740:	2201      	movs	r2, #1
 8002742:	4619      	mov	r1, r3
 8002744:	f7ff fed2 	bl	80024ec <SEGGER_RTT_ReadNoLock>
 8002748:	4603      	mov	r3, r0
 800274a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	dd15      	ble.n	800277e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fd11 	bl	800317c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800275a:	e010      	b.n	800277e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	b25b      	sxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	da0e      	bge.n	8002782 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <_HandleIncomingPacket+0xe0>)
 8002766:	7e1b      	ldrb	r3, [r3, #24]
 8002768:	4618      	mov	r0, r3
 800276a:	1cfb      	adds	r3, r7, #3
 800276c:	2201      	movs	r2, #1
 800276e:	4619      	mov	r1, r3
 8002770:	f7ff febc 	bl	80024ec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002774:	e005      	b.n	8002782 <_HandleIncomingPacket+0xd6>
    }
  }
 8002776:	bf00      	nop
 8002778:	e004      	b.n	8002784 <_HandleIncomingPacket+0xd8>
      break;
 800277a:	bf00      	nop
 800277c:	e002      	b.n	8002784 <_HandleIncomingPacket+0xd8>
      break;
 800277e:	bf00      	nop
 8002780:	e000      	b.n	8002784 <_HandleIncomingPacket+0xd8>
      break;
 8002782:	bf00      	nop
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200005ec 	.word	0x200005ec

08002790 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002796:	2301      	movs	r3, #1
 8002798:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	3301      	adds	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	4b31      	ldr	r3, [pc, #196]	; (800286c <_TrySendOverflowPacket+0xdc>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027aa:	e00b      	b.n	80027c4 <_TrySendOverflowPacket+0x34>
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	1c59      	adds	r1, r3, #1
 80027b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	09db      	lsrs	r3, r3, #7
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	2b7f      	cmp	r3, #127	; 0x7f
 80027c8:	d8f0      	bhi.n	80027ac <_TrySendOverflowPacket+0x1c>
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <_TrySendOverflowPacket+0xe0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <_TrySendOverflowPacket+0xdc>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	e00b      	b.n	800280c <_TrySendOverflowPacket+0x7c>
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	6279      	str	r1, [r7, #36]	; 0x24
 80027fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	09db      	lsrs	r3, r3, #7
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b7f      	cmp	r3, #127	; 0x7f
 8002810:	d8f0      	bhi.n	80027f4 <_TrySendOverflowPacket+0x64>
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	627a      	str	r2, [r7, #36]	; 0x24
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <_TrySendOverflowPacket+0xdc>)
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	4618      	mov	r0, r3
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	461a      	mov	r2, r3
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	4619      	mov	r1, r3
 8002834:	f7fd fccc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002838:	4603      	mov	r3, r0
 800283a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <_TrySendOverflowPacket+0xdc>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <_TrySendOverflowPacket+0xdc>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <_TrySendOverflowPacket+0xdc>)
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e004      	b.n	8002860 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <_TrySendOverflowPacket+0xdc>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	3301      	adds	r3, #1
 800285c:	4a03      	ldr	r2, [pc, #12]	; (800286c <_TrySendOverflowPacket+0xdc>)
 800285e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002860:	693b      	ldr	r3, [r7, #16]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3730      	adds	r7, #48	; 0x30
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200005ec 	.word	0x200005ec
 8002870:	e0001004 	.word	0xe0001004

08002874 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002880:	4b6c      	ldr	r3, [pc, #432]	; (8002a34 <_SendPacket+0x1c0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d010      	beq.n	80028aa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002888:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <_SendPacket+0x1c0>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a3 	beq.w	80029d8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002892:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <_SendPacket+0x1c0>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d109      	bne.n	80028ae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800289a:	f7ff ff79 	bl	8002790 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <_SendPacket+0x1c0>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 809a 	bne.w	80029dc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80028a8:	e001      	b.n	80028ae <_SendPacket+0x3a>
    goto Send;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <_SendPacket+0x3c>
Send:
 80028ae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b1f      	cmp	r3, #31
 80028b4:	d809      	bhi.n	80028ca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80028b6:	4b5f      	ldr	r3, [pc, #380]	; (8002a34 <_SendPacket+0x1c0>)
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 808b 	bne.w	80029e0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b17      	cmp	r3, #23
 80028ce:	d807      	bhi.n	80028e0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e03d      	b.n	800295c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b7f      	cmp	r3, #127	; 0x7f
 80028ec:	d912      	bls.n	8002914 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	09da      	lsrs	r2, r3, #7
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	3a01      	subs	r2, #1
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e006      	b.n	8002922 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3b01      	subs	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b7f      	cmp	r3, #127	; 0x7f
 8002926:	d912      	bls.n	800294e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	09da      	lsrs	r2, r3, #7
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3b01      	subs	r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	3a01      	subs	r2, #1
 8002940:	60fa      	str	r2, [r7, #12]
 8002942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e006      	b.n	800295c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3b01      	subs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <_SendPacket+0x1c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002962:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <_SendPacket+0x1c0>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	e00b      	b.n	800298e <_SendPacket+0x11a>
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	1c59      	adds	r1, r3, #1
 800297e:	6279      	str	r1, [r7, #36]	; 0x24
 8002980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	09db      	lsrs	r3, r3, #7
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2b7f      	cmp	r3, #127	; 0x7f
 8002992:	d8f0      	bhi.n	8002976 <_SendPacket+0x102>
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	627a      	str	r2, [r7, #36]	; 0x24
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80029a4:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <_SendPacket+0x1c0>)
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	4618      	mov	r0, r3
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	f7fd fc0c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80029b8:	4603      	mov	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <_SendPacket+0x1c0>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	60d3      	str	r3, [r2, #12]
 80029c8:	e00b      	b.n	80029e2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <_SendPacket+0x1c0>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <_SendPacket+0x1c0>)
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e004      	b.n	80029e2 <_SendPacket+0x16e>
    goto SendDone;
 80029d8:	bf00      	nop
 80029da:	e002      	b.n	80029e2 <_SendPacket+0x16e>
      goto SendDone;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <_SendPacket+0x16e>
      goto SendDone;
 80029e0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <_SendPacket+0x1c0>)
 80029e4:	7e1b      	ldrb	r3, [r3, #24]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <_SendPacket+0x1c8>)
 80029ea:	460b      	mov	r3, r1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	336c      	adds	r3, #108	; 0x6c
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <_SendPacket+0x1c0>)
 80029fa:	7e1b      	ldrb	r3, [r3, #24]
 80029fc:	4618      	mov	r0, r3
 80029fe:	490f      	ldr	r1, [pc, #60]	; (8002a3c <_SendPacket+0x1c8>)
 8002a00:	4603      	mov	r3, r0
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4403      	add	r3, r0
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3370      	adds	r3, #112	; 0x70
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d00b      	beq.n	8002a2a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_SendPacket+0x1c0>)
 8002a14:	789b      	ldrb	r3, [r3, #2]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <_SendPacket+0x1c0>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a20:	f7ff fe44 	bl	80026ac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <_SendPacket+0x1c0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200005ec 	.word	0x200005ec
 8002a38:	e0001004 	.word	0xe0001004
 8002a3c:	20000134 	.word	0x20000134

08002a40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002a48:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4c:	f04f 0120 	mov.w	r1, #32
 8002a50:	f381 8811 	msr	BASEPRI, r1
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4808      	ldr	r0, [pc, #32]	; (8002a78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002a58:	f7ff fe1b 	bl	8002692 <_PreparePacket>
 8002a5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68b8      	ldr	r0, [r7, #8]
 8002a64:	f7ff ff06 	bl	8002874 <_SendPacket>
  RECORD_END();
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f383 8811 	msr	BASEPRI, r3
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000061c 	.word	0x2000061c

08002a7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002a86:	f3ef 8311 	mrs	r3, BASEPRI
 8002a8a:	f04f 0120 	mov.w	r1, #32
 8002a8e:	f381 8811 	msr	BASEPRI, r1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	4816      	ldr	r0, [pc, #88]	; (8002af0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002a96:	f7ff fdfc 	bl	8002692 <_PreparePacket>
 8002a9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e00b      	b.n	8002ac2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	1c59      	adds	r1, r3, #1
 8002ab2:	61f9      	str	r1, [r7, #28]
 8002ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	09db      	lsrs	r3, r3, #7
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac6:	d8f0      	bhi.n	8002aaa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	61fa      	str	r2, [r7, #28]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	6938      	ldr	r0, [r7, #16]
 8002ade:	f7ff fec9 	bl	8002874 <_SendPacket>
  RECORD_END();
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f383 8811 	msr	BASEPRI, r3
}
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	2000061c 	.word	0x2000061c

08002af4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002b00:	f3ef 8311 	mrs	r3, BASEPRI
 8002b04:	f04f 0120 	mov.w	r1, #32
 8002b08:	f381 8811 	msr	BASEPRI, r1
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	4825      	ldr	r0, [pc, #148]	; (8002ba4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002b10:	f7ff fdbf 	bl	8002692 <_PreparePacket>
 8002b14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b22:	e00b      	b.n	8002b3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	1c59      	adds	r1, r3, #1
 8002b2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	09db      	lsrs	r3, r3, #7
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b40:	d8f0      	bhi.n	8002b24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	e00b      	b.n	8002b74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	6279      	str	r1, [r7, #36]	; 0x24
 8002b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	09db      	lsrs	r3, r3, #7
 8002b72:	623b      	str	r3, [r7, #32]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	2b7f      	cmp	r3, #127	; 0x7f
 8002b78:	d8f0      	bhi.n	8002b5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	69b8      	ldr	r0, [r7, #24]
 8002b90:	f7ff fe70 	bl	8002874 <_SendPacket>
  RECORD_END();
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f383 8811 	msr	BASEPRI, r3
}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000061c 	.word	0x2000061c

08002ba8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8002bae:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8002bb8:	f04f 0120 	mov.w	r1, #32
 8002bbc:	f381 8811 	msr	BASEPRI, r1
 8002bc0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	220a      	movs	r2, #10
 8002bc8:	4952      	ldr	r1, [pc, #328]	; (8002d14 <SEGGER_SYSVIEW_Start+0x16c>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fb00 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002bd6:	200a      	movs	r0, #10
 8002bd8:	f7ff ff32 	bl	8002a40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8002be0:	f04f 0120 	mov.w	r1, #32
 8002be4:	f381 8811 	msr	BASEPRI, r1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	484b      	ldr	r0, [pc, #300]	; (8002d18 <SEGGER_SYSVIEW_Start+0x170>)
 8002bec:	f7ff fd51 	bl	8002692 <_PreparePacket>
 8002bf0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfa:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c00:	e00b      	b.n	8002c1a <SEGGER_SYSVIEW_Start+0x72>
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	09db      	lsrs	r3, r3, #7
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c1e:	d8f0      	bhi.n	8002c02 <SEGGER_SYSVIEW_Start+0x5a>
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	e00b      	b.n	8002c54 <SEGGER_SYSVIEW_Start+0xac>
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	6279      	str	r1, [r7, #36]	; 0x24
 8002c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	09db      	lsrs	r3, r3, #7
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b7f      	cmp	r3, #127	; 0x7f
 8002c58:	d8f0      	bhi.n	8002c3c <SEGGER_SYSVIEW_Start+0x94>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	627a      	str	r2, [r7, #36]	; 0x24
 8002c60:	6a3a      	ldr	r2, [r7, #32]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e00b      	b.n	8002c8e <SEGGER_SYSVIEW_Start+0xe6>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	1c59      	adds	r1, r3, #1
 8002c7e:	61f9      	str	r1, [r7, #28]
 8002c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	09db      	lsrs	r3, r3, #7
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b7f      	cmp	r3, #127	; 0x7f
 8002c92:	d8f0      	bhi.n	8002c76 <SEGGER_SYSVIEW_Start+0xce>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	61fa      	str	r2, [r7, #28]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	e00b      	b.n	8002cc6 <SEGGER_SYSVIEW_Start+0x11e>
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1c59      	adds	r1, r3, #1
 8002cb6:	6179      	str	r1, [r7, #20]
 8002cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	09db      	lsrs	r3, r3, #7
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cca:	d8f0      	bhi.n	8002cae <SEGGER_SYSVIEW_Start+0x106>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	617a      	str	r2, [r7, #20]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002cdc:	2218      	movs	r2, #24
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fdc7 	bl	8002874 <_SendPacket>
      RECORD_END();
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <SEGGER_SYSVIEW_Start+0x168>)
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002cfa:	f000 f8e3 	bl	8002ec4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002cfe:	f000 f8cd 	bl	8002e9c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002d02:	f000 fad9 	bl	80032b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002d06:	bf00      	nop
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200005ec 	.word	0x200005ec
 8002d14:	08003420 	.word	0x08003420
 8002d18:	2000061c 	.word	0x2000061c

08002d1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002d22:	f3ef 8311 	mrs	r3, BASEPRI
 8002d26:	f04f 0120 	mov.w	r1, #32
 8002d2a:	f381 8811 	msr	BASEPRI, r1
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <SEGGER_SYSVIEW_Stop+0x44>)
 8002d32:	f7ff fcae 	bl	8002692 <_PreparePacket>
 8002d36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <SEGGER_SYSVIEW_Stop+0x48>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002d40:	220b      	movs	r2, #11
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	6838      	ldr	r0, [r7, #0]
 8002d46:	f7ff fd95 	bl	8002874 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <SEGGER_SYSVIEW_Stop+0x48>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f383 8811 	msr	BASEPRI, r3
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000061c 	.word	0x2000061c
 8002d64:	200005ec 	.word	0x200005ec

08002d68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08c      	sub	sp, #48	; 0x30
 8002d6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d72:	f04f 0120 	mov.w	r1, #32
 8002d76:	f381 8811 	msr	BASEPRI, r1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	4845      	ldr	r0, [pc, #276]	; (8002e94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002d7e:	f7ff fc88 	bl	8002692 <_PreparePacket>
 8002d82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8c:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	e00b      	b.n	8002dac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	09db      	lsrs	r3, r3, #7
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	2b7f      	cmp	r3, #127	; 0x7f
 8002db0:	d8f0      	bhi.n	8002d94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	e00b      	b.n	8002de6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	6279      	str	r1, [r7, #36]	; 0x24
 8002dd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	09db      	lsrs	r3, r3, #7
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dea:	d8f0      	bhi.n	8002dce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	627a      	str	r2, [r7, #36]	; 0x24
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e00b      	b.n	8002e20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1c59      	adds	r1, r3, #1
 8002e10:	61f9      	str	r1, [r7, #28]
 8002e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	09db      	lsrs	r3, r3, #7
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b7f      	cmp	r3, #127	; 0x7f
 8002e24:	d8f0      	bhi.n	8002e08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	61fa      	str	r2, [r7, #28]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e00b      	b.n	8002e58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	6179      	str	r1, [r7, #20]
 8002e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	09db      	lsrs	r3, r3, #7
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e5c:	d8f0      	bhi.n	8002e40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	617a      	str	r2, [r7, #20]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002e6e:	2218      	movs	r2, #24
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68b8      	ldr	r0, [r7, #8]
 8002e74:	f7ff fcfe 	bl	8002874 <_SendPacket>
  RECORD_END();
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	4798      	blx	r3
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3730      	adds	r7, #48	; 0x30
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000061c 	.word	0x2000061c
 8002e98:	200005ec 	.word	0x200005ec

08002e9c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4798      	blx	r3
  }
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200005ec 	.word	0x200005ec

08002ec4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01a      	beq.n	8002f08 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4798      	blx	r3
 8002ee4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002ee8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	000a      	movs	r2, r1
 8002ef8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002efa:	4613      	mov	r3, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4621      	mov	r1, r4
 8002f00:	200d      	movs	r0, #13
 8002f02:	f7ff fdf7 	bl	8002af4 <SEGGER_SYSVIEW_RecordU32x2>
 8002f06:	e006      	b.n	8002f16 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	200c      	movs	r0, #12
 8002f10:	f7ff fdb4 	bl	8002a7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200005ec 	.word	0x200005ec
 8002f24:	e0001004 	.word	0xe0001004

08002f28 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002f32:	f04f 0120 	mov.w	r1, #32
 8002f36:	f381 8811 	msr	BASEPRI, r1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002f3e:	f7ff fba8 	bl	8002692 <_PreparePacket>
 8002f42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f50:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e00b      	b.n	8002f74 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1c59      	adds	r1, r3, #1
 8002f64:	6179      	str	r1, [r7, #20]
 8002f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	09db      	lsrs	r3, r3, #7
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b7f      	cmp	r3, #127	; 0x7f
 8002f78:	d8f0      	bhi.n	8002f5c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	617a      	str	r2, [r7, #20]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68b8      	ldr	r0, [r7, #8]
 8002f90:	f7ff fc70 	bl	8002874 <_SendPacket>
  RECORD_END();
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f383 8811 	msr	BASEPRI, r3
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000061c 	.word	0x2000061c
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb6:	f04f 0120 	mov.w	r1, #32
 8002fba:	f381 8811 	msr	BASEPRI, r1
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002fc2:	f7ff fb66 	bl	8002692 <_PreparePacket>
 8002fc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002fc8:	2203      	movs	r2, #3
 8002fca:	6839      	ldr	r1, [r7, #0]
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	f7ff fc51 	bl	8002874 <_SendPacket>
  RECORD_END();
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f383 8811 	msr	BASEPRI, r3
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	2000061c 	.word	0x2000061c

08002fe4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002fea:	f3ef 8311 	mrs	r3, BASEPRI
 8002fee:	f04f 0120 	mov.w	r1, #32
 8002ff2:	f381 8811 	msr	BASEPRI, r1
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002ffa:	f7ff fb4a 	bl	8002692 <_PreparePacket>
 8002ffe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003000:	2212      	movs	r2, #18
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	f7ff fc35 	bl	8002874 <_SendPacket>
  RECORD_END();
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f383 8811 	msr	BASEPRI, r3
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000061c 	.word	0x2000061c

0800301c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003022:	f3ef 8311 	mrs	r3, BASEPRI
 8003026:	f04f 0120 	mov.w	r1, #32
 800302a:	f381 8811 	msr	BASEPRI, r1
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	4807      	ldr	r0, [pc, #28]	; (8003050 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003032:	f7ff fb2e 	bl	8002692 <_PreparePacket>
 8003036:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003038:	2211      	movs	r2, #17
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	6838      	ldr	r0, [r7, #0]
 800303e:	f7ff fc19 	bl	8002874 <_SendPacket>
  RECORD_END();
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f383 8811 	msr	BASEPRI, r3
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	2000061c 	.word	0x2000061c

08003054 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800305c:	f3ef 8311 	mrs	r3, BASEPRI
 8003060:	f04f 0120 	mov.w	r1, #32
 8003064:	f381 8811 	msr	BASEPRI, r1
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	4819      	ldr	r0, [pc, #100]	; (80030d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800306c:	f7ff fb11 	bl	8002692 <_PreparePacket>
 8003070:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e00b      	b.n	80030a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	61f9      	str	r1, [r7, #28]
 8003094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	09db      	lsrs	r3, r3, #7
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b7f      	cmp	r3, #127	; 0x7f
 80030a6:	d8f0      	bhi.n	800308a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80030b8:	2204      	movs	r2, #4
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	6938      	ldr	r0, [r7, #16]
 80030be:	f7ff fbd9 	bl	8002874 <_SendPacket>
  RECORD_END();
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f383 8811 	msr	BASEPRI, r3
}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000061c 	.word	0x2000061c
 80030d4:	200005ec 	.word	0x200005ec

080030d8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80030e0:	f3ef 8311 	mrs	r3, BASEPRI
 80030e4:	f04f 0120 	mov.w	r1, #32
 80030e8:	f381 8811 	msr	BASEPRI, r1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	4819      	ldr	r0, [pc, #100]	; (8003154 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80030f0:	f7ff facf 	bl	8002692 <_PreparePacket>
 80030f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e00b      	b.n	8003126 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1c59      	adds	r1, r3, #1
 8003116:	61f9      	str	r1, [r7, #28]
 8003118:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	09db      	lsrs	r3, r3, #7
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b7f      	cmp	r3, #127	; 0x7f
 800312a:	d8f0      	bhi.n	800310e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	61fa      	str	r2, [r7, #28]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800313c:	2206      	movs	r2, #6
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	6938      	ldr	r0, [r7, #16]
 8003142:	f7ff fb97 	bl	8002874 <_SendPacket>
  RECORD_END();
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f383 8811 	msr	BASEPRI, r3
}
 800314c:	bf00      	nop
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000061c 	.word	0x2000061c
 8003158:	200005ec 	.word	0x200005ec

0800315c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	1ad3      	subs	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	200005ec 	.word	0x200005ec

0800317c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d06d      	beq.n	800326a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
 8003198:	e008      	b.n	80031ac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	3301      	adds	r3, #1
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3f2      	bcc.n	800319a <SEGGER_SYSVIEW_SendModule+0x1e>
 80031b4:	e000      	b.n	80031b8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80031b6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d055      	beq.n	800326a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80031be:	f3ef 8311 	mrs	r3, BASEPRI
 80031c2:	f04f 0120 	mov.w	r1, #32
 80031c6:	f381 8811 	msr	BASEPRI, r1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	482a      	ldr	r0, [pc, #168]	; (8003278 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80031ce:	f7ff fa60 	bl	8002692 <_PreparePacket>
 80031d2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	623b      	str	r3, [r7, #32]
 80031e0:	e00b      	b.n	80031fa <SEGGER_SYSVIEW_SendModule+0x7e>
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	1c59      	adds	r1, r3, #1
 80031ea:	6279      	str	r1, [r7, #36]	; 0x24
 80031ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	09db      	lsrs	r3, r3, #7
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	2b7f      	cmp	r3, #127	; 0x7f
 80031fe:	d8f0      	bhi.n	80031e2 <SEGGER_SYSVIEW_SendModule+0x66>
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	627a      	str	r2, [r7, #36]	; 0x24
 8003206:	6a3a      	ldr	r2, [r7, #32]
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e00b      	b.n	8003234 <SEGGER_SYSVIEW_SendModule+0xb8>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	61f9      	str	r1, [r7, #28]
 8003226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	09db      	lsrs	r3, r3, #7
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b7f      	cmp	r3, #127	; 0x7f
 8003238:	d8f0      	bhi.n	800321c <SEGGER_SYSVIEW_SendModule+0xa0>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	61fa      	str	r2, [r7, #28]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	4619      	mov	r1, r3
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff f9d0 	bl	80025f8 <_EncodeStr>
 8003258:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800325a:	2216      	movs	r2, #22
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	6938      	ldr	r0, [r7, #16]
 8003260:	f7ff fb08 	bl	8002874 <_SendPacket>
      RECORD_END();
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800326a:	bf00      	nop
 800326c:	3730      	adds	r7, #48	; 0x30
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000614 	.word	0x20000614
 8003278:	2000061c 	.word	0x2000061c

0800327c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00f      	beq.n	80032aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f2      	bne.n	8003290 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000614 	.word	0x20000614

080032b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80032be:	f3ef 8311 	mrs	r3, BASEPRI
 80032c2:	f04f 0120 	mov.w	r1, #32
 80032c6:	f381 8811 	msr	BASEPRI, r1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	4817      	ldr	r0, [pc, #92]	; (800332c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80032ce:	f7ff f9e0 	bl	8002692 <_PreparePacket>
 80032d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	e00b      	b.n	80032fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	6179      	str	r1, [r7, #20]
 80032ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	09db      	lsrs	r3, r3, #7
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003300:	d8f0      	bhi.n	80032e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	617a      	str	r2, [r7, #20]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003312:	221b      	movs	r2, #27
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	68b8      	ldr	r0, [r7, #8]
 8003318:	f7ff faac 	bl	8002874 <_SendPacket>
  RECORD_END();
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f383 8811 	msr	BASEPRI, r3
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000061c 	.word	0x2000061c
 8003330:	20000618 	.word	0x20000618

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4d0d      	ldr	r5, [pc, #52]	; (800336c <__libc_init_array+0x38>)
 8003338:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	2600      	movs	r6, #0
 8003340:	42a6      	cmp	r6, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	4d0b      	ldr	r5, [pc, #44]	; (8003374 <__libc_init_array+0x40>)
 8003346:	4c0c      	ldr	r4, [pc, #48]	; (8003378 <__libc_init_array+0x44>)
 8003348:	f000 f82e 	bl	80033a8 <_init>
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	2600      	movs	r6, #0
 8003352:	42a6      	cmp	r6, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f855 3b04 	ldr.w	r3, [r5], #4
 800335c:	4798      	blx	r3
 800335e:	3601      	adds	r6, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f855 3b04 	ldr.w	r3, [r5], #4
 8003366:	4798      	blx	r3
 8003368:	3601      	adds	r6, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	0800342c 	.word	0x0800342c
 8003370:	0800342c 	.word	0x0800342c
 8003374:	0800342c 	.word	0x0800342c
 8003378:	08003430 	.word	0x08003430

0800337c <memcpy>:
 800337c:	440a      	add	r2, r1
 800337e:	4291      	cmp	r1, r2
 8003380:	f100 33ff 	add.w	r3, r0, #4294967295
 8003384:	d100      	bne.n	8003388 <memcpy+0xc>
 8003386:	4770      	bx	lr
 8003388:	b510      	push	{r4, lr}
 800338a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800338e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003392:	4291      	cmp	r1, r2
 8003394:	d1f9      	bne.n	800338a <memcpy+0xe>
 8003396:	bd10      	pop	{r4, pc}

08003398 <memset>:
 8003398:	4402      	add	r2, r0
 800339a:	4603      	mov	r3, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	f803 1b01 	strb.w	r1, [r3], #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
