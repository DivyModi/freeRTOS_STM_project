
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006760  08006760  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006760  08006760  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006760  08006760  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014420  20000078  080067e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014498  080067e0  00024498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001441c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9d  00000000  00000000  000344c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  00037268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  000386b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295fe  00000000  00000000  00039980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001515a  00000000  00000000  00062f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd102  00000000  00000000  000780d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001751da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  0017522c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006540 	.word	0x08006540

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006540 	.word	0x08006540

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eb0 	.word	0x20012eb0

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026a:	f000 fc59 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026e:	f000 f86f 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000272:	f000 f8bf 	bl	80003f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 8000276:	4b26      	ldr	r3, [pc, #152]	; (8000310 <main+0xac>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a25      	ldr	r2, [pc, #148]	; (8000310 <main+0xac>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000282:	f003 ff0b 	bl	800409c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000286:	f004 fe39 	bl	8004efc <SEGGER_SYSVIEW_Start>
  status  = xTaskCreate(task1_handler, "Task1", 200, NULL, 2, &task1_handle);
 800028a:	4b22      	ldr	r3, [pc, #136]	; (8000314 <main+0xb0>)
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2302      	movs	r3, #2
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	22c8      	movs	r2, #200	; 0xc8
 8000296:	4920      	ldr	r1, [pc, #128]	; (8000318 <main+0xb4>)
 8000298:	4820      	ldr	r0, [pc, #128]	; (800031c <main+0xb8>)
 800029a:	f002 fbd3 	bl	8002a44 <xTaskCreate>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a1f      	ldr	r2, [pc, #124]	; (8000320 <main+0xbc>)
 80002a2:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
  status = xTaskCreate(task2_handler, "Task2", 200, NULL, 2, &task2_handle);
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <main+0xc0>)
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	2302      	movs	r3, #2
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2300      	movs	r3, #0
 80002ae:	22c8      	movs	r2, #200	; 0xc8
 80002b0:	491d      	ldr	r1, [pc, #116]	; (8000328 <main+0xc4>)
 80002b2:	481e      	ldr	r0, [pc, #120]	; (800032c <main+0xc8>)
 80002b4:	f002 fbc6 	bl	8002a44 <xTaskCreate>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a19      	ldr	r2, [pc, #100]	; (8000320 <main+0xbc>)
 80002bc:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
  status = xTaskCreate(task3_handler, "Task3", 200, NULL, 2, &task3_handle);
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <main+0xcc>)
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2302      	movs	r3, #2
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2300      	movs	r3, #0
 80002c8:	22c8      	movs	r2, #200	; 0xc8
 80002ca:	491a      	ldr	r1, [pc, #104]	; (8000334 <main+0xd0>)
 80002cc:	481a      	ldr	r0, [pc, #104]	; (8000338 <main+0xd4>)
 80002ce:	f002 fbb9 	bl	8002a44 <xTaskCreate>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4a12      	ldr	r2, [pc, #72]	; (8000320 <main+0xbc>)
 80002d6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
  status = xTaskCreate(task4_handler, "Task4", 200, NULL, 1, &task4_handle);
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <main+0xd8>)
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2301      	movs	r3, #1
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2300      	movs	r3, #0
 80002e2:	22c8      	movs	r2, #200	; 0xc8
 80002e4:	4916      	ldr	r1, [pc, #88]	; (8000340 <main+0xdc>)
 80002e6:	4817      	ldr	r0, [pc, #92]	; (8000344 <main+0xe0>)
 80002e8:	f002 fbac 	bl	8002a44 <xTaskCreate>
 80002ec:	4603      	mov	r3, r0
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <main+0xbc>)
 80002f0:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
  xMutex = xSemaphoreCreateMutex();
 80002f2:	2001      	movs	r0, #1
 80002f4:	f002 f9e7 	bl	80026c6 <xQueueCreateMutex>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a13      	ldr	r2, [pc, #76]	; (8000348 <main+0xe4>)
 80002fc:	6013      	str	r3, [r2, #0]
  xMutex1 = xSemaphoreCreateMutex();
 80002fe:	2001      	movs	r0, #1
 8000300:	f002 f9e1 	bl	80026c6 <xQueueCreateMutex>
 8000304:	4603      	mov	r3, r0
 8000306:	4a11      	ldr	r2, [pc, #68]	; (800034c <main+0xe8>)
 8000308:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 800030a:	f002 fe4b 	bl	8002fa4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800030e:	e7fe      	b.n	800030e <main+0xaa>
 8000310:	e0001000 	.word	0xe0001000
 8000314:	20000094 	.word	0x20000094
 8000318:	08006558 	.word	0x08006558
 800031c:	0800051d 	.word	0x0800051d
 8000320:	200000a4 	.word	0x200000a4
 8000324:	20000098 	.word	0x20000098
 8000328:	08006560 	.word	0x08006560
 800032c:	08000559 	.word	0x08000559
 8000330:	2000009c 	.word	0x2000009c
 8000334:	08006568 	.word	0x08006568
 8000338:	08000631 	.word	0x08000631
 800033c:	200000a0 	.word	0x200000a0
 8000340:	08006570 	.word	0x08006570
 8000344:	080006fd 	.word	0x080006fd
 8000348:	200000a8 	.word	0x200000a8
 800034c:	200000ac 	.word	0x200000ac

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	; 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2244      	movs	r2, #68	; 0x44
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f005 fbda 	bl	8005b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000372:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000376:	f000 fee9 	bl	800114c <HAL_PWREx_ControlVoltageScaling>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000380:	f000 fa38 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000384:	2302      	movs	r3, #2
 8000386:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038e:	2310      	movs	r3, #16
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000396:	2302      	movs	r3, #2
 8000398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800039a:	2301      	movs	r3, #1
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800039e:	230a      	movs	r3, #10
 80003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003a2:	2307      	movs	r3, #7
 80003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 ff20 	bl	80011f8 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003be:	f000 fa19 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2303      	movs	r3, #3
 80003c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	2104      	movs	r1, #4
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fae8 	bl	80019b0 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 fa05 	bl	80007f4 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3758      	adds	r7, #88	; 0x58
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 0314 	add.w	r3, r7, #20
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040a:	4b41      	ldr	r3, [pc, #260]	; (8000510 <MX_GPIO_Init+0x11c>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a40      	ldr	r2, [pc, #256]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b3e      	ldr	r3, [pc, #248]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0304 	and.w	r3, r3, #4
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000422:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b35      	ldr	r3, [pc, #212]	; (8000510 <MX_GPIO_Init+0x11c>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a34      	ldr	r2, [pc, #208]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b32      	ldr	r3, [pc, #200]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a2e      	ldr	r2, [pc, #184]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <MX_GPIO_Init+0x11c>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|yellow_1_Pin|GREEN_1_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	21d0      	movs	r1, #208	; 0xd0
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fe21 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YELLOW_2_Pin|red2_Pin|green2_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2161      	movs	r1, #97	; 0x61
 800047a:	4826      	ldr	r0, [pc, #152]	; (8000514 <MX_GPIO_Init+0x120>)
 800047c:	f000 fe1c 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000486:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	4820      	ldr	r0, [pc, #128]	; (8000518 <MX_GPIO_Init+0x124>)
 8000498:	f000 fc64 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800049c:	230c      	movs	r3, #12
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004ac:	2307      	movs	r3, #7
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ba:	f000 fc53 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin yellow_1_Pin GREEN_1_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|yellow_1_Pin|GREEN_1_Pin;
 80004be:	23d0      	movs	r3, #208	; 0xd0
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	4619      	mov	r1, r3
 80004d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d8:	f000 fc44 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : YELLOW_2_Pin red2_Pin green2_Pin */
  GPIO_InitStruct.Pin = YELLOW_2_Pin|red2_Pin|green2_Pin;
 80004dc:	2361      	movs	r3, #97	; 0x61
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <MX_GPIO_Init+0x120>)
 80004f4:	f000 fc36 	bl	8000d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	2028      	movs	r0, #40	; 0x28
 80004fe:	f000 fc07 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000502:	2028      	movs	r0, #40	; 0x28
 8000504:	f000 fc20 	bl	8000d48 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	; 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	48000400 	.word	0x48000400
 8000518:	48000800 	.word	0x48000800

0800051c <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void *parameter)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af02      	add	r7, sp, #8
 8000522:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000524:	f002 fe2a 	bl	800317c <xTaskGetTickCount>
 8000528:	60f8      	str	r0, [r7, #12]
	while(1){
		xTaskNotify(task2_handle,0, eNoAction); // red on for
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <task1_handler+0x34>)
 800052c:	6818      	ldr	r0, [r3, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	f003 f96a 	bl	8003810 <xTaskGenericNotify>
		xTaskNotify(task3_handle,0, eNoAction);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <task1_handler+0x38>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	2300      	movs	r3, #0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	f003 f961 	bl	8003810 <xTaskGenericNotify>
		xTaskNotify(task2_handle,0, eNoAction); // red on for
 800054e:	e7ec      	b.n	800052a <task1_handler+0xe>
 8000550:	20000098 	.word	0x20000098
 8000554:	2000009c 	.word	0x2000009c

08000558 <task2_handler>:
//		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(8000));
	}
}

void task2_handler(void *parameter)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
	uint32_t not_val;
	TickType_t xLastWakeTime1, xLastWakeTime2, xLastWakeTime3;
	xLastWakeTime1 = xTaskGetTickCount();
 8000560:	f002 fe0c 	bl	800317c <xTaskGetTickCount>
 8000564:	6178      	str	r0, [r7, #20]
	xLastWakeTime2 = xTaskGetTickCount();
 8000566:	f002 fe09 	bl	800317c <xTaskGetTickCount>
 800056a:	6138      	str	r0, [r7, #16]
	xLastWakeTime3 = xTaskGetTickCount();
 800056c:	f002 fe06 	bl	800317c <xTaskGetTickCount>
 8000570:	60f8      	str	r0, [r7, #12]
	while(1){
		if(xTaskNotifyWait(0,0, &not_val, portMAX_DELAY)== pdTRUE){   // 2nd parameter is used to clear the bits on exit
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	2000      	movs	r0, #0
 8000582:	f003 f8cb 	bl	800371c <xTaskGenericNotifyWait>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1f2      	bne.n	8000572 <task2_handler+0x1a>
			printf("Red-1 LED ON\n");
 800058c:	4825      	ldr	r0, [pc, #148]	; (8000624 <task2_handler+0xcc>)
 800058e:	f005 fb39 	bl	8005c04 <puts>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f000 fd8d 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fd87 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fd81 	bl	80010b8 <HAL_GPIO_WritePin>
//			vTaskDelayUntil(&xLastWakeTime1, pdMS_TO_TICKS(4000));
			vTaskDelay(pdMS_TO_TICKS(4000));
 80005b6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005ba:	f002 fb97 	bl	8002cec <vTaskDelay>
			printf("Green-1 LED ON\n");
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <task2_handler+0xd0>)
 80005c0:	f005 fb20 	bl	8005c04 <puts>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2110      	movs	r1, #16
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fd74 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fd6e 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fd68 	bl	80010b8 <HAL_GPIO_WritePin>
//			vTaskDelayUntil(&xLastWakeTime2,pdMS_TO_TICKS(7000));
			vTaskDelay(pdMS_TO_TICKS(3000));
 80005e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005ec:	f002 fb7e 	bl	8002cec <vTaskDelay>
			printf("Yellow-1 LED ON\n");
 80005f0:	480e      	ldr	r0, [pc, #56]	; (800062c <task2_handler+0xd4>)
 80005f2:	f005 fb07 	bl	8005c04 <puts>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f000 fd5b 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 fd55 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000616:	f000 fd4f 	bl	80010b8 <HAL_GPIO_WritePin>
//			vTaskDelayUntil(&xLastWakeTime3,pdMS_TO_TICKS(8000));
			vTaskDelay(pdMS_TO_TICKS(1000));
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	f002 fb65 	bl	8002cec <vTaskDelay>
		if(xTaskNotifyWait(0,0, &not_val, portMAX_DELAY)== pdTRUE){   // 2nd parameter is used to clear the bits on exit
 8000622:	e7a6      	b.n	8000572 <task2_handler+0x1a>
 8000624:	08006578 	.word	0x08006578
 8000628:	08006588 	.word	0x08006588
 800062c:	08006598 	.word	0x08006598

08000630 <task3_handler>:
		}
	}
}

void task3_handler(void *parameter)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
	uint32_t not_val;
	TickType_t xLastWakeTime1, xLastWakeTime2, xLastWakeTime3;
	xLastWakeTime1 = xTaskGetTickCount();
 8000638:	f002 fda0 	bl	800317c <xTaskGetTickCount>
 800063c:	6178      	str	r0, [r7, #20]
	xLastWakeTime2 = xTaskGetTickCount();
 800063e:	f002 fd9d 	bl	800317c <xTaskGetTickCount>
 8000642:	6138      	str	r0, [r7, #16]
	xLastWakeTime3 = xTaskGetTickCount();
 8000644:	f002 fd9a 	bl	800317c <xTaskGetTickCount>
 8000648:	60f8      	str	r0, [r7, #12]
	while(1){
		if(xTaskNotifyWait(0,0, &not_val, portMAX_DELAY)== pdTRUE){   // 2nd parameter is used to clear the bits on exit
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	f04f 32ff 	mov.w	r2, #4294967295
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f003 f85f 	bl	800371c <xTaskGenericNotifyWait>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d1f2      	bne.n	800064a <task3_handler+0x1a>
			printf("Green-2 LED ON\n");
 8000664:	4821      	ldr	r0, [pc, #132]	; (80006ec <task3_handler+0xbc>)
 8000666:	f005 facd 	bl	8005c04 <puts>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	4820      	ldr	r0, [pc, #128]	; (80006f0 <task3_handler+0xc0>)
 8000670:	f000 fd22 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	481d      	ldr	r0, [pc, #116]	; (80006f0 <task3_handler+0xc0>)
 800067a:	f000 fd1d 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	481b      	ldr	r0, [pc, #108]	; (80006f0 <task3_handler+0xc0>)
 8000684:	f000 fd18 	bl	80010b8 <HAL_GPIO_WritePin>
//			vTaskDelayUntil(&xLastWakeTime1, pdMS_TO_TICKS(3000));
			vTaskDelay(pdMS_TO_TICKS(3000));
 8000688:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800068c:	f002 fb2e 	bl	8002cec <vTaskDelay>
			printf("Yellow-2 LED ON\n");
 8000690:	4818      	ldr	r0, [pc, #96]	; (80006f4 <task3_handler+0xc4>)
 8000692:	f005 fab7 	bl	8005c04 <puts>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <task3_handler+0xc0>)
 800069c:	f000 fd0c 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <task3_handler+0xc0>)
 80006a6:	f000 fd07 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2140      	movs	r1, #64	; 0x40
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <task3_handler+0xc0>)
 80006b0:	f000 fd02 	bl	80010b8 <HAL_GPIO_WritePin>
//			vTaskDelayUntil(&xLastWakeTime2, pdMS_TO_TICKS(4000));
			vTaskDelay(pdMS_TO_TICKS(1000));
 80006b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b8:	f002 fb18 	bl	8002cec <vTaskDelay>
			printf("Red-2 LED ON\n");
 80006bc:	480e      	ldr	r0, [pc, #56]	; (80006f8 <task3_handler+0xc8>)
 80006be:	f005 faa1 	bl	8005c04 <puts>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	480a      	ldr	r0, [pc, #40]	; (80006f0 <task3_handler+0xc0>)
 80006c8:	f000 fcf6 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <task3_handler+0xc0>)
 80006d2:	f000 fcf1 	bl	80010b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <task3_handler+0xc0>)
 80006dc:	f000 fcec 	bl	80010b8 <HAL_GPIO_WritePin>
//			vTaskDelayUntil(&xLastWakeTime3, pdMS_TO_TICKS(8000));
			vTaskDelay(pdMS_TO_TICKS(4000));
 80006e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80006e4:	f002 fb02 	bl	8002cec <vTaskDelay>
		if(xTaskNotifyWait(0,0, &not_val, portMAX_DELAY)== pdTRUE){   // 2nd parameter is used to clear the bits on exit
 80006e8:	e7af      	b.n	800064a <task3_handler+0x1a>
 80006ea:	bf00      	nop
 80006ec:	080065a8 	.word	0x080065a8
 80006f0:	48000400 	.word	0x48000400
 80006f4:	080065b8 	.word	0x080065b8
 80006f8:	080065c8 	.word	0x080065c8

080006fc <task4_handler>:
		}
	}
}

void task4_handler(void *parameter)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000704:	f002 fd3a 	bl	800317c <xTaskGetTickCount>
 8000708:	60f8      	str	r0, [r7, #12]
	while(1){
		vTaskSuspend(NULL);
 800070a:	2000      	movs	r0, #0
 800070c:	f002 fb16 	bl	8002d3c <vTaskSuspend>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2110      	movs	r1, #16
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f000 fcce 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 fcc8 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000730:	f000 fcc2 	bl	80010b8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2120      	movs	r1, #32
 8000738:	4810      	ldr	r0, [pc, #64]	; (800077c <task4_handler+0x80>)
 800073a:	f000 fcbd 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2101      	movs	r1, #1
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <task4_handler+0x84>)
 8000744:	f000 fcb8 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <task4_handler+0x84>)
 800074e:	f000 fcb3 	bl	80010b8 <HAL_GPIO_WritePin>
//		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(2000));
//		vTaskDelay(pdMS_TO_TICKS(20000));
		for(int i = 0; i< 1024; i++){
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	e00b      	b.n	8000770 <task4_handler+0x74>
			for(int j = 0; j< 200;j++);
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	e002      	b.n	8000764 <task4_handler+0x68>
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	3301      	adds	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	2bc7      	cmp	r3, #199	; 0xc7
 8000768:	ddf9      	ble.n	800075e <task4_handler+0x62>
		for(int i = 0; i< 1024; i++){
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000776:	dbef      	blt.n	8000758 <task4_handler+0x5c>
		vTaskSuspend(NULL);
 8000778:	e7c7      	b.n	800070a <task4_handler+0xe>
 800077a:	bf00      	nop
 800077c:	48000800 	.word	0x48000800
 8000780:	48000400 	.word	0x48000400

08000784 <EXTI15_10_IRQHandler>:
		}
	}
}

void EXTI15_10_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800078a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800078e:	f000 fcab 	bl	80010e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BaseType_t xYieldRequired;
  xYieldRequired = xTaskResumeFromISR( task4_handle );
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <EXTI15_10_IRQHandler+0x44>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fb90 	bl	8002ebc <xTaskResumeFromISR>
 800079c:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( xYieldRequired );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00a      	beq.n	80007ba <EXTI15_10_IRQHandler+0x36>
 80007a4:	f004 fed0 	bl	8005548 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <EXTI15_10_IRQHandler+0x48>)
 80007aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	f3bf 8f4f 	dsb	sy
 80007b4:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007b8:	e001      	b.n	80007be <EXTI15_10_IRQHandler+0x3a>
  portYIELD_FROM_ISR( xYieldRequired );
 80007ba:	f004 fea9 	bl	8005510 <SEGGER_SYSVIEW_RecordExitISR>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000a0 	.word	0x200000a0
 80007cc:	e000ed04 	.word	0xe000ed04

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 f9bd 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40001000 	.word	0x40001000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	; 0x60
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	; 0x58
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000836:	f003 f9b7 	bl	8003ba8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <HAL_InitTick+0xe0>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a33      	ldr	r2, [pc, #204]	; (8000928 <HAL_InitTick+0xe0>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <HAL_InitTick+0xe0>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800086e:	f107 0210 	add.w	r2, r7, #16
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fa47 	bl	8001d0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000884:	2b00      	cmp	r3, #0
 8000886:	d103      	bne.n	8000890 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000888:	f001 fa2a 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 800088c:	6378      	str	r0, [r7, #52]	; 0x34
 800088e:	e004      	b.n	800089a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000890:	f001 fa26 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8000894:	4603      	mov	r3, r0
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	4a23      	ldr	r2, [pc, #140]	; (800092c <HAL_InitTick+0xe4>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	0c9b      	lsrs	r3, r3, #18
 80008a4:	3b01      	subs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <HAL_InitTick+0xe8>)
 80008aa:	4a22      	ldr	r2, [pc, #136]	; (8000934 <HAL_InitTick+0xec>)
 80008ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <HAL_InitTick+0xe8>)
 80008b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <HAL_InitTick+0xe8>)
 80008b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_InitTick+0xe8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_InitTick+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_InitTick+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <HAL_InitTick+0xe8>)
 80008d0:	f001 faae 	bl	8001e30 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d11b      	bne.n	800091a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <HAL_InitTick+0xe8>)
 80008e4:	f001 fb06 	bl	8001ef4 <HAL_TIM_Base_Start_IT>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d111      	bne.n	800091a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f6:	2036      	movs	r0, #54	; 0x36
 80008f8:	f000 fa26 	bl	8000d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d808      	bhi.n	8000914 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000902:	2200      	movs	r2, #0
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	2036      	movs	r0, #54	; 0x36
 8000908:	f000 fa02 	bl	8000d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_InitTick+0xf0>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e002      	b.n	800091a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800091a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800091e:	4618      	mov	r0, r3
 8000920:	3738      	adds	r7, #56	; 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	431bde83 	.word	0x431bde83
 8000930:	200000b0 	.word	0x200000b0
 8000934:	40001000 	.word	0x40001000
 8000938:	20000004 	.word	0x20000004

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <TIM6_DAC_IRQHandler+0x10>)
 800096e:	f001 fb31 	bl	8001fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000b0 	.word	0x200000b0

0800097c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <ITM_SendChar+0x48>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <ITM_SendChar+0x48>)
 800098c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000990:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <ITM_SendChar+0x4c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <ITM_SendChar+0x4c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800099e:	bf00      	nop
 80009a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f8      	beq.n	80009a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	6013      	str	r3, [r2, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000edfc 	.word	0xe000edfc
 80009c8:	e0000e00 	.word	0xe0000e00

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffab 	bl	800097c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad0:	f7ff ffea 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	; (8000b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <LoopForever+0xe>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	; (8000b18 <LoopForever+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f004 ffcb 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afe:	f7ff fbb1 	bl	8000264 <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b10:	08006768 	.word	0x08006768
  ldr r2, =_sbss
 8000b14:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b18:	20014498 	.word	0x20014498

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_Init+0x3c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_Init+0x3c>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f000 f8df 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3c:	200f      	movs	r0, #15
 8000b3e:	f7ff fe83 	bl	8000848 <HAL_InitTick>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	e001      	b.n	8000b52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4e:	f7ff fe57 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	200000fc 	.word	0x200000fc

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200000fc 	.word	0x200000fc

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e17f      	b.n	8001074 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8171 	beq.w	800106e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d118      	bne.n	8000e44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d017      	beq.n	8000e80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	6939      	ldr	r1, [r7, #16]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ac 	beq.w	800106e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	; 0x60
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2e:	4a5a      	ldr	r2, [pc, #360]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x242>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_GPIO_Init+0x338>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x23e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_GPIO_Init+0x33c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x23a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <HAL_GPIO_Init+0x340>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x236>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x344>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x232>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_GPIO_Init+0x348>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x22e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x22a>
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	f002 0203 	and.w	r2, r2, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb8:	4937      	ldr	r1, [pc, #220]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <HAL_GPIO_Init+0x350>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fea:	4a32      	ldr	r2, [pc, #200]	; (80010b4 <HAL_GPIO_Init+0x350>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_GPIO_Init+0x350>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_GPIO_Init+0x350>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_GPIO_Init+0x350>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_GPIO_Init+0x350>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_GPIO_Init+0x350>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_GPIO_Init+0x350>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f ae78 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000c00 	.word	0x48000c00
 80010a8:	48001000 	.word	0x48001000
 80010ac:	48001400 	.word	0x48001400
 80010b0:	48001800 	.word	0x48001800
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f806 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <HAL_PWREx_GetVoltageRange+0x18>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40007000 	.word	0x40007000

0800114c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115a:	d130      	bne.n	80011be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001168:	d038      	beq.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2232      	movs	r2, #50	; 0x32
 8001180:	fb02 f303 	mul.w	r3, r2, r3
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001190:	e002      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3b01      	subs	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a4:	d102      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f2      	bne.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b8:	d110      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e00f      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ca:	d007      	beq.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000
 80011f0:	20000000 	.word	0x20000000
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e3ca      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120a:	4b97      	ldr	r3, [pc, #604]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001214:	4b94      	ldr	r3, [pc, #592]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80e4 	beq.w	80013f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_RCC_OscConfig+0x4a>
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b0c      	cmp	r3, #12
 8001236:	f040 808b 	bne.w	8001350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b01      	cmp	r3, #1
 800123e:	f040 8087 	bne.w	8001350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x62>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e3a2      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1a      	ldr	r2, [r3, #32]
 800125e:	4b82      	ldr	r3, [pc, #520]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d004      	beq.n	8001274 <HAL_RCC_OscConfig+0x7c>
 800126a:	4b7f      	ldr	r3, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001272:	e005      	b.n	8001280 <HAL_RCC_OscConfig+0x88>
 8001274:	4b7c      	ldr	r3, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001280:	4293      	cmp	r3, r2
 8001282:	d223      	bcs.n	80012cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fd71 	bl	8001d70 <RCC_SetFlashLatencyFromMSIRange>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e383      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001298:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a72      	ldr	r2, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	496d      	ldr	r1, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b6:	4b6c      	ldr	r3, [pc, #432]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4968      	ldr	r1, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
 80012ca:	e025      	b.n	8001318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012cc:	4b66      	ldr	r3, [pc, #408]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4960      	ldr	r1, [pc, #384]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ea:	4b5f      	ldr	r3, [pc, #380]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	495b      	ldr	r1, [pc, #364]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d109      	bne.n	8001318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fd31 	bl	8001d70 <RCC_SetFlashLatencyFromMSIRange>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e343      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001318:	f000 fc4a 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b52      	ldr	r3, [pc, #328]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	4950      	ldr	r1, [pc, #320]	; (800146c <HAL_RCC_OscConfig+0x274>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_RCC_OscConfig+0x278>)
 8001336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001338:	4b4e      	ldr	r3, [pc, #312]	; (8001474 <HAL_RCC_OscConfig+0x27c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fa83 	bl	8000848 <HAL_InitTick>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d052      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	e327      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d032      	beq.n	80013be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001358:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a42      	ldr	r2, [pc, #264]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc10 	bl	8000b88 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800136c:	f7ff fc0c 	bl	8000b88 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e310      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138a:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a36      	ldr	r2, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4931      	ldr	r1, [pc, #196]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	492c      	ldr	r1, [pc, #176]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
 80013bc:	e01a      	b.n	80013f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a29      	ldr	r2, [pc, #164]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fbdd 	bl	8000b88 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d2:	f7ff fbd9 	bl	8000b88 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e2dd      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x1da>
 80013f0:	e000      	b.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d074      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b08      	cmp	r3, #8
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x21a>
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d10e      	bne.n	800142a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d10b      	bne.n	800142a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d064      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d160      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e2ba      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x24a>
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800143a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e026      	b.n	8001490 <HAL_RCC_OscConfig+0x298>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144a:	d115      	bne.n	8001478 <HAL_RCC_OscConfig+0x280>
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 8001452:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a02      	ldr	r2, [pc, #8]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800145e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	e014      	b.n	8001490 <HAL_RCC_OscConfig+0x298>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	080066a0 	.word	0x080066a0
 8001470:	20000000 	.word	0x20000000
 8001474:	20000004 	.word	0x20000004
 8001478:	4ba0      	ldr	r3, [pc, #640]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a9f      	ldr	r2, [pc, #636]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b9d      	ldr	r3, [pc, #628]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a9c      	ldr	r2, [pc, #624]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb76 	bl	8000b88 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb72 	bl	8000b88 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e276      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	4b92      	ldr	r3, [pc, #584]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2a8>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb62 	bl	8000b88 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fb5e 	bl	8000b88 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e262      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2d0>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d060      	beq.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x310>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d119      	bne.n	8001536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d116      	bne.n	8001536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x328>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e23f      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	4973      	ldr	r1, [pc, #460]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	e040      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d023      	beq.n	8001586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fb1d 	bl	8000b88 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fb19 	bl	8000b88 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e21d      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4b65      	ldr	r3, [pc, #404]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b62      	ldr	r3, [pc, #392]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	495f      	ldr	r1, [pc, #380]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
 8001584:	e018      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800158c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff faf9 	bl	8000b88 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff faf5 	bl	8000b88 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1f9      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d03c      	beq.n	800163e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01c      	beq.n	8001606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015cc:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fad4 	bl	8000b88 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fad0 	bl	8000b88 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1d4      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ef      	beq.n	80015e4 <HAL_RCC_OscConfig+0x3ec>
 8001604:	e01b      	b.n	800163e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	4a3b      	ldr	r2, [pc, #236]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fab7 	bl	8000b88 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fab3 	bl	8000b88 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1b7      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ef      	bne.n	800161e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80a6 	beq.w	8001798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10d      	bne.n	8001678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	; 0x58
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001674:	2301      	movs	r3, #1
 8001676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d118      	bne.n	80016b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001690:	f7ff fa7a 	bl	8000b88 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001698:	f7ff fa76 	bl	8000b88 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e17a      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x508>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4d8>
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ce:	e029      	b.n	8001724 <HAL_RCC_OscConfig+0x52c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d115      	bne.n	8001704 <HAL_RCC_OscConfig+0x50c>
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x52c>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40007000 	.word	0x40007000
 8001704:	4b9c      	ldr	r3, [pc, #624]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	4a9b      	ldr	r2, [pc, #620]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001714:	4b98      	ldr	r3, [pc, #608]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a97      	ldr	r2, [pc, #604]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d016      	beq.n	800175a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff fa2c 	bl	8000b88 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001732:	e00a      	b.n	800174a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff fa28 	bl	8000b88 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e12a      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174a:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ed      	beq.n	8001734 <HAL_RCC_OscConfig+0x53c>
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fa15 	bl	8000b88 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fa11 	bl	8000b88 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e113      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001778:	4b7f      	ldr	r3, [pc, #508]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ed      	bne.n	8001762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	4a79      	ldr	r2, [pc, #484]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001796:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80fe 	beq.w	800199e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	f040 80d0 	bne.w	800194c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017ac:	4b72      	ldr	r3, [pc, #456]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	429a      	cmp	r2, r3
 80017be:	d130      	bne.n	8001822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	3b01      	subs	r3, #1
 80017cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d127      	bne.n	8001822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11f      	bne.n	8001822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017ec:	2a07      	cmp	r2, #7
 80017ee:	bf14      	ite	ne
 80017f0:	2201      	movne	r2, #1
 80017f2:	2200      	moveq	r2, #0
 80017f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d113      	bne.n	8001822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d109      	bne.n	8001822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d06e      	beq.n	8001900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b0c      	cmp	r3, #12
 8001826:	d069      	beq.n	80018fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0ad      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001844:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800184a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7ff f99a 	bl	8000b88 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f996 	bl	8000b88 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e09a      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001876:	4b40      	ldr	r3, [pc, #256]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4b40      	ldr	r3, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x784>)
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001886:	3a01      	subs	r2, #1
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001890:	0212      	lsls	r2, r2, #8
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001898:	0852      	lsrs	r2, r2, #1
 800189a:	3a01      	subs	r2, #1
 800189c:	0552      	lsls	r2, r2, #21
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018a4:	0852      	lsrs	r2, r2, #1
 80018a6:	3a01      	subs	r2, #1
 80018a8:	0652      	lsls	r2, r2, #25
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018b0:	0912      	lsrs	r2, r2, #4
 80018b2:	0452      	lsls	r2, r2, #17
 80018b4:	430a      	orrs	r2, r1
 80018b6:	4930      	ldr	r1, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d4:	f7ff f958 	bl	8000b88 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f954 	bl	8000b88 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e058      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fa:	e050      	b.n	800199e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e04f      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d148      	bne.n	800199e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001924:	f7ff f930 	bl	8000b88 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192c:	f7ff f92c 	bl	8000b88 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e030      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x734>
 800194a:	e028      	b.n	800199e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d023      	beq.n	800199a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x780>)
 8001958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f913 	bl	8000b88 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	e00c      	b.n	8001980 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff f90f 	bl	8000b88 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d905      	bls.n	8001980 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e013      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
 8001978:	40021000 	.word	0x40021000
 800197c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x7b0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ec      	bne.n	8001966 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x7b0>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4905      	ldr	r1, [pc, #20]	; (80019a8 <HAL_RCC_OscConfig+0x7b0>)
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x7b4>)
 8001994:	4013      	ands	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
 8001998:	e001      	b.n	800199e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000
 80019ac:	feeefffc 	.word	0xfeeefffc

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0e7      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4970      	ldr	r1, [pc, #448]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0cf      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d010      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d908      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4960      	ldr	r1, [pc, #384]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d04c      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d121      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0a6      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4e:	4b54      	ldr	r3, [pc, #336]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e09a      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e08e      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e086      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4943      	ldr	r1, [pc, #268]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a98:	f7ff f876 	bl	8000b88 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f872 	bl	8000b88 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e06e      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b3a      	ldr	r3, [pc, #232]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d208      	bcs.n	8001af6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	492b      	ldr	r1, [pc, #172]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d210      	bcs.n	8001b26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 0207 	bic.w	r2, r3, #7
 8001b0c:	4923      	ldr	r1, [pc, #140]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HAL_RCC_ClockConfig+0x1ec>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e036      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4918      	ldr	r1, [pc, #96]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d009      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4910      	ldr	r1, [pc, #64]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b64:	f000 f824 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1fc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fe5d 	bl	8000848 <HAL_InitTick>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b92:	7afb      	ldrb	r3, [r7, #11]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	080066a0 	.word	0x080066a0
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d121      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d11e      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001be4:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e005      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c00:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c0c:	4a2b      	ldr	r2, [pc, #172]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10d      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e004      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d134      	bne.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d003      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0xac>
 8001c54:	e005      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c58:	617b      	str	r3, [r7, #20]
      break;
 8001c5a:	e005      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c5e:	617b      	str	r3, [r7, #20]
      break;
 8001c60:	e002      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	617b      	str	r3, [r7, #20]
      break;
 8001c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	fb03 f202 	mul.w	r2, r3, r2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	0e5b      	lsrs	r3, r3, #25
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080066b8 	.word	0x080066b8
 8001cc0:	00f42400 	.word	0x00f42400
 8001cc4:	007a1200 	.word	0x007a1200

08001cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	080066b0 	.word	0x080066b0

08001d0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	220f      	movs	r2, #15
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCC_GetClockConfig+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0207 	and.w	r2, r3, #7
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40022000 	.word	0x40022000

08001d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d88:	f7ff f9d2 	bl	8001130 <HAL_PWREx_GetVoltageRange>
 8001d8c:	6178      	str	r0, [r7, #20]
 8001d8e:	e014      	b.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da8:	f7ff f9c2 	bl	8001130 <HAL_PWREx_GetVoltageRange>
 8001dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc0:	d10b      	bne.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d919      	bls.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2ba0      	cmp	r3, #160	; 0xa0
 8001dcc:	d902      	bls.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dce:	2302      	movs	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e013      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e010      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b80      	cmp	r3, #128	; 0x80
 8001dde:	d902      	bls.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de0:	2303      	movs	r3, #3
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e00a      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d102      	bne.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e004      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b70      	cmp	r3, #112	; 0x70
 8001df6:	d101      	bne.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 0207 	bic.w	r2, r3, #7
 8001e04:	4909      	ldr	r1, [pc, #36]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e049      	b.n	8001ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f841 	bl	8001ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f000 f9f8 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d001      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e04f      	b.n	8001fac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01d      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x76>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d018      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x76>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_TIM_Base_Start_IT+0xc8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x76>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00e      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x76>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d009      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x76>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d004      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x76>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d115      	bne.n	8001f96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d015      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0xb4>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d011      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f94:	e008      	b.n	8001fa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e000      	b.n	8001faa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40013400 	.word	0x40013400
 8001fcc:	40014000 	.word	0x40014000
 8001fd0:	00010007 	.word	0x00010007

08001fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d122      	bne.n	8002030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d11b      	bne.n	8002030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0202 	mvn.w	r2, #2
 8002000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f905 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8f7 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f908 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b04      	cmp	r3, #4
 800203c:	d122      	bne.n	8002084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d11b      	bne.n	8002084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0204 	mvn.w	r2, #4
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8db 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8cd 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8de 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b08      	cmp	r3, #8
 8002090:	d122      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b08      	cmp	r3, #8
 800209e:	d11b      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0208 	mvn.w	r2, #8
 80020a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2204      	movs	r2, #4
 80020ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8b1 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8a3 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8b4 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d122      	bne.n	800212c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d11b      	bne.n	800212c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0210 	mvn.w	r2, #16
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2208      	movs	r2, #8
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f887 	bl	8002226 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f879 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f88a 	bl	800223a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0201 	mvn.w	r2, #1
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fb3c 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f914 	bl	80023ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002192:	d10e      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d107      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f907 	bl	80023c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d10e      	bne.n	80021de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d107      	bne.n	80021de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f838 	bl	800224e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d10e      	bne.n	800220a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d107      	bne.n	800220a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f06f 0220 	mvn.w	r2, #32
 8002202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8c7 	bl	8002398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	; (8002378 <TIM_Base_SetConfig+0x114>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d00f      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3d      	ldr	r2, [pc, #244]	; (800237c <TIM_Base_SetConfig+0x118>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00b      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <TIM_Base_SetConfig+0x11c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d007      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <TIM_Base_SetConfig+0x120>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <TIM_Base_SetConfig+0x124>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d108      	bne.n	80022b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <TIM_Base_SetConfig+0x114>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d01b      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2c      	ldr	r2, [pc, #176]	; (800237c <TIM_Base_SetConfig+0x118>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d017      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <TIM_Base_SetConfig+0x11c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <TIM_Base_SetConfig+0x120>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00f      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a29      	ldr	r2, [pc, #164]	; (8002388 <TIM_Base_SetConfig+0x124>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00b      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a28      	ldr	r2, [pc, #160]	; (800238c <TIM_Base_SetConfig+0x128>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <TIM_Base_SetConfig+0x12c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d003      	beq.n	80022fe <TIM_Base_SetConfig+0x9a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <TIM_Base_SetConfig+0x130>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d108      	bne.n	8002310 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <TIM_Base_SetConfig+0x114>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00f      	beq.n	800235c <TIM_Base_SetConfig+0xf8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <TIM_Base_SetConfig+0x124>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00b      	beq.n	800235c <TIM_Base_SetConfig+0xf8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <TIM_Base_SetConfig+0x128>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0xf8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <TIM_Base_SetConfig+0x12c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0xf8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <TIM_Base_SetConfig+0x130>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d103      	bne.n	8002364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	615a      	str	r2, [r3, #20]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800
 8002384:	40000c00 	.word	0x40000c00
 8002388:	40013400 	.word	0x40013400
 800238c:	40014000 	.word	0x40014000
 8002390:	40014400 	.word	0x40014400
 8002394:	40014800 	.word	0x40014800

08002398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0208 	add.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 0208 	add.w	r2, r3, #8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f103 0208 	add.w	r2, r3, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d103      	bne.n	8002496 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e00c      	b.n	80024b0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3308      	adds	r3, #8
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e002      	b.n	80024a4 <vListInsert+0x2e>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d2f6      	bcs.n	800249e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	601a      	str	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6852      	ldr	r2, [r2, #4]
 8002508:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	d103      	bne.n	800251c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1e5a      	subs	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );

    taskENTER_CRITICAL();
 800254a:	f001 fb35 	bl	8003bb8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	441a      	add	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	3b01      	subs	r3, #1
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	441a      	add	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	22ff      	movs	r2, #255	; 0xff
 800258e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	; 0xff
 8002596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d114      	bne.n	80025ca <xQueueGenericReset+0x8e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01a      	beq.n	80025de <xQueueGenericReset+0xa2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3310      	adds	r3, #16
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 ff1d 	bl	80033ec <xTaskRemoveFromEventList>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <xQueueGenericReset+0xa2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <xQueueGenericReset+0xb0>)
 80025ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	e009      	b.n	80025de <xQueueGenericReset+0xa2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3310      	adds	r3, #16
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff00 	bl	80023d4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3324      	adds	r3, #36	; 0x24
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fefb 	bl	80023d4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025de:	f001 fb05 	bl	8003bec <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71fb      	strb	r3, [r7, #7]
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	61fb      	str	r3, [r7, #28]
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	3350      	adds	r3, #80	; 0x50
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fb8d 	bl	8003d2c <pvPortMalloc>
 8002612:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <xQueueGenericCreate+0x46>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3350      	adds	r3, #80	; 0x50
 8002622:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002624:	79fa      	ldrb	r2, [r7, #7]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4613      	mov	r3, r2
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f805 	bl	8002640 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002636:	69bb      	ldr	r3, [r7, #24]
    }
 8002638:	4618      	mov	r0, r3
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e002      	b.n	8002662 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800266e:	2101      	movs	r1, #1
 8002670:	69b8      	ldr	r0, [r7, #24]
 8002672:	f7ff ff63 	bl	800253c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	68f9      	ldr	r1, [r7, #12]
 8002684:	2073      	movs	r0, #115	; 0x73
 8002686:	f002 fb31 	bl	8004cec <SEGGER_SYSVIEW_RecordU32x3>
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80026b2:	2300      	movs	r3, #0
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f81d 	bl	80026f8 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80026d0:	2301      	movs	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	461a      	mov	r2, r3
 80026dc:	6939      	ldr	r1, [r7, #16]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff86 	bl	80025f0 <xQueueGenericCreate>
 80026e4:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff ffd3 	bl	8002692 <prvInitialiseMutex>

        return xNewQueue;
 80026ec:	68fb      	ldr	r3, [r7, #12]
    }
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800270e:	f001 fa53 	bl	8003bb8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <xQueueGenericSend+0x2c>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d136      	bne.n	8002792 <xQueueGenericSend+0x9a>
            {
                traceQUEUE_SEND( pxQueue );
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 f86c 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	460b      	mov	r3, r1
 8002736:	4601      	mov	r1, r0
 8002738:	205a      	movs	r0, #90	; 0x5a
 800273a:	f002 fb4d 	bl	8004dd8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6a38      	ldr	r0, [r7, #32]
 8002744:	f000 f8aa 	bl	800289c <prvCopyDataToQueue>
 8002748:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <xQueueGenericSend+0x7c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	3324      	adds	r3, #36	; 0x24
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fe48 	bl	80033ec <xTaskRemoveFromEventList>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <xQueueGenericSend+0x92>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <xQueueGenericSend+0x1a0>)
 8002764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	e00a      	b.n	800278a <xQueueGenericSend+0x92>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <xQueueGenericSend+0x92>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <xQueueGenericSend+0x1a0>)
 800277c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800278a:	f001 fa2f 	bl	8003bec <vPortExitCritical>
                return pdPASS;
 800278e:	2301      	movs	r3, #1
 8002790:	e07d      	b.n	800288e <xQueueGenericSend+0x196>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d110      	bne.n	80027ba <xQueueGenericSend+0xc2>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002798:	f001 fa28 	bl	8003bec <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 f830 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	4601      	mov	r1, r0
 80027b0:	205a      	movs	r0, #90	; 0x5a
 80027b2:	f002 fb11 	bl	8004dd8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e069      	b.n	800288e <xQueueGenericSend+0x196>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <xQueueGenericSend+0xd6>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fe69 	bl	800349c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027ca:	2301      	movs	r3, #1
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027ce:	f001 fa0d 	bl	8003bec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027d2:	f000 fc33 	bl	800303c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027d6:	f001 f9ef 	bl	8003bb8 <vPortEnterCritical>
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d103      	bne.n	80027f0 <xQueueGenericSend+0xf8>
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f6:	b25b      	sxtb	r3, r3
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d103      	bne.n	8002806 <xQueueGenericSend+0x10e>
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002806:	f001 f9f1 	bl	8003bec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800280a:	1d3a      	adds	r2, r7, #4
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fe58 	bl	80034c8 <xTaskCheckForTimeOut>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d124      	bne.n	8002868 <xQueueGenericSend+0x170>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f000 f8f8 	bl	8002a14 <prvIsQueueFull>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <xQueueGenericSend+0x164>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	3310      	adds	r3, #16
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fdc4 	bl	80033c0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002838:	6a38      	ldr	r0, [r7, #32]
 800283a:	f000 f899 	bl	8002970 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800283e:	f000 fc0b 	bl	8003058 <xTaskResumeAll>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f af62 	bne.w	800270e <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <xQueueGenericSend+0x1a0>)
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	e758      	b.n	800270e <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800285c:	6a38      	ldr	r0, [r7, #32]
 800285e:	f000 f887 	bl	8002970 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002862:	f000 fbf9 	bl	8003058 <xTaskResumeAll>
 8002866:	e752      	b.n	800270e <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002868:	6a38      	ldr	r0, [r7, #32]
 800286a:	f000 f881 	bl	8002970 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800286e:	f000 fbf3 	bl	8003058 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 ffc5 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	460b      	mov	r3, r1
 8002884:	4601      	mov	r1, r0
 8002886:	205a      	movs	r0, #90	; 0x5a
 8002888:	f002 faa6 	bl	8004dd8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800288c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800288e:	4618      	mov	r0, r3
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d14d      	bne.n	800295e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 feca 	bl	8003660 <xTaskPriorityDisinherit>
 80028cc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e043      	b.n	800295e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d119      	bne.n	8002910 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6858      	ldr	r0, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	461a      	mov	r2, r3
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	f003 f908 	bl	8005afc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	441a      	add	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	d32b      	bcc.n	800295e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	e026      	b.n	800295e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68d8      	ldr	r0, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	461a      	mov	r2, r3
 800291a:	68b9      	ldr	r1, [r7, #8]
 800291c:	f003 f8ee 	bl	8005afc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	425b      	negs	r3, r3
 800292a:	441a      	add	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	425b      	negs	r3, r3
 8002946:	441a      	add	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d105      	bne.n	800295e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3b01      	subs	r3, #1
 800295c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002966:	697b      	ldr	r3, [r7, #20]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002978:	f001 f91e 	bl	8003bb8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002982:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002984:	e011      	b.n	80029aa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d012      	beq.n	80029b4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fd2a 	bl	80033ec <xTaskRemoveFromEventList>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800299e:	f000 fddd 	bl	800355c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dce9      	bgt.n	8002986 <prvUnlockQueue+0x16>
 80029b2:	e000      	b.n	80029b6 <prvUnlockQueue+0x46>
                        break;
 80029b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80029be:	f001 f915 	bl	8003bec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80029c2:	f001 f8f9 	bl	8003bb8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029ce:	e011      	b.n	80029f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3310      	adds	r3, #16
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fd05 	bl	80033ec <xTaskRemoveFromEventList>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80029e8:	f000 fdb8 	bl	800355c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	dce9      	bgt.n	80029d0 <prvUnlockQueue+0x60>
 80029fc:	e000      	b.n	8002a00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80029fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	22ff      	movs	r2, #255	; 0xff
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a08:	f001 f8f0 	bl	8003bec <vPortExitCritical>
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a1c:	f001 f8cc 	bl	8003bb8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d102      	bne.n	8002a32 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e001      	b.n	8002a36 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a36:	f001 f8d9 	bl	8003bec <vPortExitCritical>

    return xReturn;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08c      	sub	sp, #48	; 0x30
 8002a48:	af04      	add	r7, sp, #16
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f967 	bl	8003d2c <pvPortMalloc>
 8002a5e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00e      	beq.n	8002a84 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a66:	2058      	movs	r0, #88	; 0x58
 8002a68:	f001 f960 	bl	8003d2c <pvPortMalloc>
 8002a6c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7a:	e005      	b.n	8002a88 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002a7c:	6978      	ldr	r0, [r7, #20]
 8002a7e:	f001 fa03 	bl	8003e88 <vPortFree>
 8002a82:	e001      	b.n	8002a88 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d013      	beq.n	8002ab6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	2300      	movs	r3, #0
 8002a92:	9303      	str	r3, [sp, #12]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f80e 	bl	8002ac6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002aaa:	69f8      	ldr	r0, [r7, #28]
 8002aac:	f000 f892 	bl	8002bd4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	e002      	b.n	8002abc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002abc:	69bb      	ldr	r3, [r7, #24]
    }
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	461a      	mov	r2, r3
 8002ade:	21a5      	movs	r1, #165	; 0xa5
 8002ae0:	f003 f81a 	bl	8005b18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002aee:	3b01      	subs	r3, #1
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f023 0307 	bic.w	r3, r3, #7
 8002afc:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01f      	beq.n	8002b44 <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e012      	b.n	8002b30 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4413      	add	r3, r2
 8002b10:	7819      	ldrb	r1, [r3, #0]
 8002b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4413      	add	r3, r2
 8002b18:	3334      	adds	r3, #52	; 0x34
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	d9e9      	bls.n	8002b0a <prvInitialiseNewTask+0x44>
 8002b36:	e000      	b.n	8002b3a <prvInitialiseNewTask+0x74>
            {
                break;
 8002b38:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b42:	e003      	b.n	8002b4c <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d901      	bls.n	8002b56 <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b52:	2304      	movs	r3, #4
 8002b54:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	6a3a      	ldr	r2, [r7, #32]
 8002b60:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	2200      	movs	r2, #0
 8002b66:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fc51 	bl	8002414 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	3318      	adds	r3, #24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fc4c 	bl	8002414 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f1c3 0205 	rsb	r2, r3, #5
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	3350      	adds	r3, #80	; 0x50
 8002b96:	2204      	movs	r2, #4
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 ffbc 	bl	8005b18 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	3354      	adds	r3, #84	; 0x54
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 ffb5 	bl	8005b18 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	6938      	ldr	r0, [r7, #16]
 8002bb4:	f000 ff56 	bl	8003a64 <pxPortInitialiseStack>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bdc:	f000 ffec 	bl	8003bb8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <prvAddNewTaskToReadyList+0xfc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <prvAddNewTaskToReadyList+0xfc>)
 8002be8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bea:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <prvAddNewTaskToReadyList+0x100>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002bf2:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <prvAddNewTaskToReadyList+0x100>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bf8:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <prvAddNewTaskToReadyList+0xfc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d110      	bne.n	8002c22 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c00:	f000 fcd0 	bl	80035a4 <prvInitialiseTaskLists>
 8002c04:	e00d      	b.n	8002c22 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <prvAddNewTaskToReadyList+0x104>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <prvAddNewTaskToReadyList+0x100>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d802      	bhi.n	8002c22 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c1c:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <prvAddNewTaskToReadyList+0x100>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <prvAddNewTaskToReadyList+0x108>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	4a2c      	ldr	r2, [pc, #176]	; (8002cdc <prvAddNewTaskToReadyList+0x108>)
 8002c2a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <prvAddNewTaskToReadyList+0x108>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <prvAddNewTaskToReadyList+0x94>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fcbb 	bl	80055b8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	461d      	mov	r5, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461c      	mov	r4, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	1ae3      	subs	r3, r4, r3
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	462b      	mov	r3, r5
 8002c64:	f001 faba 	bl	80041dc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fd28 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2201      	movs	r2, #1
 8002c76:	409a      	lsls	r2, r3
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <prvAddNewTaskToReadyList+0x10c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <prvAddNewTaskToReadyList+0x10c>)
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <prvAddNewTaskToReadyList+0x110>)
 8002c90:	441a      	add	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3304      	adds	r3, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f7ff fbc8 	bl	800242e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c9e:	f000 ffa5 	bl	8003bec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <prvAddNewTaskToReadyList+0x104>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <prvAddNewTaskToReadyList+0x100>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d207      	bcs.n	8002cc8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <prvAddNewTaskToReadyList+0x114>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	200001c0 	.word	0x200001c0
 8002cd4:	20000100 	.word	0x20000100
 8002cd8:	200001cc 	.word	0x200001cc
 8002cdc:	200001dc 	.word	0x200001dc
 8002ce0:	200001c8 	.word	0x200001c8
 8002ce4:	20000104 	.word	0x20000104
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <vTaskDelay+0x2c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8002cfe:	f000 f99d 	bl	800303c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	2023      	movs	r0, #35	; 0x23
 8002d06:	f001 ff5b 	bl	8004bc0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fe31 	bl	8003974 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002d12:	f000 f9a1 	bl	8003058 <xTaskResumeAll>
 8002d16:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <vTaskDelay+0x42>
        {
            portYIELD_WITHIN_API();
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <vTaskDelay+0x4c>)
 8002d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d44:	f000 ff38 	bl	8003bb8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <vTaskSuspend+0x18>
 8002d4e:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <vTaskSuspend+0x11c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e000      	b.n	8002d56 <vTaskSuspend+0x1a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fd52 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4619      	mov	r1, r3
 8002d64:	2029      	movs	r0, #41	; 0x29
 8002d66:	f001 ff2b 	bl	8004bc0 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fbba 	bl	80024e8 <uxListRemove>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7e:	4937      	ldr	r1, [pc, #220]	; (8002e5c <vTaskSuspend+0x120>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <vTaskSuspend+0x6a>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2201      	movs	r2, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <vTaskSuspend+0x124>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4013      	ands	r3, r2
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <vTaskSuspend+0x124>)
 8002da4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3318      	adds	r3, #24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fb98 	bl	80024e8 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	211b      	movs	r1, #27
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fcc1 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4826      	ldr	r0, [pc, #152]	; (8002e64 <vTaskSuspend+0x128>)
 8002dca:	f7ff fb30 	bl	800242e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e010      	b.n	8002df6 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3354      	adds	r3, #84	; 0x54
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	3354      	adds	r3, #84	; 0x54
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3301      	adds	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	ddeb      	ble.n	8002dd4 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002dfc:	f000 fef6 	bl	8003bec <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <vTaskSuspend+0x12c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002e08:	f000 fed6 	bl	8003bb8 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002e0c:	f000 fc0c 	bl	8003628 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002e10:	f000 feec 	bl	8003bec <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <vTaskSuspend+0x11c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d118      	bne.n	8002e50 <vTaskSuspend+0x114>
        {
            if( xSchedulerRunning != pdFALSE )
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <vTaskSuspend+0x12c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <vTaskSuspend+0xfc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <vTaskSuspend+0x130>)
 8002e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002e36:	e00b      	b.n	8002e50 <vTaskSuspend+0x114>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <vTaskSuspend+0x128>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <vTaskSuspend+0x134>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d103      	bne.n	8002e4c <vTaskSuspend+0x110>
                    pxCurrentTCB = NULL;
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <vTaskSuspend+0x11c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    }
 8002e4a:	e001      	b.n	8002e50 <vTaskSuspend+0x114>
                    vTaskSwitchContext();
 8002e4c:	f000 fa64 	bl	8003318 <vTaskSwitchContext>
    }
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000100 	.word	0x20000100
 8002e5c:	20000104 	.word	0x20000104
 8002e60:	200001c8 	.word	0x200001c8
 8002e64:	200001ac 	.word	0x200001ac
 8002e68:	200001cc 	.word	0x200001cc
 8002e6c:	e000ed04 	.word	0xe000ed04
 8002e70:	200001c0 	.word	0x200001c0

08002e74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <prvTaskIsTaskSuspended+0x40>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10a      	bne.n	8002ea4 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <prvTaskIsTaskSuspended+0x44>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d005      	beq.n	8002ea4 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	200001ac 	.word	0x200001ac
 8002eb8:	20000198 	.word	0x20000198

08002ebc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
        TCB_t * const pxTCB = xTaskToResume;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	61bb      	str	r3, [r7, #24]

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002ecc:	f3ef 8211 	mrs	r2, BASEPRI
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	613a      	str	r2, [r7, #16]
 8002ee2:	60fb      	str	r3, [r7, #12]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002ee4:	693b      	ldr	r3, [r7, #16]
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ee6:	617b      	str	r3, [r7, #20]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002ee8:	69b8      	ldr	r0, [r7, #24]
 8002eea:	f7ff ffc3 	bl	8002e74 <prvTaskIsTaskSuspended>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d03f      	beq.n	8002f74 <xTaskResumeFromISR+0xb8>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fc84 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 8002efc:	4603      	mov	r3, r0
 8002efe:	4619      	mov	r1, r3
 8002f00:	202b      	movs	r0, #43	; 0x2b
 8002f02:	f001 fe5d 	bl	8004bc0 <SEGGER_SYSVIEW_RecordU32>

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f06:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <xTaskResumeFromISR+0xd0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d12c      	bne.n	8002f68 <xTaskResumeFromISR+0xac>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <xTaskResumeFromISR+0xd4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d304      	bcc.n	8002f26 <xTaskResumeFromISR+0x6a>
                    {
                        xYieldRequired = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <xTaskResumeFromISR+0xd8>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fadc 	bl	80024e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fbc4 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <xTaskResumeFromISR+0xdc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <xTaskResumeFromISR+0xdc>)
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <xTaskResumeFromISR+0xe0>)
 8002f58:	441a      	add	r2, r3
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f7ff fa64 	bl	800242e <vListInsertEnd>
 8002f66:	e005      	b.n	8002f74 <xTaskResumeFromISR+0xb8>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <xTaskResumeFromISR+0xe4>)
 8002f70:	f7ff fa5d 	bl	800242e <vListInsertEnd>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f7e:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 8002f80:	69fb      	ldr	r3, [r7, #28]
    }
 8002f82:	4618      	mov	r0, r3
 8002f84:	3720      	adds	r7, #32
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200001e8 	.word	0x200001e8
 8002f90:	20000100 	.word	0x20000100
 8002f94:	200001d4 	.word	0x200001d4
 8002f98:	200001c8 	.word	0x200001c8
 8002f9c:	20000104 	.word	0x20000104
 8002fa0:	20000198 	.word	0x20000198

08002fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <vTaskStartScheduler+0x78>)
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb8:	4919      	ldr	r1, [pc, #100]	; (8003020 <vTaskStartScheduler+0x7c>)
 8002fba:	481a      	ldr	r0, [pc, #104]	; (8003024 <vTaskStartScheduler+0x80>)
 8002fbc:	f7ff fd42 	bl	8002a44 <xTaskCreate>
 8002fc0:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d123      	bne.n	8003010 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	603b      	str	r3, [r7, #0]
    }
 8002fda:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <vTaskStartScheduler+0x84>)
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <vTaskStartScheduler+0x88>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <vTaskStartScheduler+0x8c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <vTaskStartScheduler+0x90>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <vTaskStartScheduler+0x78>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d102      	bne.n	8003002 <vTaskStartScheduler+0x5e>
 8002ffc:	f002 fac0 	bl	8005580 <SEGGER_SYSVIEW_OnIdle>
 8003000:	e004      	b.n	800300c <vTaskStartScheduler+0x68>
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <vTaskStartScheduler+0x90>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fb18 	bl	800563c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800300c:	f000 fda2 	bl	8003b54 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <vTaskStartScheduler+0x94>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200001e4 	.word	0x200001e4
 8003020:	080065d8 	.word	0x080065d8
 8003024:	08003575 	.word	0x08003575
 8003028:	200001e0 	.word	0x200001e0
 800302c:	200001cc 	.word	0x200001cc
 8003030:	200001c4 	.word	0x200001c4
 8003034:	20000100 	.word	0x20000100
 8003038:	2000000c 	.word	0x2000000c

0800303c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <vTaskSuspendAll+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	4a03      	ldr	r2, [pc, #12]	; (8003054 <vTaskSuspendAll+0x18>)
 8003048:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	200001e8 	.word	0x200001e8

08003058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003066:	f000 fda7 	bl	8003bb8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <xTaskResumeAll+0x100>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3b01      	subs	r3, #1
 8003070:	4a39      	ldr	r2, [pc, #228]	; (8003158 <xTaskResumeAll+0x100>)
 8003072:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003074:	4b38      	ldr	r3, [pc, #224]	; (8003158 <xTaskResumeAll+0x100>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d165      	bne.n	8003148 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800307c:	4b37      	ldr	r3, [pc, #220]	; (800315c <xTaskResumeAll+0x104>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d061      	beq.n	8003148 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003084:	e032      	b.n	80030ec <xTaskResumeAll+0x94>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <xTaskResumeAll+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3318      	adds	r3, #24
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fa28 	bl	80024e8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3304      	adds	r3, #4
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fa23 	bl	80024e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fb0b 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <xTaskResumeAll+0x10c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	4a2a      	ldr	r2, [pc, #168]	; (8003164 <xTaskResumeAll+0x10c>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <xTaskResumeAll+0x110>)
 80030ca:	441a      	add	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7ff f9ab 	bl	800242e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <xTaskResumeAll+0x114>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <xTaskResumeAll+0x94>
                    {
                        xYieldPending = pdTRUE;
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <xTaskResumeAll+0x118>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ec:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <xTaskResumeAll+0x108>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1c8      	bne.n	8003086 <xTaskResumeAll+0x2e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <xTaskResumeAll+0xa6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030fa:	f000 fa95 	bl	8003628 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <xTaskResumeAll+0x11c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <xTaskResumeAll+0xd4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800310a:	f000 f859 	bl	80031c0 <xTaskIncrementTick>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <xTaskResumeAll+0xc2>
                            {
                                xYieldPending = pdTRUE;
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <xTaskResumeAll+0x118>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3b01      	subs	r3, #1
 800311e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f1      	bne.n	800310a <xTaskResumeAll+0xb2>

                        xPendedTicks = 0;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <xTaskResumeAll+0x11c>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <xTaskResumeAll+0x118>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d009      	beq.n	8003148 <xTaskResumeAll+0xf0>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <xTaskResumeAll+0x120>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003148:	f000 fd50 	bl	8003bec <vPortExitCritical>

    return xAlreadyYielded;
 800314c:	68bb      	ldr	r3, [r7, #8]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200001e8 	.word	0x200001e8
 800315c:	200001c0 	.word	0x200001c0
 8003160:	20000198 	.word	0x20000198
 8003164:	200001c8 	.word	0x200001c8
 8003168:	20000104 	.word	0x20000104
 800316c:	20000100 	.word	0x20000100
 8003170:	200001d4 	.word	0x200001d4
 8003174:	200001d0 	.word	0x200001d0
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <xTaskGetTickCount+0x1c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003188:	687b      	ldr	r3, [r7, #4]
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200001c4 	.word	0x200001c4

0800319c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <xTaskGetTickCountFromISR+0x20>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031ac:	683b      	ldr	r3, [r7, #0]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200001c4 	.word	0x200001c4

080031c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <xTaskIncrementTick+0x12c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 8082 	bne.w	80032d8 <xTaskIncrementTick+0x118>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031d4:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <xTaskIncrementTick+0x130>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031dc:	4a44      	ldr	r2, [pc, #272]	; (80032f0 <xTaskIncrementTick+0x130>)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d110      	bne.n	800320a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <xTaskIncrementTick+0x134>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <xTaskIncrementTick+0x138>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <xTaskIncrementTick+0x134>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <xTaskIncrementTick+0x138>)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <xTaskIncrementTick+0x13c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <xTaskIncrementTick+0x13c>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	f000 fa0f 	bl	8003628 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <xTaskIncrementTick+0x140>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d34c      	bcc.n	80032ae <xTaskIncrementTick+0xee>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003214:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <xTaskIncrementTick+0x134>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <xTaskIncrementTick+0x68>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <xTaskIncrementTick+0x140>)
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	601a      	str	r2, [r3, #0]
                    break;
 8003226:	e042      	b.n	80032ae <xTaskIncrementTick+0xee>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <xTaskIncrementTick+0x134>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d203      	bcs.n	8003248 <xTaskIncrementTick+0x88>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003240:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <xTaskIncrementTick+0x140>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003246:	e032      	b.n	80032ae <xTaskIncrementTick+0xee>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3304      	adds	r3, #4
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f94b 	bl	80024e8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <xTaskIncrementTick+0xa4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3318      	adds	r3, #24
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f942 	bl	80024e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f002 fa2a 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2201      	movs	r2, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <xTaskIncrementTick+0x144>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <xTaskIncrementTick+0x144>)
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <xTaskIncrementTick+0x148>)
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7ff f8ca 	bl	800242e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <xTaskIncrementTick+0x14c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3b5      	bcc.n	8003214 <xTaskIncrementTick+0x54>
                            {
                                xSwitchRequired = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ac:	e7b2      	b.n	8003214 <xTaskIncrementTick+0x54>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <xTaskIncrementTick+0x14c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4914      	ldr	r1, [pc, #80]	; (8003308 <xTaskIncrementTick+0x148>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d901      	bls.n	80032ca <xTaskIncrementTick+0x10a>
                {
                    xSwitchRequired = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <xTaskIncrementTick+0x150>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e004      	b.n	80032e2 <xTaskIncrementTick+0x122>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <xTaskIncrementTick+0x154>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <xTaskIncrementTick+0x154>)
 80032e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200001e8 	.word	0x200001e8
 80032f0:	200001c4 	.word	0x200001c4
 80032f4:	20000190 	.word	0x20000190
 80032f8:	20000194 	.word	0x20000194
 80032fc:	200001d8 	.word	0x200001d8
 8003300:	200001e0 	.word	0x200001e0
 8003304:	200001c8 	.word	0x200001c8
 8003308:	20000104 	.word	0x20000104
 800330c:	20000100 	.word	0x20000100
 8003310:	200001d4 	.word	0x200001d4
 8003314:	200001d0 	.word	0x200001d0

08003318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800331e:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <vTaskSwitchContext+0x90>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003326:	4b21      	ldr	r3, [pc, #132]	; (80033ac <vTaskSwitchContext+0x94>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800332c:	e038      	b.n	80033a0 <vTaskSwitchContext+0x88>
        xYieldPending = pdFALSE;
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <vTaskSwitchContext+0x94>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <vTaskSwitchContext+0x98>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f1c3 031f 	rsb	r3, r3, #31
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <vTaskSwitchContext+0x9c>)
 8003356:	4413      	add	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3308      	adds	r3, #8
 800336c:	429a      	cmp	r2, r3
 800336e:	d104      	bne.n	800337a <vTaskSwitchContext+0x62>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <vTaskSwitchContext+0xa0>)
 8003382:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <vTaskSwitchContext+0xa0>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <vTaskSwitchContext+0xa4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d102      	bne.n	8003396 <vTaskSwitchContext+0x7e>
 8003390:	f002 f8f6 	bl	8005580 <SEGGER_SYSVIEW_OnIdle>
}
 8003394:	e004      	b.n	80033a0 <vTaskSwitchContext+0x88>
        traceTASK_SWITCHED_IN();
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <vTaskSwitchContext+0xa0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f002 f94e 	bl	800563c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200001e8 	.word	0x200001e8
 80033ac:	200001d4 	.word	0x200001d4
 80033b0:	200001c8 	.word	0x200001c8
 80033b4:	20000104 	.word	0x20000104
 80033b8:	20000100 	.word	0x20000100
 80033bc:	200001e4 	.word	0x200001e4

080033c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <vTaskPlaceOnEventList+0x28>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3318      	adds	r3, #24
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff f84f 	bl	8002476 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033d8:	2101      	movs	r1, #1
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f000 faca 	bl	8003974 <prvAddCurrentTaskToDelayedList>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000100 	.word	0x20000100

080033ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3318      	adds	r3, #24
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f871 	bl	80024e8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <xTaskRemoveFromEventList+0x98>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d120      	bne.n	8003450 <xTaskRemoveFromEventList+0x64>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3304      	adds	r3, #4
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f868 	bl	80024e8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f002 f950 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <xTaskRemoveFromEventList+0x9c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <xTaskRemoveFromEventList+0x9c>)
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <xTaskRemoveFromEventList+0xa0>)
 8003440:	441a      	add	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fe fff0 	bl	800242e <vListInsertEnd>
 800344e:	e005      	b.n	800345c <xTaskRemoveFromEventList+0x70>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	480e      	ldr	r0, [pc, #56]	; (8003490 <xTaskRemoveFromEventList+0xa4>)
 8003458:	f7fe ffe9 	bl	800242e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <xTaskRemoveFromEventList+0xa8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d905      	bls.n	8003476 <xTaskRemoveFromEventList+0x8a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <xTaskRemoveFromEventList+0xac>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e001      	b.n	800347a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        xReturn = pdFALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200001e8 	.word	0x200001e8
 8003488:	200001c8 	.word	0x200001c8
 800348c:	20000104 	.word	0x20000104
 8003490:	20000198 	.word	0x20000198
 8003494:	20000100 	.word	0x20000100
 8003498:	200001d4 	.word	0x200001d4

0800349c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <vTaskInternalSetTimeOutState+0x24>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <vTaskInternalSetTimeOutState+0x28>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	200001d8 	.word	0x200001d8
 80034c4:	200001c4 	.word	0x200001c4

080034c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80034d2:	f000 fb71 	bl	8003bb8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <xTaskCheckForTimeOut+0x8c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d102      	bne.n	80034f6 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e026      	b.n	8003544 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <xTaskCheckForTimeOut+0x90>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d00a      	beq.n	8003518 <xTaskCheckForTimeOut+0x50>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	429a      	cmp	r2, r3
 800350a:	d305      	bcc.n	8003518 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e015      	b.n	8003544 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	429a      	cmp	r2, r3
 8003520:	d20b      	bcs.n	800353a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ffb4 	bl	800349c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e004      	b.n	8003544 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003540:	2301      	movs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003544:	f000 fb52 	bl	8003bec <vPortExitCritical>

    return xReturn;
 8003548:	697b      	ldr	r3, [r7, #20]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200001c4 	.word	0x200001c4
 8003558:	200001d8 	.word	0x200001d8

0800355c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <vTaskMissedYield+0x14>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	200001d4 	.word	0x200001d4

08003574 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800357c:	f000 f84c 	bl	8003618 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <prvIdleTask+0x28>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d9f9      	bls.n	800357c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <prvIdleTask+0x2c>)
 800358a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003598:	e7f0      	b.n	800357c <prvIdleTask+0x8>
 800359a:	bf00      	nop
 800359c:	20000104 	.word	0x20000104
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	e00c      	b.n	80035ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a10      	ldr	r2, [pc, #64]	; (80035fc <prvInitialiseTaskLists+0x58>)
 80035bc:	4413      	add	r3, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe ff08 	bl	80023d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3301      	adds	r3, #1
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d9ef      	bls.n	80035b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80035d0:	480b      	ldr	r0, [pc, #44]	; (8003600 <prvInitialiseTaskLists+0x5c>)
 80035d2:	f7fe feff 	bl	80023d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80035d6:	480b      	ldr	r0, [pc, #44]	; (8003604 <prvInitialiseTaskLists+0x60>)
 80035d8:	f7fe fefc 	bl	80023d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80035dc:	480a      	ldr	r0, [pc, #40]	; (8003608 <prvInitialiseTaskLists+0x64>)
 80035de:	f7fe fef9 	bl	80023d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80035e2:	480a      	ldr	r0, [pc, #40]	; (800360c <prvInitialiseTaskLists+0x68>)
 80035e4:	f7fe fef6 	bl	80023d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <prvInitialiseTaskLists+0x6c>)
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <prvInitialiseTaskLists+0x5c>)
 80035ec:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <prvInitialiseTaskLists+0x70>)
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <prvInitialiseTaskLists+0x60>)
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000104 	.word	0x20000104
 8003600:	20000168 	.word	0x20000168
 8003604:	2000017c 	.word	0x2000017c
 8003608:	20000198 	.word	0x20000198
 800360c:	200001ac 	.word	0x200001ac
 8003610:	20000190 	.word	0x20000190
 8003614:	20000194 	.word	0x20000194

08003618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <prvResetNextTaskUnblockTime+0x30>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <prvResetNextTaskUnblockTime+0x34>)
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800363e:	e005      	b.n	800364c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <prvResetNextTaskUnblockTime+0x30>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <prvResetNextTaskUnblockTime+0x34>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000190 	.word	0x20000190
 800365c:	200001e0 	.word	0x200001e0

08003660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d049      	beq.n	800370a <xTaskPriorityDisinherit+0xaa>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	1e5a      	subs	r2, r3, #1
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	429a      	cmp	r2, r3
 800368a:	d03e      	beq.n	800370a <xTaskPriorityDisinherit+0xaa>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d13a      	bne.n	800370a <xTaskPriorityDisinherit+0xaa>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3304      	adds	r3, #4
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe ff25 	bl	80024e8 <uxListRemove>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <xTaskPriorityDisinherit+0xb4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4013      	ands	r3, r2
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <xTaskPriorityDisinherit+0xb4>)
 80036b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4619      	mov	r1, r3
 80036be:	204a      	movs	r0, #74	; 0x4a
 80036c0:	f001 fa7e 	bl	8004bc0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f1c3 0205 	rsb	r2, r3, #5
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <xTaskPriorityDisinherit+0xb4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <xTaskPriorityDisinherit+0xb4>)
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <xTaskPriorityDisinherit+0xb8>)
 80036f8:	441a      	add	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f7fe fe94 	bl	800242e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003706:	2301      	movs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800370a:	68fb      	ldr	r3, [r7, #12]
    }
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200001c8 	.word	0x200001c8
 8003718:	20000104 	.word	0x20000104

0800371c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 800372a:	f000 fa45 	bl	8003bb8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	3354      	adds	r3, #84	; 0x54
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d022      	beq.n	8003786 <xTaskGenericNotifyWait+0x6a>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003740:	4b31      	ldr	r3, [pc, #196]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	3214      	adds	r2, #20
 8003748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	43d2      	mvns	r2, r2
 8003750:	4011      	ands	r1, r2
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	3214      	adds	r2, #20
 8003756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800375a:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	3354      	adds	r3, #84	; 0x54
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <xTaskGenericNotifyWait+0x6a>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800376e:	2101      	movs	r1, #1
 8003770:	6a38      	ldr	r0, [r7, #32]
 8003772:	f000 f8ff 	bl	8003974 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003776:	4b25      	ldr	r3, [pc, #148]	; (800380c <xTaskGenericNotifyWait+0xf0>)
 8003778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003786:	f000 fa31 	bl	8003bec <vPortExitCritical>

        taskENTER_CRITICAL();
 800378a:	f000 fa15 	bl	8003bb8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	2040      	movs	r0, #64	; 0x40
 800379c:	f001 fb1c 	bl	8004dd8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d007      	beq.n	80037b6 <xTaskGenericNotifyWait+0x9a>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	3214      	adds	r2, #20
 80037ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	3354      	adds	r3, #84	; 0x54
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d002      	beq.n	80037ce <xTaskGenericNotifyWait+0xb2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e00e      	b.n	80037ec <xTaskGenericNotifyWait+0xd0>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	3214      	adds	r2, #20
 80037d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	43d2      	mvns	r2, r2
 80037de:	4011      	ands	r1, r2
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	3214      	adds	r2, #20
 80037e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <xTaskGenericNotifyWait+0xec>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	3354      	adds	r3, #84	; 0x54
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80037fa:	f000 f9f7 	bl	8003bec <vPortExitCritical>

        return xReturn;
 80037fe:	697b      	ldr	r3, [r7, #20]
    }
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000100 	.word	0x20000100
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800381e:	2301      	movs	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	61bb      	str	r3, [r7, #24]

        taskENTER_CRITICAL();
 8003826:	f000 f9c7 	bl	8003bb8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <xTaskGenericNotify+0x2e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	3214      	adds	r2, #20
 8003836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4413      	add	r3, r2
 8003844:	3354      	adds	r3, #84	; 0x54
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	75fb      	strb	r3, [r7, #23]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4413      	add	r3, r2
 8003850:	3354      	adds	r3, #84	; 0x54
 8003852:	2202      	movs	r2, #2
 8003854:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d83b      	bhi.n	80038d4 <xTaskGenericNotify+0xc4>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <xTaskGenericNotify+0x54>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	080038d5 	.word	0x080038d5
 8003868:	08003879 	.word	0x08003879
 800386c:	08003895 	.word	0x08003895
 8003870:	080038ad 	.word	0x080038ad
 8003874:	080038bb 	.word	0x080038bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	3214      	adds	r2, #20
 800387e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	3214      	adds	r2, #20
 800388e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003892:	e020      	b.n	80038d6 <xTaskGenericNotify+0xc6>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	3214      	adds	r2, #20
 800389a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	3214      	adds	r2, #20
 80038a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80038aa:	e014      	b.n	80038d6 <xTaskGenericNotify+0xc6>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	3214      	adds	r2, #20
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80038b8:	e00d      	b.n	80038d6 <xTaskGenericNotify+0xc6>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d006      	beq.n	80038ce <xTaskGenericNotify+0xbe>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	3214      	adds	r2, #20
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80038cc:	e003      	b.n	80038d6 <xTaskGenericNotify+0xc6>
                        xReturn = pdFAIL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
                    break;
 80038d2:	e000      	b.n	80038d6 <xTaskGenericNotify+0xc6>
                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );

                    break;
 80038d4:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 ff93 	bl	8005804 <SEGGER_SYSVIEW_ShrinkId>
 80038de:	4601      	mov	r1, r0
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	203e      	movs	r0, #62	; 0x3e
 80038ec:	f001 fa74 	bl	8004dd8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d12e      	bne.n	8003954 <xTaskGenericNotify+0x144>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fdf4 	bl	80024e8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fedc 	bl	80056c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	2201      	movs	r2, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <xTaskGenericNotify+0x154>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	4a13      	ldr	r2, [pc, #76]	; (8003964 <xTaskGenericNotify+0x154>)
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <xTaskGenericNotify+0x158>)
 8003928:	441a      	add	r2, r3
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7fe fd7c 	bl	800242e <vListInsertEnd>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <xTaskGenericNotify+0x15c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	429a      	cmp	r2, r3
 8003942:	d907      	bls.n	8003954 <xTaskGenericNotify+0x144>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <xTaskGenericNotify+0x160>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003954:	f000 f94a 	bl	8003bec <vPortExitCritical>

        return xReturn;
 8003958:	69fb      	ldr	r3, [r7, #28]
    }
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200001c8 	.word	0x200001c8
 8003968:	20000104 	.word	0x20000104
 800396c:	20000100 	.word	0x20000100
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800397e:	4b32      	ldr	r3, [pc, #200]	; (8003a48 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003984:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3304      	adds	r3, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fdac 	bl	80024e8 <uxListRemove>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003996:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	2201      	movs	r2, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4013      	ands	r3, r2
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <prvAddCurrentTaskToDelayedList+0xdc>)
 80039ac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d110      	bne.n	80039d8 <prvAddCurrentTaskToDelayedList+0x64>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	211b      	movs	r1, #27
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 febe 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4820      	ldr	r0, [pc, #128]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039d2:	f7fe fd2c 	bl	800242e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039d6:	e032      	b.n	8003a3e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d20f      	bcs.n	8003a10 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039f0:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2104      	movs	r1, #4
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fea4 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xe4>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fe fd34 	bl	8002476 <vListInsert>
}
 8003a0e:	e016      	b.n	8003a3e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2104      	movs	r1, #4
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fe94 	bl	8005744 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3304      	adds	r3, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7fe fd24 	bl	8002476 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d202      	bcs.n	8003a3e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200001c4 	.word	0x200001c4
 8003a4c:	20000100 	.word	0x20000100
 8003a50:	200001c8 	.word	0x200001c8
 8003a54:	200001ac 	.word	0x200001ac
 8003a58:	20000194 	.word	0x20000194
 8003a5c:	20000190 	.word	0x20000190
 8003a60:	200001e0 	.word	0x200001e0

08003a64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b04      	subs	r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b04      	subs	r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b04      	subs	r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <pxPortInitialiseStack+0x64>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3b14      	subs	r3, #20
 8003a9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b04      	subs	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f06f 0202 	mvn.w	r2, #2
 8003ab2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b20      	subs	r3, #32
 8003ab8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	08003acd 	.word	0x08003acd

08003acc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	607b      	str	r3, [r7, #4]
    }
 8003ae8:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003aea:	bf00      	nop
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0fc      	beq.n	8003aec <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <pxCurrentTCBConst2>)
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	6808      	ldr	r0, [r1, #0]
 8003b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0a:	f380 8809 	msr	PSP, r0
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f380 8811 	msr	BASEPRI, r0
 8003b1a:	4770      	bx	lr
 8003b1c:	f3af 8000 	nop.w

08003b20 <pxCurrentTCBConst2>:
 8003b20:	20000100 	.word	0x20000100
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop

08003b28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b28:	4808      	ldr	r0, [pc, #32]	; (8003b4c <prvPortStartFirstTask+0x24>)
 8003b2a:	6800      	ldr	r0, [r0, #0]
 8003b2c:	6800      	ldr	r0, [r0, #0]
 8003b2e:	f380 8808 	msr	MSP, r0
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f380 8814 	msr	CONTROL, r0
 8003b3a:	b662      	cpsie	i
 8003b3c:	b661      	cpsie	f
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	df00      	svc	0
 8003b48:	bf00      	nop
 8003b4a:	0000      	.short	0x0000
 8003b4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop

08003b54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <xPortStartScheduler+0x48>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <xPortStartScheduler+0x48>)
 8003b5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b62:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <xPortStartScheduler+0x48>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <xPortStartScheduler+0x48>)
 8003b6a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b6e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b70:	f000 f8b4 	bl	8003cdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <xPortStartScheduler+0x4c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003b7a:	f000 f8cb 	bl	8003d14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <xPortStartScheduler+0x50>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a08      	ldr	r2, [pc, #32]	; (8003ba4 <xPortStartScheduler+0x50>)
 8003b84:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b88:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b8a:	f7ff ffcd 	bl	8003b28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b8e:	f7ff fbc3 	bl	8003318 <vTaskSwitchContext>
    prvTaskExitError();
 8003b92:	f7ff ff9b 	bl	8003acc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	e000ed20 	.word	0xe000ed20
 8003ba0:	20000010 	.word	0x20000010
 8003ba4:	e000ef34 	.word	0xe000ef34

08003ba8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
        __asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
    }
 8003bd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <vPortEnterCritical+0x30>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <vPortEnterCritical+0x30>)
 8003bda:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000010 	.word	0x20000010

08003bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <vPortExitCritical+0x30>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <vPortExitCritical+0x30>)
 8003bfa:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <vPortExitCritical+0x30>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <vPortExitCritical+0x24>
 8003c04:	2300      	movs	r3, #0
 8003c06:	607b      	str	r3, [r7, #4]
        __asm volatile
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
    }
 8003c0e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	20000010 	.word	0x20000010

08003c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c20:	f3ef 8009 	mrs	r0, PSP
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <pxCurrentTCBConst>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f01e 0f10 	tst.w	lr, #16
 8003c30:	bf08      	it	eq
 8003c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	6010      	str	r0, [r2, #0]
 8003c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c44:	f380 8811 	msr	BASEPRI, r0
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f7ff fb62 	bl	8003318 <vTaskSwitchContext>
 8003c54:	f04f 0000 	mov.w	r0, #0
 8003c58:	f380 8811 	msr	BASEPRI, r0
 8003c5c:	bc09      	pop	{r0, r3}
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c66:	f01e 0f10 	tst.w	lr, #16
 8003c6a:	bf08      	it	eq
 8003c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c70:	f380 8809 	msr	PSP, r0
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst>:
 8003c80:	20000100 	.word	0x20000100
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	607b      	str	r3, [r7, #4]
    }
 8003ca0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003ca2:	f001 fbf3 	bl	800548c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ca6:	f7ff fa8b 	bl	80031c0 <xTaskIncrementTick>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003cb0:	f001 fc4a 	bl	8005548 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <SysTick_Handler+0x50>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e001      	b.n	8003cc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003cbe:	f001 fc27 	bl	8005510 <SEGGER_SYSVIEW_RecordExitISR>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f383 8811 	msr	BASEPRI, r3
    }
 8003ccc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <vPortSetupTimerInterrupt+0x28>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ce6:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <vPortSetupTimerInterrupt+0x2c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <vPortSetupTimerInterrupt+0x30>)
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003cf0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <vPortSetupTimerInterrupt+0x28>)
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	601a      	str	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000e010 	.word	0xe000e010
 8003d08:	e000e018 	.word	0xe000e018
 8003d0c:	e000e014 	.word	0xe000e014
 8003d10:	0001387f 	.word	0x0001387f

08003d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d24 <vPortEnableVFP+0x10>
 8003d18:	6801      	ldr	r1, [r0, #0]
 8003d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d1e:	6001      	str	r1, [r0, #0]
 8003d20:	4770      	bx	lr
 8003d22:	0000      	.short	0x0000
 8003d24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop

08003d2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8003d38:	f7ff f980 	bl	800303c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003d3c:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <pvPortMalloc+0x144>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003d44:	f000 f8e0 	bl	8003f08 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d48:	4b4a      	ldr	r3, [pc, #296]	; (8003e74 <pvPortMalloc+0x148>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 8086 	bne.w	8003e62 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01e      	beq.n	8003d9a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d218      	bcs.n	8003d9a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8003d68:	2208      	movs	r2, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d011      	beq.n	8003d9e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d205      	bcs.n	8003d94 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	3308      	adds	r3, #8
 8003d90:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d92:	e004      	b.n	8003d9e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d98:	e001      	b.n	8003d9e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d05e      	beq.n	8003e62 <pvPortMalloc+0x136>
 8003da4:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <pvPortMalloc+0x14c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d859      	bhi.n	8003e62 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003dae:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <pvPortMalloc+0x150>)
 8003db0:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003db2:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <pvPortMalloc+0x150>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003db8:	e004      	b.n	8003dc4 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d903      	bls.n	8003dd6 <pvPortMalloc+0xaa>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f1      	bne.n	8003dba <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <pvPortMalloc+0x144>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d040      	beq.n	8003e62 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2208      	movs	r2, #8
 8003de6:	4413      	add	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d90f      	bls.n	8003e22 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4413      	add	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e1c:	68b8      	ldr	r0, [r7, #8]
 8003e1e:	f000 f8d5 	bl	8003fcc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <pvPortMalloc+0x14c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <pvPortMalloc+0x14c>)
 8003e2e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <pvPortMalloc+0x14c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <pvPortMalloc+0x154>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d203      	bcs.n	8003e44 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <pvPortMalloc+0x14c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <pvPortMalloc+0x154>)
 8003e42:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <pvPortMalloc+0x148>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <pvPortMalloc+0x158>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <pvPortMalloc+0x158>)
 8003e60:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e62:	f7ff f8f9 	bl	8003058 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20012df4 	.word	0x20012df4
 8003e74:	20012e08 	.word	0x20012e08
 8003e78:	20012df8 	.word	0x20012df8
 8003e7c:	20012dec 	.word	0x20012dec
 8003e80:	20012dfc 	.word	0x20012dfc
 8003e84:	20012e00 	.word	0x20012e00

08003e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02c      	beq.n	8003ef4 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <vPortFree+0x74>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01e      	beq.n	8003ef4 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11a      	bne.n	8003ef4 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <vPortFree+0x74>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	401a      	ands	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003ece:	f7ff f8b5 	bl	800303c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <vPortFree+0x78>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4413      	add	r3, r2
 8003edc:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <vPortFree+0x78>)
 8003ede:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f000 f873 	bl	8003fcc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <vPortFree+0x7c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <vPortFree+0x7c>)
 8003eee:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003ef0:	f7ff f8b2 	bl	8003058 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20012e08 	.word	0x20012e08
 8003f00:	20012df8 	.word	0x20012df8
 8003f04:	20012e04 	.word	0x20012e04

08003f08 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f0e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003f12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <prvHeapInit+0xac>)
 8003f16:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3307      	adds	r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <prvHeapInit+0xac>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <prvHeapInit+0xb0>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <prvHeapInit+0xb0>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	4413      	add	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f54:	2208      	movs	r2, #8
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <prvHeapInit+0xb4>)
 8003f68:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <prvHeapInit+0xb4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <prvHeapInit+0xb4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <prvHeapInit+0xb4>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <prvHeapInit+0xb8>)
 8003f96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <prvHeapInit+0xbc>)
 8003f9e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <prvHeapInit+0xc0>)
 8003fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	200001ec 	.word	0x200001ec
 8003fb8:	20012dec 	.word	0x20012dec
 8003fbc:	20012df4 	.word	0x20012df4
 8003fc0:	20012dfc 	.word	0x20012dfc
 8003fc4:	20012df8 	.word	0x20012df8
 8003fc8:	20012e08 	.word	0x20012e08

08003fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <prvInsertBlockIntoFreeList+0xac>)
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e002      	b.n	8003fe0 <prvInsertBlockIntoFreeList+0x14>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d8f7      	bhi.n	8003fda <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d108      	bne.n	800400e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	441a      	add	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	441a      	add	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d118      	bne.n	8004054 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <prvInsertBlockIntoFreeList+0xb0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d00d      	beq.n	800404a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e008      	b.n	800405c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <prvInsertBlockIntoFreeList+0xb0>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e003      	b.n	800405c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d002      	beq.n	800406a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20012dec 	.word	0x20012dec
 800407c:	20012df4 	.word	0x20012df4

08004080 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004084:	4803      	ldr	r0, [pc, #12]	; (8004094 <_cbSendSystemDesc+0x14>)
 8004086:	f001 f9ab 	bl	80053e0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800408a:	4803      	ldr	r0, [pc, #12]	; (8004098 <_cbSendSystemDesc+0x18>)
 800408c:	f001 f9a8 	bl	80053e0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004090:	bf00      	nop
 8004092:	bd80      	pop	{r7, pc}
 8004094:	080065e0 	.word	0x080065e0
 8004098:	08006618 	.word	0x08006618

0800409c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <SEGGER_SYSVIEW_Conf+0x1c>)
 80040a2:	4a06      	ldr	r2, [pc, #24]	; (80040bc <SEGGER_SYSVIEW_Conf+0x20>)
 80040a4:	4906      	ldr	r1, [pc, #24]	; (80040c0 <SEGGER_SYSVIEW_Conf+0x24>)
 80040a6:	4806      	ldr	r0, [pc, #24]	; (80040c0 <SEGGER_SYSVIEW_Conf+0x24>)
 80040a8:	f000 fd18 	bl	8004adc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80040ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80040b0:	f000 fd58 	bl	8004b64 <SEGGER_SYSVIEW_SetRAMBase>
}
 80040b4:	bf00      	nop
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	08004081 	.word	0x08004081
 80040bc:	080066e8 	.word	0x080066e8
 80040c0:	04c4b400 	.word	0x04c4b400

080040c4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	e033      	b.n	8004138 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80040d0:	491e      	ldr	r1, [pc, #120]	; (800414c <_cbSendTaskList+0x88>)
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	491a      	ldr	r1, [pc, #104]	; (800414c <_cbSendTaskList+0x88>)
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3304      	adds	r3, #4
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	4c16      	ldr	r4, [pc, #88]	; (800414c <_cbSendTaskList+0x88>)
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4423      	add	r3, r4
 8004100:	3308      	adds	r3, #8
 8004102:	681c      	ldr	r4, [r3, #0]
 8004104:	4d11      	ldr	r5, [pc, #68]	; (800414c <_cbSendTaskList+0x88>)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	442b      	add	r3, r5
 8004112:	330c      	adds	r3, #12
 8004114:	681d      	ldr	r5, [r3, #0]
 8004116:	4e0d      	ldr	r6, [pc, #52]	; (800414c <_cbSendTaskList+0x88>)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4433      	add	r3, r6
 8004124:	3310      	adds	r3, #16
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	462b      	mov	r3, r5
 800412c:	4622      	mov	r2, r4
 800412e:	f000 f8bd 	bl	80042ac <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3301      	adds	r3, #1
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <_cbSendTaskList+0x8c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d3c6      	bcc.n	80040d0 <_cbSendTaskList+0xc>
  }
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414c:	20012e0c 	.word	0x20012e0c
 8004150:	20012eac 	.word	0x20012eac

08004154 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800415c:	f7ff f81e 	bl	800319c <xTaskGetTickCountFromISR>
 8004160:	4603      	mov	r3, r0
 8004162:	2200      	movs	r2, #0
 8004164:	469a      	mov	sl, r3
 8004166:	4693      	mov	fp, r2
 8004168:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800416c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	f04f 0a00 	mov.w	sl, #0
 8004178:	f04f 0b00 	mov.w	fp, #0
 800417c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004180:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004184:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004188:	4652      	mov	r2, sl
 800418a:	465b      	mov	r3, fp
 800418c:	1a14      	subs	r4, r2, r0
 800418e:	eb63 0501 	sbc.w	r5, r3, r1
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	00ab      	lsls	r3, r5, #2
 800419c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80041a0:	00a2      	lsls	r2, r4, #2
 80041a2:	4614      	mov	r4, r2
 80041a4:	461d      	mov	r5, r3
 80041a6:	eb14 0800 	adds.w	r8, r4, r0
 80041aa:	eb45 0901 	adc.w	r9, r5, r1
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041c2:	4690      	mov	r8, r2
 80041c4:	4699      	mov	r9, r3
 80041c6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80041ca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080041dc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80041ea:	2205      	movs	r2, #5
 80041ec:	492b      	ldr	r1, [pc, #172]	; (800429c <SYSVIEW_AddTask+0xc0>)
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f001 fc74 	bl	8005adc <memcmp>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d04b      	beq.n	8004292 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b07      	cmp	r3, #7
 8004200:	d903      	bls.n	800420a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004202:	4828      	ldr	r0, [pc, #160]	; (80042a4 <SYSVIEW_AddTask+0xc8>)
 8004204:	f001 fbea 	bl	80059dc <SEGGER_SYSVIEW_Warn>
    return;
 8004208:	e044      	b.n	8004294 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800420a:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4926      	ldr	r1, [pc, #152]	; (80042a8 <SYSVIEW_AddTask+0xcc>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4921      	ldr	r1, [pc, #132]	; (80042a8 <SYSVIEW_AddTask+0xcc>)
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	3304      	adds	r3, #4
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	491b      	ldr	r1, [pc, #108]	; (80042a8 <SYSVIEW_AddTask+0xcc>)
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3308      	adds	r3, #8
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4916      	ldr	r1, [pc, #88]	; (80042a8 <SYSVIEW_AddTask+0xcc>)
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	330c      	adds	r3, #12
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4910      	ldr	r1, [pc, #64]	; (80042a8 <SYSVIEW_AddTask+0xcc>)
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3310      	adds	r3, #16
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <SYSVIEW_AddTask+0xc4>)
 800427e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f80e 	bl	80042ac <SYSVIEW_SendTaskInfo>
 8004290:	e000      	b.n	8004294 <SYSVIEW_AddTask+0xb8>
    return;
 8004292:	bf00      	nop

}
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	08006628 	.word	0x08006628
 80042a0:	20012eac 	.word	0x20012eac
 80042a4:	08006630 	.word	0x08006630
 80042a8:	20012e0c 	.word	0x20012e0c

080042ac <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	2214      	movs	r2, #20
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 fc28 	bl	8005b18 <memset>
  TaskInfo.TaskID     = TaskID;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 ff85 	bl	80051f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <_DoInit+0x98>)
 80042f8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2203      	movs	r2, #3
 80042fe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2203      	movs	r2, #3
 8004304:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a20      	ldr	r2, [pc, #128]	; (800438c <_DoInit+0x9c>)
 800430a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a20      	ldr	r2, [pc, #128]	; (8004390 <_DoInit+0xa0>)
 8004310:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004318:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <_DoInit+0x9c>)
 8004330:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <_DoInit+0xa4>)
 8004336:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2210      	movs	r2, #16
 800433c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3307      	adds	r3, #7
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <_DoInit+0xa8>)
 8004356:	6810      	ldr	r0, [r2, #0]
 8004358:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800435a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a0e      	ldr	r2, [pc, #56]	; (800439c <_DoInit+0xac>)
 8004362:	6810      	ldr	r0, [r2, #0]
 8004364:	6018      	str	r0, [r3, #0]
 8004366:	8891      	ldrh	r1, [r2, #4]
 8004368:	7992      	ldrb	r2, [r2, #6]
 800436a:	8099      	strh	r1, [r3, #4]
 800436c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800436e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2220      	movs	r2, #32
 8004376:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004378:	f3bf 8f5f 	dmb	sy
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20012eb0 	.word	0x20012eb0
 800438c:	08006680 	.word	0x08006680
 8004390:	20012f58 	.word	0x20012f58
 8004394:	20013358 	.word	0x20013358
 8004398:	0800668c 	.word	0x0800668c
 800439c:	08006690 	.word	0x08006690

080043a0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <SEGGER_RTT_ReadNoLock+0x1e>
 80043ba:	f7ff ff99 	bl	80042f0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	3360      	adds	r3, #96	; 0x60
 80043ca:	4a37      	ldr	r2, [pc, #220]	; (80044a8 <SEGGER_RTT_ReadNoLock+0x108>)
 80043cc:	4413      	add	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80043e0:	2300      	movs	r3, #0
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80043e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d92b      	bls.n	8004444 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bf28      	it	cs
 80043fe:	4613      	movcs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	4413      	add	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	6939      	ldr	r1, [r7, #16]
 8004410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004412:	f001 fb73 	bl	8005afc <memcpy>
    NumBytesRead += NumBytesRem;
 8004416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4413      	add	r3, r2
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800442e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4413      	add	r3, r2
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443c:	429a      	cmp	r2, r3
 800443e:	d101      	bne.n	8004444 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4293      	cmp	r3, r2
 8004452:	bf28      	it	cs
 8004454:	4613      	movcs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d019      	beq.n	8004492 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	4413      	add	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	6939      	ldr	r1, [r7, #16]
 800446c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800446e:	f001 fb45 	bl	8005afc <memcpy>
    NumBytesRead += NumBytesRem;
 8004472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800448a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3730      	adds	r7, #48	; 0x30
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20012eb0 	.word	0x20012eb0

080044ac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80044ba:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <SEGGER_RTT_AllocUpBuffer+0x20>
 80044c8:	f7ff ff12 	bl	80042f0 <_DoInit>
  SEGGER_RTT_LOCK();
 80044cc:	f3ef 8311 	mrs	r3, BASEPRI
 80044d0:	f04f 0120 	mov.w	r1, #32
 80044d4:	f381 8811 	msr	BASEPRI, r1
 80044d8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044da:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044dc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80044e2:	6939      	ldr	r1, [r7, #16]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	3304      	adds	r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	429a      	cmp	r2, r3
 8004508:	dbeb      	blt.n	80044e2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800450a:	e000      	b.n	800450e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800450c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	429a      	cmp	r2, r3
 8004516:	da3f      	bge.n	8004598 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004518:	6939      	ldr	r1, [r7, #16]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800452c:	6939      	ldr	r1, [r7, #16]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	3304      	adds	r3, #4
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	3320      	adds	r3, #32
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004556:	6939      	ldr	r1, [r7, #16]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	3328      	adds	r3, #40	; 0x28
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800456a:	6939      	ldr	r1, [r7, #16]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	3324      	adds	r3, #36	; 0x24
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800457e:	6939      	ldr	r1, [r7, #16]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	332c      	adds	r3, #44	; 0x2c
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004592:	f3bf 8f5f 	dmb	sy
 8004596:	e002      	b.n	800459e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80045a4:	69fb      	ldr	r3, [r7, #28]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20012eb0 	.word	0x20012eb0

080045b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80045c2:	4b33      	ldr	r3, [pc, #204]	; (8004690 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80045d0:	f7ff fe8e 	bl	80042f0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045d4:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80045d6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	461a      	mov	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d24d      	bcs.n	8004680 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80045e4:	f3ef 8311 	mrs	r3, BASEPRI
 80045e8:	f04f 0120 	mov.w	r1, #32
 80045ec:	f381 8811 	msr	BASEPRI, r1
 80045f0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d031      	beq.n	800465c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	440b      	add	r3, r1
 8004606:	3360      	adds	r3, #96	; 0x60
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	440b      	add	r3, r1
 800461a:	3364      	adds	r3, #100	; 0x64
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004620:	6979      	ldr	r1, [r7, #20]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	440b      	add	r3, r1
 800462e:	3368      	adds	r3, #104	; 0x68
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	440b      	add	r3, r1
 8004642:	3370      	adds	r3, #112	; 0x70
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	440b      	add	r3, r1
 8004656:	336c      	adds	r3, #108	; 0x6c
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	440b      	add	r3, r1
 800466a:	3374      	adds	r3, #116	; 0x74
 800466c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004670:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	e002      	b.n	8004686 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004686:	69fb      	ldr	r3, [r7, #28]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20012eb0 	.word	0x20012eb0

08004694 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80046a4:	e002      	b.n	80046ac <_EncodeStr+0x18>
    Len++;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3301      	adds	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f6      	bne.n	80046a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d901      	bls.n	80046c4 <_EncodeStr+0x30>
    Len = Limit;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2bfe      	cmp	r3, #254	; 0xfe
 80046c8:	d806      	bhi.n	80046d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	60fa      	str	r2, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e011      	b.n	80046fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	60fa      	str	r2, [r7, #12]
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	60fa      	str	r2, [r7, #12]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	0a19      	lsrs	r1, r3, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	60fa      	str	r2, [r7, #12]
 80046f8:	b2ca      	uxtb	r2, r1
 80046fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004700:	e00a      	b.n	8004718 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	1c53      	adds	r3, r2, #1
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	60f9      	str	r1, [r7, #12]
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	701a      	strb	r2, [r3, #0]
    n++;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3301      	adds	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3f0      	bcc.n	8004702 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004720:	68fb      	ldr	r3, [r7, #12]
}
 8004722:	4618      	mov	r0, r3
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800474e:	4b36      	ldr	r3, [pc, #216]	; (8004828 <_HandleIncomingPacket+0xe0>)
 8004750:	7e1b      	ldrb	r3, [r3, #24]
 8004752:	4618      	mov	r0, r3
 8004754:	1cfb      	adds	r3, r7, #3
 8004756:	2201      	movs	r2, #1
 8004758:	4619      	mov	r1, r3
 800475a:	f7ff fe21 	bl	80043a0 <SEGGER_RTT_ReadNoLock>
 800475e:	4603      	mov	r3, r0
 8004760:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	dd54      	ble.n	8004812 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d032      	beq.n	80047d4 <_HandleIncomingPacket+0x8c>
 800476e:	2b80      	cmp	r3, #128	; 0x80
 8004770:	dc42      	bgt.n	80047f8 <_HandleIncomingPacket+0xb0>
 8004772:	2b07      	cmp	r3, #7
 8004774:	dc16      	bgt.n	80047a4 <_HandleIncomingPacket+0x5c>
 8004776:	2b00      	cmp	r3, #0
 8004778:	dd3e      	ble.n	80047f8 <_HandleIncomingPacket+0xb0>
 800477a:	3b01      	subs	r3, #1
 800477c:	2b06      	cmp	r3, #6
 800477e:	d83b      	bhi.n	80047f8 <_HandleIncomingPacket+0xb0>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <_HandleIncomingPacket+0x40>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047ab 	.word	0x080047ab
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b7 	.word	0x080047b7
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c3 	.word	0x080047c3
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	2b7f      	cmp	r3, #127	; 0x7f
 80047a6:	d036      	beq.n	8004816 <_HandleIncomingPacket+0xce>
 80047a8:	e026      	b.n	80047f8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80047aa:	f000 fba7 	bl	8004efc <SEGGER_SYSVIEW_Start>
      break;
 80047ae:	e037      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80047b0:	f000 fc5e 	bl	8005070 <SEGGER_SYSVIEW_Stop>
      break;
 80047b4:	e034      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80047b6:	f000 fe37 	bl	8005428 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80047ba:	e031      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80047bc:	f000 fdfc 	bl	80053b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80047c0:	e02e      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80047c2:	f000 fc7b 	bl	80050bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80047c6:	e02b      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80047c8:	f001 f8ca 	bl	8005960 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80047cc:	e028      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80047ce:	f001 f8a9 	bl	8005924 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80047d2:	e025      	b.n	8004820 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <_HandleIncomingPacket+0xe0>)
 80047d6:	7e1b      	ldrb	r3, [r3, #24]
 80047d8:	4618      	mov	r0, r3
 80047da:	1cfb      	adds	r3, r7, #3
 80047dc:	2201      	movs	r2, #1
 80047de:	4619      	mov	r1, r3
 80047e0:	f7ff fdde 	bl	80043a0 <SEGGER_RTT_ReadNoLock>
 80047e4:	4603      	mov	r3, r0
 80047e6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dd15      	ble.n	800481a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 f817 	bl	8005824 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80047f6:	e010      	b.n	800481a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	b25b      	sxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da0e      	bge.n	800481e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <_HandleIncomingPacket+0xe0>)
 8004802:	7e1b      	ldrb	r3, [r3, #24]
 8004804:	4618      	mov	r0, r3
 8004806:	1cfb      	adds	r3, r7, #3
 8004808:	2201      	movs	r2, #1
 800480a:	4619      	mov	r1, r3
 800480c:	f7ff fdc8 	bl	80043a0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004810:	e005      	b.n	800481e <_HandleIncomingPacket+0xd6>
    }
  }
 8004812:	bf00      	nop
 8004814:	e004      	b.n	8004820 <_HandleIncomingPacket+0xd8>
      break;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <_HandleIncomingPacket+0xd8>
      break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <_HandleIncomingPacket+0xd8>
      break;
 800481e:	bf00      	nop
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20014370 	.word	0x20014370

0800482c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b08c      	sub	sp, #48	; 0x30
 8004830:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004832:	2301      	movs	r3, #1
 8004834:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004836:	1d3b      	adds	r3, r7, #4
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
 8004846:	e00b      	b.n	8004860 <_TrySendOverflowPacket+0x34>
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	b2da      	uxtb	r2, r3
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	1c59      	adds	r1, r3, #1
 8004850:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	09db      	lsrs	r3, r3, #7
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2b7f      	cmp	r3, #127	; 0x7f
 8004864:	d8f0      	bhi.n	8004848 <_TrySendOverflowPacket+0x1c>
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <_TrySendOverflowPacket+0xe0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800487c:	4b22      	ldr	r3, [pc, #136]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e00b      	b.n	80048a8 <_TrySendOverflowPacket+0x7c>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	6279      	str	r1, [r7, #36]	; 0x24
 800489a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	09db      	lsrs	r3, r3, #7
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b7f      	cmp	r3, #127	; 0x7f
 80048ac:	d8f0      	bhi.n	8004890 <_TrySendOverflowPacket+0x64>
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	627a      	str	r2, [r7, #36]	; 0x24
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	4618      	mov	r0, r3
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	1d3b      	adds	r3, r7, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fb fc7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048d4:	4603      	mov	r3, r0
 80048d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048de:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e004      	b.n	80048fc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <_TrySendOverflowPacket+0xdc>)
 80048fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80048fc:	693b      	ldr	r3, [r7, #16]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3730      	adds	r7, #48	; 0x30
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20014370 	.word	0x20014370
 800490c:	e0001004 	.word	0xe0001004

08004910 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800491c:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <_SendPacket+0x1c0>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d010      	beq.n	8004946 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004924:	4b6a      	ldr	r3, [pc, #424]	; (8004ad0 <_SendPacket+0x1c0>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80a3 	beq.w	8004a74 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800492e:	4b68      	ldr	r3, [pc, #416]	; (8004ad0 <_SendPacket+0x1c0>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d109      	bne.n	800494a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004936:	f7ff ff79 	bl	800482c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800493a:	4b65      	ldr	r3, [pc, #404]	; (8004ad0 <_SendPacket+0x1c0>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	f040 809a 	bne.w	8004a78 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004944:	e001      	b.n	800494a <_SendPacket+0x3a>
    goto Send;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <_SendPacket+0x3c>
Send:
 800494a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b1f      	cmp	r3, #31
 8004950:	d809      	bhi.n	8004966 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004952:	4b5f      	ldr	r3, [pc, #380]	; (8004ad0 <_SendPacket+0x1c0>)
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 808b 	bne.w	8004a7c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b17      	cmp	r3, #23
 800496a:	d807      	bhi.n	800497c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e03d      	b.n	80049f8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b7f      	cmp	r3, #127	; 0x7f
 8004988:	d912      	bls.n	80049b0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	09da      	lsrs	r2, r3, #7
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3b01      	subs	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	3a01      	subs	r2, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e006      	b.n	80049be <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b7f      	cmp	r3, #127	; 0x7f
 80049c2:	d912      	bls.n	80049ea <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	09da      	lsrs	r2, r3, #7
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	3a01      	subs	r2, #1
 80049dc:	60fa      	str	r2, [r7, #12]
 80049de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e006      	b.n	80049f8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <_SendPacket+0x1c4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80049fe:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	e00b      	b.n	8004a2a <_SendPacket+0x11a>
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	1c59      	adds	r1, r3, #1
 8004a1a:	6279      	str	r1, [r7, #36]	; 0x24
 8004a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	09db      	lsrs	r3, r3, #7
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2e:	d8f0      	bhi.n	8004a12 <_SendPacket+0x102>
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	627a      	str	r2, [r7, #36]	; 0x24
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	4618      	mov	r0, r3
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	f7fb fbbe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a54:	4603      	mov	r3, r0
 8004a56:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	60d3      	str	r3, [r2, #12]
 8004a64:	e00b      	b.n	8004a7e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e004      	b.n	8004a7e <_SendPacket+0x16e>
    goto SendDone;
 8004a74:	bf00      	nop
 8004a76:	e002      	b.n	8004a7e <_SendPacket+0x16e>
      goto SendDone;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <_SendPacket+0x16e>
      goto SendDone;
 8004a7c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a80:	7e1b      	ldrb	r3, [r3, #24]
 8004a82:	4619      	mov	r1, r3
 8004a84:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <_SendPacket+0x1c8>)
 8004a86:	460b      	mov	r3, r1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	440b      	add	r3, r1
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	336c      	adds	r3, #108	; 0x6c
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <_SendPacket+0x1c0>)
 8004a96:	7e1b      	ldrb	r3, [r3, #24]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	490f      	ldr	r1, [pc, #60]	; (8004ad8 <_SendPacket+0x1c8>)
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4403      	add	r3, r0
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3370      	adds	r3, #112	; 0x70
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d00b      	beq.n	8004ac6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <_SendPacket+0x1c0>)
 8004ab0:	789b      	ldrb	r3, [r3, #2]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d107      	bne.n	8004ac6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <_SendPacket+0x1c0>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004abc:	f7ff fe44 	bl	8004748 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <_SendPacket+0x1c0>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004ac6:	bf00      	nop
 8004ac8:	3728      	adds	r7, #40	; 0x28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20014370 	.word	0x20014370
 8004ad4:	e0001004 	.word	0xe0001004
 8004ad8:	20012eb0 	.word	0x20012eb0

08004adc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af02      	add	r7, sp, #8
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004aea:	2300      	movs	r3, #0
 8004aec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004af0:	4917      	ldr	r1, [pc, #92]	; (8004b50 <SEGGER_SYSVIEW_Init+0x74>)
 8004af2:	4818      	ldr	r0, [pc, #96]	; (8004b54 <SEGGER_SYSVIEW_Init+0x78>)
 8004af4:	f7ff fcda 	bl	80044ac <SEGGER_RTT_AllocUpBuffer>
 8004af8:	4603      	mov	r3, r0
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004afe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b02:	785a      	ldrb	r2, [r3, #1]
 8004b04:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b06:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b08:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b0a:	7e1b      	ldrb	r3, [r3, #24]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2308      	movs	r3, #8
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <SEGGER_SYSVIEW_Init+0x80>)
 8004b16:	490f      	ldr	r1, [pc, #60]	; (8004b54 <SEGGER_SYSVIEW_Init+0x78>)
 8004b18:	f7ff fd4c 	bl	80045b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b22:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <SEGGER_SYSVIEW_Init+0x84>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a0c      	ldr	r2, [pc, #48]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b28:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004b2a:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004b30:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004b3c:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20013368 	.word	0x20013368
 8004b54:	08006698 	.word	0x08006698
 8004b58:	20014370 	.word	0x20014370
 8004b5c:	20014368 	.word	0x20014368
 8004b60:	e0001004 	.word	0xe0001004

08004b64 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004b6c:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6113      	str	r3, [r2, #16]
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20014370 	.word	0x20014370

08004b84 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b90:	f04f 0120 	mov.w	r1, #32
 8004b94:	f381 8811 	msr	BASEPRI, r1
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	4808      	ldr	r0, [pc, #32]	; (8004bbc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b9c:	f7ff fdc7 	bl	800472e <_PreparePacket>
 8004ba0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68b8      	ldr	r0, [r7, #8]
 8004ba8:	f7ff feb2 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f383 8811 	msr	BASEPRI, r3
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	200143a0 	.word	0x200143a0

08004bc0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bca:	f3ef 8311 	mrs	r3, BASEPRI
 8004bce:	f04f 0120 	mov.w	r1, #32
 8004bd2:	f381 8811 	msr	BASEPRI, r1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	4816      	ldr	r0, [pc, #88]	; (8004c34 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004bda:	f7ff fda8 	bl	800472e <_PreparePacket>
 8004bde:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	61bb      	str	r3, [r7, #24]
 8004bec:	e00b      	b.n	8004c06 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	1c59      	adds	r1, r3, #1
 8004bf6:	61f9      	str	r1, [r7, #28]
 8004bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	09db      	lsrs	r3, r3, #7
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0a:	d8f0      	bhi.n	8004bee <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	61fa      	str	r2, [r7, #28]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	6938      	ldr	r0, [r7, #16]
 8004c22:	f7ff fe75 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f383 8811 	msr	BASEPRI, r3
}
 8004c2c:	bf00      	nop
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200143a0 	.word	0x200143a0

08004c38 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c44:	f3ef 8311 	mrs	r3, BASEPRI
 8004c48:	f04f 0120 	mov.w	r1, #32
 8004c4c:	f381 8811 	msr	BASEPRI, r1
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	4825      	ldr	r0, [pc, #148]	; (8004ce8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004c54:	f7ff fd6b 	bl	800472e <_PreparePacket>
 8004c58:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c66:	e00b      	b.n	8004c80 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	09db      	lsrs	r3, r3, #7
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2b7f      	cmp	r3, #127	; 0x7f
 8004c84:	d8f0      	bhi.n	8004c68 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	e00b      	b.n	8004cb8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	6279      	str	r1, [r7, #36]	; 0x24
 8004caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	09db      	lsrs	r3, r3, #7
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b7f      	cmp	r3, #127	; 0x7f
 8004cbc:	d8f0      	bhi.n	8004ca0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc4:	6a3a      	ldr	r2, [r7, #32]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	69b8      	ldr	r0, [r7, #24]
 8004cd4:	f7ff fe1c 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f383 8811 	msr	BASEPRI, r3
}
 8004cde:	bf00      	nop
 8004ce0:	3730      	adds	r7, #48	; 0x30
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	200143a0 	.word	0x200143a0

08004cec <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08e      	sub	sp, #56	; 0x38
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cfe:	f04f 0120 	mov.w	r1, #32
 8004d02:	f381 8811 	msr	BASEPRI, r1
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	4832      	ldr	r0, [pc, #200]	; (8004dd4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004d0a:	f7ff fd10 	bl	800472e <_PreparePacket>
 8004d0e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1c:	e00b      	b.n	8004d36 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	6379      	str	r1, [r7, #52]	; 0x34
 8004d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	09db      	lsrs	r3, r3, #7
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3a:	d8f0      	bhi.n	8004d1e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	637a      	str	r2, [r7, #52]	; 0x34
 8004d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d54:	e00b      	b.n	8004d6e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	09db      	lsrs	r3, r3, #7
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2b7f      	cmp	r3, #127	; 0x7f
 8004d72:	d8f0      	bhi.n	8004d56 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	e00b      	b.n	8004da6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	6279      	str	r1, [r7, #36]	; 0x24
 8004d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	09db      	lsrs	r3, r3, #7
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	2b7f      	cmp	r3, #127	; 0x7f
 8004daa:	d8f0      	bhi.n	8004d8e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	627a      	str	r2, [r7, #36]	; 0x24
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	6979      	ldr	r1, [r7, #20]
 8004dc0:	69b8      	ldr	r0, [r7, #24]
 8004dc2:	f7ff fda5 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f383 8811 	msr	BASEPRI, r3
}
 8004dcc:	bf00      	nop
 8004dce:	3738      	adds	r7, #56	; 0x38
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200143a0 	.word	0x200143a0

08004dd8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b090      	sub	sp, #64	; 0x40
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004de6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dea:	f04f 0120 	mov.w	r1, #32
 8004dee:	f381 8811 	msr	BASEPRI, r1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	4840      	ldr	r0, [pc, #256]	; (8004ef8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004df6:	f7ff fc9a 	bl	800472e <_PreparePacket>
 8004dfa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e08:	e00b      	b.n	8004e22 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b7f      	cmp	r3, #127	; 0x7f
 8004e26:	d8f0      	bhi.n	8004e0a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e40:	e00b      	b.n	8004e5a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	6379      	str	r1, [r7, #52]	; 0x34
 8004e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5e:	d8f0      	bhi.n	8004e42 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	637a      	str	r2, [r7, #52]	; 0x34
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e78:	e00b      	b.n	8004e92 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	1c59      	adds	r1, r3, #1
 8004e82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	09db      	lsrs	r3, r3, #7
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	2b7f      	cmp	r3, #127	; 0x7f
 8004e96:	d8f0      	bhi.n	8004e7a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	e00b      	b.n	8004eca <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1c59      	adds	r1, r3, #1
 8004eba:	6279      	str	r1, [r7, #36]	; 0x24
 8004ebc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	09db      	lsrs	r3, r3, #7
 8004ec8:	623b      	str	r3, [r7, #32]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ece:	d8f0      	bhi.n	8004eb2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	69b8      	ldr	r0, [r7, #24]
 8004ee6:	f7ff fd13 	bl	8004910 <_SendPacket>
  RECORD_END();
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f383 8811 	msr	BASEPRI, r3
}
 8004ef0:	bf00      	nop
 8004ef2:	3740      	adds	r7, #64	; 0x40
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200143a0 	.word	0x200143a0

08004efc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	; 0x30
 8004f00:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f02:	4b58      	ldr	r3, [pc, #352]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f08:	f3ef 8311 	mrs	r3, BASEPRI
 8004f0c:	f04f 0120 	mov.w	r1, #32
 8004f10:	f381 8811 	msr	BASEPRI, r1
 8004f14:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	4952      	ldr	r1, [pc, #328]	; (8005068 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb f956 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f2a:	200a      	movs	r0, #10
 8004f2c:	f7ff fe2a 	bl	8004b84 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f30:	f3ef 8311 	mrs	r3, BASEPRI
 8004f34:	f04f 0120 	mov.w	r1, #32
 8004f38:	f381 8811 	msr	BASEPRI, r1
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	484b      	ldr	r0, [pc, #300]	; (800506c <SEGGER_SYSVIEW_Start+0x170>)
 8004f40:	f7ff fbf5 	bl	800472e <_PreparePacket>
 8004f44:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	4b45      	ldr	r3, [pc, #276]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f54:	e00b      	b.n	8004f6e <SEGGER_SYSVIEW_Start+0x72>
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	09db      	lsrs	r3, r3, #7
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	2b7f      	cmp	r3, #127	; 0x7f
 8004f72:	d8f0      	bhi.n	8004f56 <SEGGER_SYSVIEW_Start+0x5a>
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
 8004f88:	4b36      	ldr	r3, [pc, #216]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	e00b      	b.n	8004fa8 <SEGGER_SYSVIEW_Start+0xac>
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	1c59      	adds	r1, r3, #1
 8004f98:	6279      	str	r1, [r7, #36]	; 0x24
 8004f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	09db      	lsrs	r3, r3, #7
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b7f      	cmp	r3, #127	; 0x7f
 8004fac:	d8f0      	bhi.n	8004f90 <SEGGER_SYSVIEW_Start+0x94>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	4b28      	ldr	r3, [pc, #160]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e00b      	b.n	8004fe2 <SEGGER_SYSVIEW_Start+0xe6>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	1c59      	adds	r1, r3, #1
 8004fd2:	61f9      	str	r1, [r7, #28]
 8004fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	09db      	lsrs	r3, r3, #7
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe6:	d8f0      	bhi.n	8004fca <SEGGER_SYSVIEW_Start+0xce>
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	61fa      	str	r2, [r7, #28]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	e00b      	b.n	800501a <SEGGER_SYSVIEW_Start+0x11e>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	1c59      	adds	r1, r3, #1
 800500a:	6179      	str	r1, [r7, #20]
 800500c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	09db      	lsrs	r3, r3, #7
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b7f      	cmp	r3, #127	; 0x7f
 800501e:	d8f0      	bhi.n	8005002 <SEGGER_SYSVIEW_Start+0x106>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	617a      	str	r2, [r7, #20]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005030:	2218      	movs	r2, #24
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff fc6b 	bl	8004910 <_SendPacket>
      RECORD_END();
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <SEGGER_SYSVIEW_Start+0x168>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800504e:	f000 f9eb 	bl	8005428 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005052:	f000 f9b1 	bl	80053b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005056:	f000 fc83 	bl	8005960 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800505a:	bf00      	nop
 800505c:	3730      	adds	r7, #48	; 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20014370 	.word	0x20014370
 8005068:	080066f0 	.word	0x080066f0
 800506c:	200143a0 	.word	0x200143a0

08005070 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005076:	f3ef 8311 	mrs	r3, BASEPRI
 800507a:	f04f 0120 	mov.w	r1, #32
 800507e:	f381 8811 	msr	BASEPRI, r1
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	480b      	ldr	r0, [pc, #44]	; (80050b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005086:	f7ff fb52 	bl	800472e <_PreparePacket>
 800508a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005094:	220b      	movs	r2, #11
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	f7ff fc39 	bl	8004910 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f383 8811 	msr	BASEPRI, r3
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200143a0 	.word	0x200143a0
 80050b8:	20014370 	.word	0x20014370

080050bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050c2:	f3ef 8311 	mrs	r3, BASEPRI
 80050c6:	f04f 0120 	mov.w	r1, #32
 80050ca:	f381 8811 	msr	BASEPRI, r1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	4845      	ldr	r0, [pc, #276]	; (80051e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80050d2:	f7ff fb2c 	bl	800472e <_PreparePacket>
 80050d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e0:	4b42      	ldr	r3, [pc, #264]	; (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b7f      	cmp	r3, #127	; 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	4b34      	ldr	r3, [pc, #208]	; (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	e00b      	b.n	800513a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	6279      	str	r1, [r7, #36]	; 0x24
 800512c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	09db      	lsrs	r3, r3, #7
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	2b7f      	cmp	r3, #127	; 0x7f
 800513e:	d8f0      	bhi.n	8005122 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	627a      	str	r2, [r7, #36]	; 0x24
 8005146:	6a3a      	ldr	r2, [r7, #32]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	4b25      	ldr	r3, [pc, #148]	; (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e00b      	b.n	8005174 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	61f9      	str	r1, [r7, #28]
 8005166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b7f      	cmp	r3, #127	; 0x7f
 8005178:	d8f0      	bhi.n	800515c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	61fa      	str	r2, [r7, #28]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e00b      	b.n	80051ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	1c59      	adds	r1, r3, #1
 800519c:	6179      	str	r1, [r7, #20]
 800519e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	09db      	lsrs	r3, r3, #7
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b7f      	cmp	r3, #127	; 0x7f
 80051b0:	d8f0      	bhi.n	8005194 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	617a      	str	r2, [r7, #20]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051c2:	2218      	movs	r2, #24
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68b8      	ldr	r0, [r7, #8]
 80051c8:	f7ff fba2 	bl	8004910 <_SendPacket>
  RECORD_END();
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80051da:	4b04      	ldr	r3, [pc, #16]	; (80051ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	4798      	blx	r3
  }
}
 80051e0:	bf00      	nop
 80051e2:	3730      	adds	r7, #48	; 0x30
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200143a0 	.word	0x200143a0
 80051ec:	20014370 	.word	0x20014370

080051f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b092      	sub	sp, #72	; 0x48
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80051f8:	f3ef 8311 	mrs	r3, BASEPRI
 80051fc:	f04f 0120 	mov.w	r1, #32
 8005200:	f381 8811 	msr	BASEPRI, r1
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	486a      	ldr	r0, [pc, #424]	; (80053b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005208:	f7ff fa91 	bl	800472e <_PreparePacket>
 800520c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	647b      	str	r3, [r7, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b66      	ldr	r3, [pc, #408]	; (80053b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	643b      	str	r3, [r7, #64]	; 0x40
 8005222:	e00b      	b.n	800523c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005226:	b2da      	uxtb	r2, r3
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	6479      	str	r1, [r7, #68]	; 0x44
 800522e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	09db      	lsrs	r3, r3, #7
 800523a:	643b      	str	r3, [r7, #64]	; 0x40
 800523c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523e:	2b7f      	cmp	r3, #127	; 0x7f
 8005240:	d8f0      	bhi.n	8005224 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	647a      	str	r2, [r7, #68]	; 0x44
 8005248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	63bb      	str	r3, [r7, #56]	; 0x38
 800525c:	e00b      	b.n	8005276 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	b2da      	uxtb	r2, r3
 8005262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005264:	1c59      	adds	r1, r3, #1
 8005266:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	09db      	lsrs	r3, r3, #7
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b7f      	cmp	r3, #127	; 0x7f
 800527a:	d8f0      	bhi.n	800525e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff f9fd 	bl	8004694 <_EncodeStr>
 800529a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800529c:	2209      	movs	r2, #9
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	6938      	ldr	r0, [r7, #16]
 80052a2:	f7ff fb35 	bl	8004910 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b40      	ldr	r3, [pc, #256]	; (80053b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ba:	e00b      	b.n	80052d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	6379      	str	r1, [r7, #52]	; 0x34
 80052c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	2b7f      	cmp	r3, #127	; 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	637a      	str	r2, [r7, #52]	; 0x34
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f4:	e00b      	b.n	800530e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	09db      	lsrs	r3, r3, #7
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	2b7f      	cmp	r3, #127	; 0x7f
 8005312:	d8f0      	bhi.n	80052f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	e00b      	b.n	8005348 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	6279      	str	r1, [r7, #36]	; 0x24
 800533a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	09db      	lsrs	r3, r3, #7
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2b7f      	cmp	r3, #127	; 0x7f
 800534c:	d8f0      	bhi.n	8005330 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	627a      	str	r2, [r7, #36]	; 0x24
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e00b      	b.n	8005380 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	1c59      	adds	r1, r3, #1
 8005370:	61f9      	str	r1, [r7, #28]
 8005372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	09db      	lsrs	r3, r3, #7
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b7f      	cmp	r3, #127	; 0x7f
 8005384:	d8f0      	bhi.n	8005368 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	61fa      	str	r2, [r7, #28]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005396:	2215      	movs	r2, #21
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	6938      	ldr	r0, [r7, #16]
 800539c:	f7ff fab8 	bl	8004910 <_SendPacket>
  RECORD_END();
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f383 8811 	msr	BASEPRI, r3
}
 80053a6:	bf00      	nop
 80053a8:	3748      	adds	r7, #72	; 0x48
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200143a0 	.word	0x200143a0
 80053b4:	20014370 	.word	0x20014370

080053b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80053bc:	4b07      	ldr	r3, [pc, #28]	; (80053dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80053ce:	4b03      	ldr	r3, [pc, #12]	; (80053dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4798      	blx	r3
  }
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20014370 	.word	0x20014370

080053e0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053e8:	f3ef 8311 	mrs	r3, BASEPRI
 80053ec:	f04f 0120 	mov.w	r1, #32
 80053f0:	f381 8811 	msr	BASEPRI, r1
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	480b      	ldr	r0, [pc, #44]	; (8005424 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80053f8:	f7ff f999 	bl	800472e <_PreparePacket>
 80053fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f7ff f946 	bl	8004694 <_EncodeStr>
 8005408:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800540a:	220e      	movs	r2, #14
 800540c:	68f9      	ldr	r1, [r7, #12]
 800540e:	6938      	ldr	r0, [r7, #16]
 8005410:	f7ff fa7e 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f383 8811 	msr	BASEPRI, r3
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200143a0 	.word	0x200143a0

08005428 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01a      	beq.n	800546c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4798      	blx	r3
 8005448:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800544c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800544e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	000a      	movs	r2, r1
 800545c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800545e:	4613      	mov	r3, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4621      	mov	r1, r4
 8005464:	200d      	movs	r0, #13
 8005466:	f7ff fbe7 	bl	8004c38 <SEGGER_SYSVIEW_RecordU32x2>
 800546a:	e006      	b.n	800547a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	200c      	movs	r0, #12
 8005474:	f7ff fba4 	bl	8004bc0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}
 8005482:	bf00      	nop
 8005484:	20014370 	.word	0x20014370
 8005488:	e0001004 	.word	0xe0001004

0800548c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005492:	f3ef 8311 	mrs	r3, BASEPRI
 8005496:	f04f 0120 	mov.w	r1, #32
 800549a:	f381 8811 	msr	BASEPRI, r1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4819      	ldr	r0, [pc, #100]	; (8005508 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80054a2:	f7ff f944 	bl	800472e <_PreparePacket>
 80054a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e00b      	b.n	80054d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	6179      	str	r1, [r7, #20]
 80054ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	09db      	lsrs	r3, r3, #7
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2b7f      	cmp	r3, #127	; 0x7f
 80054dc:	d8f0      	bhi.n	80054c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	617a      	str	r2, [r7, #20]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80054ee:	2202      	movs	r2, #2
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	68b8      	ldr	r0, [r7, #8]
 80054f4:	f7ff fa0c 	bl	8004910 <_SendPacket>
  RECORD_END();
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200143a0 	.word	0x200143a0
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005516:	f3ef 8311 	mrs	r3, BASEPRI
 800551a:	f04f 0120 	mov.w	r1, #32
 800551e:	f381 8811 	msr	BASEPRI, r1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	4807      	ldr	r0, [pc, #28]	; (8005544 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005526:	f7ff f902 	bl	800472e <_PreparePacket>
 800552a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800552c:	2203      	movs	r2, #3
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6838      	ldr	r0, [r7, #0]
 8005532:	f7ff f9ed 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f383 8811 	msr	BASEPRI, r3
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	200143a0 	.word	0x200143a0

08005548 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800554e:	f3ef 8311 	mrs	r3, BASEPRI
 8005552:	f04f 0120 	mov.w	r1, #32
 8005556:	f381 8811 	msr	BASEPRI, r1
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	4807      	ldr	r0, [pc, #28]	; (800557c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800555e:	f7ff f8e6 	bl	800472e <_PreparePacket>
 8005562:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005564:	2212      	movs	r2, #18
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6838      	ldr	r0, [r7, #0]
 800556a:	f7ff f9d1 	bl	8004910 <_SendPacket>
  RECORD_END();
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	200143a0 	.word	0x200143a0

08005580 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005586:	f3ef 8311 	mrs	r3, BASEPRI
 800558a:	f04f 0120 	mov.w	r1, #32
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	4807      	ldr	r0, [pc, #28]	; (80055b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005596:	f7ff f8ca 	bl	800472e <_PreparePacket>
 800559a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800559c:	2211      	movs	r2, #17
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6838      	ldr	r0, [r7, #0]
 80055a2:	f7ff f9b5 	bl	8004910 <_SendPacket>
  RECORD_END();
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f383 8811 	msr	BASEPRI, r3
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200143a0 	.word	0x200143a0

080055b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055c0:	f3ef 8311 	mrs	r3, BASEPRI
 80055c4:	f04f 0120 	mov.w	r1, #32
 80055c8:	f381 8811 	msr	BASEPRI, r1
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	4819      	ldr	r0, [pc, #100]	; (8005634 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80055d0:	f7ff f8ad 	bl	800472e <_PreparePacket>
 80055d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055da:	4b17      	ldr	r3, [pc, #92]	; (8005638 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e00b      	b.n	8005606 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	61f9      	str	r1, [r7, #28]
 80055f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	09db      	lsrs	r3, r3, #7
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b7f      	cmp	r3, #127	; 0x7f
 800560a:	d8f0      	bhi.n	80055ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800561c:	2208      	movs	r2, #8
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	6938      	ldr	r0, [r7, #16]
 8005622:	f7ff f975 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f383 8811 	msr	BASEPRI, r3
}
 800562c:	bf00      	nop
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200143a0 	.word	0x200143a0
 8005638:	20014370 	.word	0x20014370

0800563c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005644:	f3ef 8311 	mrs	r3, BASEPRI
 8005648:	f04f 0120 	mov.w	r1, #32
 800564c:	f381 8811 	msr	BASEPRI, r1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	4819      	ldr	r0, [pc, #100]	; (80056b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005654:	f7ff f86b 	bl	800472e <_PreparePacket>
 8005658:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	61f9      	str	r1, [r7, #28]
 800567c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b7f      	cmp	r3, #127	; 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	61fa      	str	r2, [r7, #28]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80056a0:	2204      	movs	r2, #4
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	6938      	ldr	r0, [r7, #16]
 80056a6:	f7ff f933 	bl	8004910 <_SendPacket>
  RECORD_END();
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f383 8811 	msr	BASEPRI, r3
}
 80056b0:	bf00      	nop
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	200143a0 	.word	0x200143a0
 80056bc:	20014370 	.word	0x20014370

080056c0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c8:	f3ef 8311 	mrs	r3, BASEPRI
 80056cc:	f04f 0120 	mov.w	r1, #32
 80056d0:	f381 8811 	msr	BASEPRI, r1
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	4819      	ldr	r0, [pc, #100]	; (800573c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80056d8:	f7ff f829 	bl	800472e <_PreparePacket>
 80056dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e00b      	b.n	800570e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	61f9      	str	r1, [r7, #28]
 8005700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	09db      	lsrs	r3, r3, #7
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b7f      	cmp	r3, #127	; 0x7f
 8005712:	d8f0      	bhi.n	80056f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	61fa      	str	r2, [r7, #28]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005724:	2206      	movs	r2, #6
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	6938      	ldr	r0, [r7, #16]
 800572a:	f7ff f8f1 	bl	8004910 <_SendPacket>
  RECORD_END();
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f383 8811 	msr	BASEPRI, r3
}
 8005734:	bf00      	nop
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	200143a0 	.word	0x200143a0
 8005740:	20014370 	.word	0x20014370

08005744 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800574e:	f3ef 8311 	mrs	r3, BASEPRI
 8005752:	f04f 0120 	mov.w	r1, #32
 8005756:	f381 8811 	msr	BASEPRI, r1
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	4827      	ldr	r0, [pc, #156]	; (80057fc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800575e:	f7fe ffe6 	bl	800472e <_PreparePacket>
 8005762:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005768:	4b25      	ldr	r3, [pc, #148]	; (8005800 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e00b      	b.n	8005794 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	6279      	str	r1, [r7, #36]	; 0x24
 8005786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b7f      	cmp	r3, #127	; 0x7f
 8005798:	d8f0      	bhi.n	800577c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	627a      	str	r2, [r7, #36]	; 0x24
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	e00b      	b.n	80057cc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	61f9      	str	r1, [r7, #28]
 80057be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	09db      	lsrs	r3, r3, #7
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b7f      	cmp	r3, #127	; 0x7f
 80057d0:	d8f0      	bhi.n	80057b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	61fa      	str	r2, [r7, #28]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80057e2:	2207      	movs	r2, #7
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	6938      	ldr	r0, [r7, #16]
 80057e8:	f7ff f892 	bl	8004910 <_SendPacket>
  RECORD_END();
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f383 8811 	msr	BASEPRI, r3
}
 80057f2:	bf00      	nop
 80057f4:	3728      	adds	r7, #40	; 0x28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200143a0 	.word	0x200143a0
 8005800:	20014370 	.word	0x20014370

08005804 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20014370 	.word	0x20014370

08005824 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	; 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d06d      	beq.n	8005912 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800583c:	2300      	movs	r3, #0
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005840:	e008      	b.n	8005854 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	3301      	adds	r3, #1
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005858:	429a      	cmp	r2, r3
 800585a:	d3f2      	bcc.n	8005842 <SEGGER_SYSVIEW_SendModule+0x1e>
 800585c:	e000      	b.n	8005860 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800585e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d055      	beq.n	8005912 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005866:	f3ef 8311 	mrs	r3, BASEPRI
 800586a:	f04f 0120 	mov.w	r1, #32
 800586e:	f381 8811 	msr	BASEPRI, r1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	482a      	ldr	r0, [pc, #168]	; (8005920 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005876:	f7fe ff5a 	bl	800472e <_PreparePacket>
 800587a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	e00b      	b.n	80058a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	6279      	str	r1, [r7, #36]	; 0x24
 8005894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	2b7f      	cmp	r3, #127	; 0x7f
 80058a6:	d8f0      	bhi.n	800588a <SEGGER_SYSVIEW_SendModule+0x66>
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	627a      	str	r2, [r7, #36]	; 0x24
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e00b      	b.n	80058dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	61f9      	str	r1, [r7, #28]
 80058ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	09db      	lsrs	r3, r3, #7
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b7f      	cmp	r3, #127	; 0x7f
 80058e0:	d8f0      	bhi.n	80058c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	4619      	mov	r1, r3
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7fe feca 	bl	8004694 <_EncodeStr>
 8005900:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005902:	2216      	movs	r2, #22
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	6938      	ldr	r0, [r7, #16]
 8005908:	f7ff f802 	bl	8004910 <_SendPacket>
      RECORD_END();
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005912:	bf00      	nop
 8005914:	3730      	adds	r7, #48	; 0x30
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20014398 	.word	0x20014398
 8005920:	200143a0 	.word	0x200143a0

08005924 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f2      	bne.n	8005938 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20014398 	.word	0x20014398

08005960 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005966:	f3ef 8311 	mrs	r3, BASEPRI
 800596a:	f04f 0120 	mov.w	r1, #32
 800596e:	f381 8811 	msr	BASEPRI, r1
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	4817      	ldr	r0, [pc, #92]	; (80059d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005976:	f7fe feda 	bl	800472e <_PreparePacket>
 800597a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e00b      	b.n	80059a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	b2da      	uxtb	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	1c59      	adds	r1, r3, #1
 8005994:	6179      	str	r1, [r7, #20]
 8005996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	09db      	lsrs	r3, r3, #7
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b7f      	cmp	r3, #127	; 0x7f
 80059a8:	d8f0      	bhi.n	800598c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	617a      	str	r2, [r7, #20]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059ba:	221b      	movs	r2, #27
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	68b8      	ldr	r0, [r7, #8]
 80059c0:	f7fe ffa6 	bl	8004910 <_SendPacket>
  RECORD_END();
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f383 8811 	msr	BASEPRI, r3
}
 80059ca:	bf00      	nop
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200143a0 	.word	0x200143a0
 80059d8:	2001439c 	.word	0x2001439c

080059dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059e4:	f3ef 8311 	mrs	r3, BASEPRI
 80059e8:	f04f 0120 	mov.w	r1, #32
 80059ec:	f381 8811 	msr	BASEPRI, r1
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	4827      	ldr	r0, [pc, #156]	; (8005a90 <SEGGER_SYSVIEW_Warn+0xb4>)
 80059f4:	f7fe fe9b 	bl	800472e <_PreparePacket>
 80059f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	6938      	ldr	r0, [r7, #16]
 8005a00:	f7fe fe48 	bl	8004694 <_EncodeStr>
 8005a04:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	e00b      	b.n	8005a28 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1c59      	adds	r1, r3, #1
 8005a18:	6279      	str	r1, [r7, #36]	; 0x24
 8005a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	09db      	lsrs	r3, r3, #7
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2c:	d8f0      	bhi.n	8005a10 <SEGGER_SYSVIEW_Warn+0x34>
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	627a      	str	r2, [r7, #36]	; 0x24
 8005a34:	6a3a      	ldr	r2, [r7, #32]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e00b      	b.n	8005a60 <SEGGER_SYSVIEW_Warn+0x84>
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	61f9      	str	r1, [r7, #28]
 8005a52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	09db      	lsrs	r3, r3, #7
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b7f      	cmp	r3, #127	; 0x7f
 8005a64:	d8f0      	bhi.n	8005a48 <SEGGER_SYSVIEW_Warn+0x6c>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	61fa      	str	r2, [r7, #28]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a76:	221a      	movs	r2, #26
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	6938      	ldr	r0, [r7, #16]
 8005a7c:	f7fe ff48 	bl	8004910 <_SendPacket>
  RECORD_END();
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f383 8811 	msr	BASEPRI, r3
}
 8005a86:	bf00      	nop
 8005a88:	3728      	adds	r7, #40	; 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200143a0 	.word	0x200143a0

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4d0d      	ldr	r5, [pc, #52]	; (8005acc <__libc_init_array+0x38>)
 8005a98:	4c0d      	ldr	r4, [pc, #52]	; (8005ad0 <__libc_init_array+0x3c>)
 8005a9a:	1b64      	subs	r4, r4, r5
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	42a6      	cmp	r6, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	4d0b      	ldr	r5, [pc, #44]	; (8005ad4 <__libc_init_array+0x40>)
 8005aa6:	4c0c      	ldr	r4, [pc, #48]	; (8005ad8 <__libc_init_array+0x44>)
 8005aa8:	f000 fd4a 	bl	8006540 <_init>
 8005aac:	1b64      	subs	r4, r4, r5
 8005aae:	10a4      	asrs	r4, r4, #2
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	42a6      	cmp	r6, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abc:	4798      	blx	r3
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac6:	4798      	blx	r3
 8005ac8:	3601      	adds	r6, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	08006760 	.word	0x08006760
 8005ad0:	08006760 	.word	0x08006760
 8005ad4:	08006760 	.word	0x08006760
 8005ad8:	08006764 	.word	0x08006764

08005adc <memcmp>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	3901      	subs	r1, #1
 8005ae0:	4402      	add	r2, r0
 8005ae2:	4290      	cmp	r0, r2
 8005ae4:	d101      	bne.n	8005aea <memcmp+0xe>
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	e005      	b.n	8005af6 <memcmp+0x1a>
 8005aea:	7803      	ldrb	r3, [r0, #0]
 8005aec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d001      	beq.n	8005af8 <memcmp+0x1c>
 8005af4:	1b18      	subs	r0, r3, r4
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	3001      	adds	r0, #1
 8005afa:	e7f2      	b.n	8005ae2 <memcmp+0x6>

08005afc <memcpy>:
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	4770      	bx	lr
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d1f9      	bne.n	8005b0a <memcpy+0xe>
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <memset>:
 8005b18:	4402      	add	r2, r0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d100      	bne.n	8005b22 <memset+0xa>
 8005b20:	4770      	bx	lr
 8005b22:	f803 1b01 	strb.w	r1, [r3], #1
 8005b26:	e7f9      	b.n	8005b1c <memset+0x4>

08005b28 <_puts_r>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	460e      	mov	r6, r1
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	b118      	cbz	r0, 8005b38 <_puts_r+0x10>
 8005b30:	6983      	ldr	r3, [r0, #24]
 8005b32:	b90b      	cbnz	r3, 8005b38 <_puts_r+0x10>
 8005b34:	f000 fa48 	bl	8005fc8 <__sinit>
 8005b38:	69ab      	ldr	r3, [r5, #24]
 8005b3a:	68ac      	ldr	r4, [r5, #8]
 8005b3c:	b913      	cbnz	r3, 8005b44 <_puts_r+0x1c>
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 fa42 	bl	8005fc8 <__sinit>
 8005b44:	4b2c      	ldr	r3, [pc, #176]	; (8005bf8 <_puts_r+0xd0>)
 8005b46:	429c      	cmp	r4, r3
 8005b48:	d120      	bne.n	8005b8c <_puts_r+0x64>
 8005b4a:	686c      	ldr	r4, [r5, #4]
 8005b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b4e:	07db      	lsls	r3, r3, #31
 8005b50:	d405      	bmi.n	8005b5e <_puts_r+0x36>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	0598      	lsls	r0, r3, #22
 8005b56:	d402      	bmi.n	8005b5e <_puts_r+0x36>
 8005b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5a:	f000 fad3 	bl	8006104 <__retarget_lock_acquire_recursive>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	0719      	lsls	r1, r3, #28
 8005b62:	d51d      	bpl.n	8005ba0 <_puts_r+0x78>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	b1db      	cbz	r3, 8005ba0 <_puts_r+0x78>
 8005b68:	3e01      	subs	r6, #1
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b70:	3b01      	subs	r3, #1
 8005b72:	60a3      	str	r3, [r4, #8]
 8005b74:	bb39      	cbnz	r1, 8005bc6 <_puts_r+0x9e>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	da38      	bge.n	8005bec <_puts_r+0xc4>
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	210a      	movs	r1, #10
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 f848 	bl	8005c14 <__swbuf_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d011      	beq.n	8005bac <_puts_r+0x84>
 8005b88:	250a      	movs	r5, #10
 8005b8a:	e011      	b.n	8005bb0 <_puts_r+0x88>
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <_puts_r+0xd4>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d101      	bne.n	8005b96 <_puts_r+0x6e>
 8005b92:	68ac      	ldr	r4, [r5, #8]
 8005b94:	e7da      	b.n	8005b4c <_puts_r+0x24>
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <_puts_r+0xd8>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	bf08      	it	eq
 8005b9c:	68ec      	ldreq	r4, [r5, #12]
 8005b9e:	e7d5      	b.n	8005b4c <_puts_r+0x24>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f888 	bl	8005cb8 <__swsetup_r>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d0dd      	beq.n	8005b68 <_puts_r+0x40>
 8005bac:	f04f 35ff 	mov.w	r5, #4294967295
 8005bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bb2:	07da      	lsls	r2, r3, #31
 8005bb4:	d405      	bmi.n	8005bc2 <_puts_r+0x9a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	059b      	lsls	r3, r3, #22
 8005bba:	d402      	bmi.n	8005bc2 <_puts_r+0x9a>
 8005bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bbe:	f000 faa2 	bl	8006106 <__retarget_lock_release_recursive>
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da04      	bge.n	8005bd4 <_puts_r+0xac>
 8005bca:	69a2      	ldr	r2, [r4, #24]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	dc06      	bgt.n	8005bde <_puts_r+0xb6>
 8005bd0:	290a      	cmp	r1, #10
 8005bd2:	d004      	beq.n	8005bde <_puts_r+0xb6>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	6022      	str	r2, [r4, #0]
 8005bda:	7019      	strb	r1, [r3, #0]
 8005bdc:	e7c5      	b.n	8005b6a <_puts_r+0x42>
 8005bde:	4622      	mov	r2, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 f817 	bl	8005c14 <__swbuf_r>
 8005be6:	3001      	adds	r0, #1
 8005be8:	d1bf      	bne.n	8005b6a <_puts_r+0x42>
 8005bea:	e7df      	b.n	8005bac <_puts_r+0x84>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	250a      	movs	r5, #10
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	701d      	strb	r5, [r3, #0]
 8005bf6:	e7db      	b.n	8005bb0 <_puts_r+0x88>
 8005bf8:	08006720 	.word	0x08006720
 8005bfc:	08006740 	.word	0x08006740
 8005c00:	08006700 	.word	0x08006700

08005c04 <puts>:
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <puts+0xc>)
 8005c06:	4601      	mov	r1, r0
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f7ff bf8d 	b.w	8005b28 <_puts_r>
 8005c0e:	bf00      	nop
 8005c10:	20000014 	.word	0x20000014

08005c14 <__swbuf_r>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	460e      	mov	r6, r1
 8005c18:	4614      	mov	r4, r2
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	b118      	cbz	r0, 8005c26 <__swbuf_r+0x12>
 8005c1e:	6983      	ldr	r3, [r0, #24]
 8005c20:	b90b      	cbnz	r3, 8005c26 <__swbuf_r+0x12>
 8005c22:	f000 f9d1 	bl	8005fc8 <__sinit>
 8005c26:	4b21      	ldr	r3, [pc, #132]	; (8005cac <__swbuf_r+0x98>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d12b      	bne.n	8005c84 <__swbuf_r+0x70>
 8005c2c:	686c      	ldr	r4, [r5, #4]
 8005c2e:	69a3      	ldr	r3, [r4, #24]
 8005c30:	60a3      	str	r3, [r4, #8]
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	071a      	lsls	r2, r3, #28
 8005c36:	d52f      	bpl.n	8005c98 <__swbuf_r+0x84>
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	b36b      	cbz	r3, 8005c98 <__swbuf_r+0x84>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	1ac0      	subs	r0, r0, r3
 8005c42:	6963      	ldr	r3, [r4, #20]
 8005c44:	b2f6      	uxtb	r6, r6
 8005c46:	4283      	cmp	r3, r0
 8005c48:	4637      	mov	r7, r6
 8005c4a:	dc04      	bgt.n	8005c56 <__swbuf_r+0x42>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 f926 	bl	8005ea0 <_fflush_r>
 8005c54:	bb30      	cbnz	r0, 8005ca4 <__swbuf_r+0x90>
 8005c56:	68a3      	ldr	r3, [r4, #8]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	701e      	strb	r6, [r3, #0]
 8005c64:	6963      	ldr	r3, [r4, #20]
 8005c66:	3001      	adds	r0, #1
 8005c68:	4283      	cmp	r3, r0
 8005c6a:	d004      	beq.n	8005c76 <__swbuf_r+0x62>
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	07db      	lsls	r3, r3, #31
 8005c70:	d506      	bpl.n	8005c80 <__swbuf_r+0x6c>
 8005c72:	2e0a      	cmp	r6, #10
 8005c74:	d104      	bne.n	8005c80 <__swbuf_r+0x6c>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 f911 	bl	8005ea0 <_fflush_r>
 8005c7e:	b988      	cbnz	r0, 8005ca4 <__swbuf_r+0x90>
 8005c80:	4638      	mov	r0, r7
 8005c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <__swbuf_r+0x9c>)
 8005c86:	429c      	cmp	r4, r3
 8005c88:	d101      	bne.n	8005c8e <__swbuf_r+0x7a>
 8005c8a:	68ac      	ldr	r4, [r5, #8]
 8005c8c:	e7cf      	b.n	8005c2e <__swbuf_r+0x1a>
 8005c8e:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <__swbuf_r+0xa0>)
 8005c90:	429c      	cmp	r4, r3
 8005c92:	bf08      	it	eq
 8005c94:	68ec      	ldreq	r4, [r5, #12]
 8005c96:	e7ca      	b.n	8005c2e <__swbuf_r+0x1a>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f80c 	bl	8005cb8 <__swsetup_r>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0cb      	beq.n	8005c3c <__swbuf_r+0x28>
 8005ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca8:	e7ea      	b.n	8005c80 <__swbuf_r+0x6c>
 8005caa:	bf00      	nop
 8005cac:	08006720 	.word	0x08006720
 8005cb0:	08006740 	.word	0x08006740
 8005cb4:	08006700 	.word	0x08006700

08005cb8 <__swsetup_r>:
 8005cb8:	4b32      	ldr	r3, [pc, #200]	; (8005d84 <__swsetup_r+0xcc>)
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	681d      	ldr	r5, [r3, #0]
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	b125      	cbz	r5, 8005cce <__swsetup_r+0x16>
 8005cc4:	69ab      	ldr	r3, [r5, #24]
 8005cc6:	b913      	cbnz	r3, 8005cce <__swsetup_r+0x16>
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f000 f97d 	bl	8005fc8 <__sinit>
 8005cce:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <__swsetup_r+0xd0>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	d10f      	bne.n	8005cf4 <__swsetup_r+0x3c>
 8005cd4:	686c      	ldr	r4, [r5, #4]
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cdc:	0719      	lsls	r1, r3, #28
 8005cde:	d42c      	bmi.n	8005d3a <__swsetup_r+0x82>
 8005ce0:	06dd      	lsls	r5, r3, #27
 8005ce2:	d411      	bmi.n	8005d08 <__swsetup_r+0x50>
 8005ce4:	2309      	movs	r3, #9
 8005ce6:	6033      	str	r3, [r6, #0]
 8005ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf2:	e03e      	b.n	8005d72 <__swsetup_r+0xba>
 8005cf4:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <__swsetup_r+0xd4>)
 8005cf6:	429c      	cmp	r4, r3
 8005cf8:	d101      	bne.n	8005cfe <__swsetup_r+0x46>
 8005cfa:	68ac      	ldr	r4, [r5, #8]
 8005cfc:	e7eb      	b.n	8005cd6 <__swsetup_r+0x1e>
 8005cfe:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <__swsetup_r+0xd8>)
 8005d00:	429c      	cmp	r4, r3
 8005d02:	bf08      	it	eq
 8005d04:	68ec      	ldreq	r4, [r5, #12]
 8005d06:	e7e6      	b.n	8005cd6 <__swsetup_r+0x1e>
 8005d08:	0758      	lsls	r0, r3, #29
 8005d0a:	d512      	bpl.n	8005d32 <__swsetup_r+0x7a>
 8005d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d0e:	b141      	cbz	r1, 8005d22 <__swsetup_r+0x6a>
 8005d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <__swsetup_r+0x66>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 fa5b 	bl	80061d4 <_free_r>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6363      	str	r3, [r4, #52]	; 0x34
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f043 0308 	orr.w	r3, r3, #8
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	b94b      	cbnz	r3, 8005d52 <__swsetup_r+0x9a>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d48:	d003      	beq.n	8005d52 <__swsetup_r+0x9a>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 fa01 	bl	8006154 <__smakebuf_r>
 8005d52:	89a0      	ldrh	r0, [r4, #12]
 8005d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d58:	f010 0301 	ands.w	r3, r0, #1
 8005d5c:	d00a      	beq.n	8005d74 <__swsetup_r+0xbc>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	6963      	ldr	r3, [r4, #20]
 8005d64:	425b      	negs	r3, r3
 8005d66:	61a3      	str	r3, [r4, #24]
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b943      	cbnz	r3, 8005d7e <__swsetup_r+0xc6>
 8005d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d70:	d1ba      	bne.n	8005ce8 <__swsetup_r+0x30>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	0781      	lsls	r1, r0, #30
 8005d76:	bf58      	it	pl
 8005d78:	6963      	ldrpl	r3, [r4, #20]
 8005d7a:	60a3      	str	r3, [r4, #8]
 8005d7c:	e7f4      	b.n	8005d68 <__swsetup_r+0xb0>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e7f7      	b.n	8005d72 <__swsetup_r+0xba>
 8005d82:	bf00      	nop
 8005d84:	20000014 	.word	0x20000014
 8005d88:	08006720 	.word	0x08006720
 8005d8c:	08006740 	.word	0x08006740
 8005d90:	08006700 	.word	0x08006700

08005d94 <__sflush_r>:
 8005d94:	898a      	ldrh	r2, [r1, #12]
 8005d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	0710      	lsls	r0, r2, #28
 8005d9e:	460c      	mov	r4, r1
 8005da0:	d458      	bmi.n	8005e54 <__sflush_r+0xc0>
 8005da2:	684b      	ldr	r3, [r1, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dc05      	bgt.n	8005db4 <__sflush_r+0x20>
 8005da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dc02      	bgt.n	8005db4 <__sflush_r+0x20>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	d0f9      	beq.n	8005dae <__sflush_r+0x1a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dc0:	682f      	ldr	r7, [r5, #0]
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	d032      	beq.n	8005e2c <__sflush_r+0x98>
 8005dc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	075a      	lsls	r2, r3, #29
 8005dcc:	d505      	bpl.n	8005dda <__sflush_r+0x46>
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	1ac0      	subs	r0, r0, r3
 8005dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dd4:	b10b      	cbz	r3, 8005dda <__sflush_r+0x46>
 8005dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dd8:	1ac0      	subs	r0, r0, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005de0:	6a21      	ldr	r1, [r4, #32]
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b0      	blx	r6
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	d106      	bne.n	8005dfa <__sflush_r+0x66>
 8005dec:	6829      	ldr	r1, [r5, #0]
 8005dee:	291d      	cmp	r1, #29
 8005df0:	d82c      	bhi.n	8005e4c <__sflush_r+0xb8>
 8005df2:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <__sflush_r+0x108>)
 8005df4:	40ca      	lsrs	r2, r1
 8005df6:	07d6      	lsls	r6, r2, #31
 8005df8:	d528      	bpl.n	8005e4c <__sflush_r+0xb8>
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	6062      	str	r2, [r4, #4]
 8005dfe:	04d9      	lsls	r1, r3, #19
 8005e00:	6922      	ldr	r2, [r4, #16]
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	d504      	bpl.n	8005e10 <__sflush_r+0x7c>
 8005e06:	1c42      	adds	r2, r0, #1
 8005e08:	d101      	bne.n	8005e0e <__sflush_r+0x7a>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	b903      	cbnz	r3, 8005e10 <__sflush_r+0x7c>
 8005e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e12:	602f      	str	r7, [r5, #0]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	d0ca      	beq.n	8005dae <__sflush_r+0x1a>
 8005e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e1c:	4299      	cmp	r1, r3
 8005e1e:	d002      	beq.n	8005e26 <__sflush_r+0x92>
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 f9d7 	bl	80061d4 <_free_r>
 8005e26:	2000      	movs	r0, #0
 8005e28:	6360      	str	r0, [r4, #52]	; 0x34
 8005e2a:	e7c1      	b.n	8005db0 <__sflush_r+0x1c>
 8005e2c:	6a21      	ldr	r1, [r4, #32]
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b0      	blx	r6
 8005e34:	1c41      	adds	r1, r0, #1
 8005e36:	d1c7      	bne.n	8005dc8 <__sflush_r+0x34>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0c4      	beq.n	8005dc8 <__sflush_r+0x34>
 8005e3e:	2b1d      	cmp	r3, #29
 8005e40:	d001      	beq.n	8005e46 <__sflush_r+0xb2>
 8005e42:	2b16      	cmp	r3, #22
 8005e44:	d101      	bne.n	8005e4a <__sflush_r+0xb6>
 8005e46:	602f      	str	r7, [r5, #0]
 8005e48:	e7b1      	b.n	8005dae <__sflush_r+0x1a>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	e7ad      	b.n	8005db0 <__sflush_r+0x1c>
 8005e54:	690f      	ldr	r7, [r1, #16]
 8005e56:	2f00      	cmp	r7, #0
 8005e58:	d0a9      	beq.n	8005dae <__sflush_r+0x1a>
 8005e5a:	0793      	lsls	r3, r2, #30
 8005e5c:	680e      	ldr	r6, [r1, #0]
 8005e5e:	bf08      	it	eq
 8005e60:	694b      	ldreq	r3, [r1, #20]
 8005e62:	600f      	str	r7, [r1, #0]
 8005e64:	bf18      	it	ne
 8005e66:	2300      	movne	r3, #0
 8005e68:	eba6 0807 	sub.w	r8, r6, r7
 8005e6c:	608b      	str	r3, [r1, #8]
 8005e6e:	f1b8 0f00 	cmp.w	r8, #0
 8005e72:	dd9c      	ble.n	8005dae <__sflush_r+0x1a>
 8005e74:	6a21      	ldr	r1, [r4, #32]
 8005e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e78:	4643      	mov	r3, r8
 8005e7a:	463a      	mov	r2, r7
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b0      	blx	r6
 8005e80:	2800      	cmp	r0, #0
 8005e82:	dc06      	bgt.n	8005e92 <__sflush_r+0xfe>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	e78e      	b.n	8005db0 <__sflush_r+0x1c>
 8005e92:	4407      	add	r7, r0
 8005e94:	eba8 0800 	sub.w	r8, r8, r0
 8005e98:	e7e9      	b.n	8005e6e <__sflush_r+0xda>
 8005e9a:	bf00      	nop
 8005e9c:	20400001 	.word	0x20400001

08005ea0 <_fflush_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	b913      	cbnz	r3, 8005eb0 <_fflush_r+0x10>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	4628      	mov	r0, r5
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	b118      	cbz	r0, 8005eba <_fflush_r+0x1a>
 8005eb2:	6983      	ldr	r3, [r0, #24]
 8005eb4:	b90b      	cbnz	r3, 8005eba <_fflush_r+0x1a>
 8005eb6:	f000 f887 	bl	8005fc8 <__sinit>
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <_fflush_r+0x6c>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d11b      	bne.n	8005ef8 <_fflush_r+0x58>
 8005ec0:	686c      	ldr	r4, [r5, #4]
 8005ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0ef      	beq.n	8005eaa <_fflush_r+0xa>
 8005eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ecc:	07d0      	lsls	r0, r2, #31
 8005ece:	d404      	bmi.n	8005eda <_fflush_r+0x3a>
 8005ed0:	0599      	lsls	r1, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_fflush_r+0x3a>
 8005ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ed6:	f000 f915 	bl	8006104 <__retarget_lock_acquire_recursive>
 8005eda:	4628      	mov	r0, r5
 8005edc:	4621      	mov	r1, r4
 8005ede:	f7ff ff59 	bl	8005d94 <__sflush_r>
 8005ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ee4:	07da      	lsls	r2, r3, #31
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	d4e0      	bmi.n	8005eac <_fflush_r+0xc>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	059b      	lsls	r3, r3, #22
 8005eee:	d4dd      	bmi.n	8005eac <_fflush_r+0xc>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ef2:	f000 f908 	bl	8006106 <__retarget_lock_release_recursive>
 8005ef6:	e7d9      	b.n	8005eac <_fflush_r+0xc>
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <_fflush_r+0x70>)
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d101      	bne.n	8005f02 <_fflush_r+0x62>
 8005efe:	68ac      	ldr	r4, [r5, #8]
 8005f00:	e7df      	b.n	8005ec2 <_fflush_r+0x22>
 8005f02:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <_fflush_r+0x74>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	bf08      	it	eq
 8005f08:	68ec      	ldreq	r4, [r5, #12]
 8005f0a:	e7da      	b.n	8005ec2 <_fflush_r+0x22>
 8005f0c:	08006720 	.word	0x08006720
 8005f10:	08006740 	.word	0x08006740
 8005f14:	08006700 	.word	0x08006700

08005f18 <std>:
 8005f18:	2300      	movs	r3, #0
 8005f1a:	b510      	push	{r4, lr}
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f26:	6083      	str	r3, [r0, #8]
 8005f28:	8181      	strh	r1, [r0, #12]
 8005f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f2c:	81c2      	strh	r2, [r0, #14]
 8005f2e:	6183      	str	r3, [r0, #24]
 8005f30:	4619      	mov	r1, r3
 8005f32:	2208      	movs	r2, #8
 8005f34:	305c      	adds	r0, #92	; 0x5c
 8005f36:	f7ff fdef 	bl	8005b18 <memset>
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <std+0x38>)
 8005f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <std+0x3c>)
 8005f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <std+0x40>)
 8005f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <std+0x44>)
 8005f48:	6224      	str	r4, [r4, #32]
 8005f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	080063b5 	.word	0x080063b5
 8005f54:	080063d7 	.word	0x080063d7
 8005f58:	0800640f 	.word	0x0800640f
 8005f5c:	08006433 	.word	0x08006433

08005f60 <_cleanup_r>:
 8005f60:	4901      	ldr	r1, [pc, #4]	; (8005f68 <_cleanup_r+0x8>)
 8005f62:	f000 b8af 	b.w	80060c4 <_fwalk_reent>
 8005f66:	bf00      	nop
 8005f68:	08005ea1 	.word	0x08005ea1

08005f6c <__sfmoreglue>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	2268      	movs	r2, #104	; 0x68
 8005f70:	1e4d      	subs	r5, r1, #1
 8005f72:	4355      	muls	r5, r2
 8005f74:	460e      	mov	r6, r1
 8005f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f7a:	f000 f997 	bl	80062ac <_malloc_r>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	b140      	cbz	r0, 8005f94 <__sfmoreglue+0x28>
 8005f82:	2100      	movs	r1, #0
 8005f84:	e9c0 1600 	strd	r1, r6, [r0]
 8005f88:	300c      	adds	r0, #12
 8005f8a:	60a0      	str	r0, [r4, #8]
 8005f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f90:	f7ff fdc2 	bl	8005b18 <memset>
 8005f94:	4620      	mov	r0, r4
 8005f96:	bd70      	pop	{r4, r5, r6, pc}

08005f98 <__sfp_lock_acquire>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__sfp_lock_acquire+0x8>)
 8005f9a:	f000 b8b3 	b.w	8006104 <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20014484 	.word	0x20014484

08005fa4 <__sfp_lock_release>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__sfp_lock_release+0x8>)
 8005fa6:	f000 b8ae 	b.w	8006106 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20014484 	.word	0x20014484

08005fb0 <__sinit_lock_acquire>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__sinit_lock_acquire+0x8>)
 8005fb2:	f000 b8a7 	b.w	8006104 <__retarget_lock_acquire_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20014485 	.word	0x20014485

08005fbc <__sinit_lock_release>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	; (8005fc4 <__sinit_lock_release+0x8>)
 8005fbe:	f000 b8a2 	b.w	8006106 <__retarget_lock_release_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	20014485 	.word	0x20014485

08005fc8 <__sinit>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	f7ff fff0 	bl	8005fb0 <__sinit_lock_acquire>
 8005fd0:	69a3      	ldr	r3, [r4, #24]
 8005fd2:	b11b      	cbz	r3, 8005fdc <__sinit+0x14>
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	f7ff bff0 	b.w	8005fbc <__sinit_lock_release>
 8005fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fe2:	4b13      	ldr	r3, [pc, #76]	; (8006030 <__sinit+0x68>)
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <__sinit+0x6c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	bf04      	itt	eq
 8005fee:	2301      	moveq	r3, #1
 8005ff0:	61a3      	streq	r3, [r4, #24]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 f820 	bl	8006038 <__sfp>
 8005ff8:	6060      	str	r0, [r4, #4]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 f81c 	bl	8006038 <__sfp>
 8006000:	60a0      	str	r0, [r4, #8]
 8006002:	4620      	mov	r0, r4
 8006004:	f000 f818 	bl	8006038 <__sfp>
 8006008:	2200      	movs	r2, #0
 800600a:	60e0      	str	r0, [r4, #12]
 800600c:	2104      	movs	r1, #4
 800600e:	6860      	ldr	r0, [r4, #4]
 8006010:	f7ff ff82 	bl	8005f18 <std>
 8006014:	68a0      	ldr	r0, [r4, #8]
 8006016:	2201      	movs	r2, #1
 8006018:	2109      	movs	r1, #9
 800601a:	f7ff ff7d 	bl	8005f18 <std>
 800601e:	68e0      	ldr	r0, [r4, #12]
 8006020:	2202      	movs	r2, #2
 8006022:	2112      	movs	r1, #18
 8006024:	f7ff ff78 	bl	8005f18 <std>
 8006028:	2301      	movs	r3, #1
 800602a:	61a3      	str	r3, [r4, #24]
 800602c:	e7d2      	b.n	8005fd4 <__sinit+0xc>
 800602e:	bf00      	nop
 8006030:	080066fc 	.word	0x080066fc
 8006034:	08005f61 	.word	0x08005f61

08006038 <__sfp>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	4607      	mov	r7, r0
 800603c:	f7ff ffac 	bl	8005f98 <__sfp_lock_acquire>
 8006040:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <__sfp+0x84>)
 8006042:	681e      	ldr	r6, [r3, #0]
 8006044:	69b3      	ldr	r3, [r6, #24]
 8006046:	b913      	cbnz	r3, 800604e <__sfp+0x16>
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff ffbd 	bl	8005fc8 <__sinit>
 800604e:	3648      	adds	r6, #72	; 0x48
 8006050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006054:	3b01      	subs	r3, #1
 8006056:	d503      	bpl.n	8006060 <__sfp+0x28>
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	b30b      	cbz	r3, 80060a0 <__sfp+0x68>
 800605c:	6836      	ldr	r6, [r6, #0]
 800605e:	e7f7      	b.n	8006050 <__sfp+0x18>
 8006060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006064:	b9d5      	cbnz	r5, 800609c <__sfp+0x64>
 8006066:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <__sfp+0x88>)
 8006068:	60e3      	str	r3, [r4, #12]
 800606a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800606e:	6665      	str	r5, [r4, #100]	; 0x64
 8006070:	f000 f847 	bl	8006102 <__retarget_lock_init_recursive>
 8006074:	f7ff ff96 	bl	8005fa4 <__sfp_lock_release>
 8006078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800607c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006080:	6025      	str	r5, [r4, #0]
 8006082:	61a5      	str	r5, [r4, #24]
 8006084:	2208      	movs	r2, #8
 8006086:	4629      	mov	r1, r5
 8006088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800608c:	f7ff fd44 	bl	8005b18 <memset>
 8006090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006098:	4620      	mov	r0, r4
 800609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800609c:	3468      	adds	r4, #104	; 0x68
 800609e:	e7d9      	b.n	8006054 <__sfp+0x1c>
 80060a0:	2104      	movs	r1, #4
 80060a2:	4638      	mov	r0, r7
 80060a4:	f7ff ff62 	bl	8005f6c <__sfmoreglue>
 80060a8:	4604      	mov	r4, r0
 80060aa:	6030      	str	r0, [r6, #0]
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d1d5      	bne.n	800605c <__sfp+0x24>
 80060b0:	f7ff ff78 	bl	8005fa4 <__sfp_lock_release>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	e7ee      	b.n	8006098 <__sfp+0x60>
 80060ba:	bf00      	nop
 80060bc:	080066fc 	.word	0x080066fc
 80060c0:	ffff0001 	.word	0xffff0001

080060c4 <_fwalk_reent>:
 80060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c8:	4606      	mov	r6, r0
 80060ca:	4688      	mov	r8, r1
 80060cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060d0:	2700      	movs	r7, #0
 80060d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060d6:	f1b9 0901 	subs.w	r9, r9, #1
 80060da:	d505      	bpl.n	80060e8 <_fwalk_reent+0x24>
 80060dc:	6824      	ldr	r4, [r4, #0]
 80060de:	2c00      	cmp	r4, #0
 80060e0:	d1f7      	bne.n	80060d2 <_fwalk_reent+0xe>
 80060e2:	4638      	mov	r0, r7
 80060e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e8:	89ab      	ldrh	r3, [r5, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d907      	bls.n	80060fe <_fwalk_reent+0x3a>
 80060ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060f2:	3301      	adds	r3, #1
 80060f4:	d003      	beq.n	80060fe <_fwalk_reent+0x3a>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4630      	mov	r0, r6
 80060fa:	47c0      	blx	r8
 80060fc:	4307      	orrs	r7, r0
 80060fe:	3568      	adds	r5, #104	; 0x68
 8006100:	e7e9      	b.n	80060d6 <_fwalk_reent+0x12>

08006102 <__retarget_lock_init_recursive>:
 8006102:	4770      	bx	lr

08006104 <__retarget_lock_acquire_recursive>:
 8006104:	4770      	bx	lr

08006106 <__retarget_lock_release_recursive>:
 8006106:	4770      	bx	lr

08006108 <__swhatbuf_r>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	460e      	mov	r6, r1
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	2900      	cmp	r1, #0
 8006112:	b096      	sub	sp, #88	; 0x58
 8006114:	4614      	mov	r4, r2
 8006116:	461d      	mov	r5, r3
 8006118:	da08      	bge.n	800612c <__swhatbuf_r+0x24>
 800611a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	061a      	lsls	r2, r3, #24
 8006124:	d410      	bmi.n	8006148 <__swhatbuf_r+0x40>
 8006126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800612a:	e00e      	b.n	800614a <__swhatbuf_r+0x42>
 800612c:	466a      	mov	r2, sp
 800612e:	f000 f9a7 	bl	8006480 <_fstat_r>
 8006132:	2800      	cmp	r0, #0
 8006134:	dbf1      	blt.n	800611a <__swhatbuf_r+0x12>
 8006136:	9a01      	ldr	r2, [sp, #4]
 8006138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800613c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006140:	425a      	negs	r2, r3
 8006142:	415a      	adcs	r2, r3
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	e7ee      	b.n	8006126 <__swhatbuf_r+0x1e>
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	2000      	movs	r0, #0
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	b016      	add	sp, #88	; 0x58
 8006150:	bd70      	pop	{r4, r5, r6, pc}
	...

08006154 <__smakebuf_r>:
 8006154:	898b      	ldrh	r3, [r1, #12]
 8006156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006158:	079d      	lsls	r5, r3, #30
 800615a:	4606      	mov	r6, r0
 800615c:	460c      	mov	r4, r1
 800615e:	d507      	bpl.n	8006170 <__smakebuf_r+0x1c>
 8006160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2301      	movs	r3, #1
 800616a:	6163      	str	r3, [r4, #20]
 800616c:	b002      	add	sp, #8
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	ab01      	add	r3, sp, #4
 8006172:	466a      	mov	r2, sp
 8006174:	f7ff ffc8 	bl	8006108 <__swhatbuf_r>
 8006178:	9900      	ldr	r1, [sp, #0]
 800617a:	4605      	mov	r5, r0
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f895 	bl	80062ac <_malloc_r>
 8006182:	b948      	cbnz	r0, 8006198 <__smakebuf_r+0x44>
 8006184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006188:	059a      	lsls	r2, r3, #22
 800618a:	d4ef      	bmi.n	800616c <__smakebuf_r+0x18>
 800618c:	f023 0303 	bic.w	r3, r3, #3
 8006190:	f043 0302 	orr.w	r3, r3, #2
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	e7e3      	b.n	8006160 <__smakebuf_r+0xc>
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <__smakebuf_r+0x7c>)
 800619a:	62b3      	str	r3, [r6, #40]	; 0x28
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	6020      	str	r0, [r4, #0]
 80061a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	9b00      	ldr	r3, [sp, #0]
 80061a8:	6163      	str	r3, [r4, #20]
 80061aa:	9b01      	ldr	r3, [sp, #4]
 80061ac:	6120      	str	r0, [r4, #16]
 80061ae:	b15b      	cbz	r3, 80061c8 <__smakebuf_r+0x74>
 80061b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b4:	4630      	mov	r0, r6
 80061b6:	f000 f975 	bl	80064a4 <_isatty_r>
 80061ba:	b128      	cbz	r0, 80061c8 <__smakebuf_r+0x74>
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	89a0      	ldrh	r0, [r4, #12]
 80061ca:	4305      	orrs	r5, r0
 80061cc:	81a5      	strh	r5, [r4, #12]
 80061ce:	e7cd      	b.n	800616c <__smakebuf_r+0x18>
 80061d0:	08005f61 	.word	0x08005f61

080061d4 <_free_r>:
 80061d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061d6:	2900      	cmp	r1, #0
 80061d8:	d044      	beq.n	8006264 <_free_r+0x90>
 80061da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061de:	9001      	str	r0, [sp, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f1a1 0404 	sub.w	r4, r1, #4
 80061e6:	bfb8      	it	lt
 80061e8:	18e4      	addlt	r4, r4, r3
 80061ea:	f000 f97d 	bl	80064e8 <__malloc_lock>
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <_free_r+0x94>)
 80061f0:	9801      	ldr	r0, [sp, #4]
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	b933      	cbnz	r3, 8006204 <_free_r+0x30>
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	6014      	str	r4, [r2, #0]
 80061fa:	b003      	add	sp, #12
 80061fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006200:	f000 b978 	b.w	80064f4 <__malloc_unlock>
 8006204:	42a3      	cmp	r3, r4
 8006206:	d908      	bls.n	800621a <_free_r+0x46>
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	1961      	adds	r1, r4, r5
 800620c:	428b      	cmp	r3, r1
 800620e:	bf01      	itttt	eq
 8006210:	6819      	ldreq	r1, [r3, #0]
 8006212:	685b      	ldreq	r3, [r3, #4]
 8006214:	1949      	addeq	r1, r1, r5
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	e7ed      	b.n	80061f6 <_free_r+0x22>
 800621a:	461a      	mov	r2, r3
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	b10b      	cbz	r3, 8006224 <_free_r+0x50>
 8006220:	42a3      	cmp	r3, r4
 8006222:	d9fa      	bls.n	800621a <_free_r+0x46>
 8006224:	6811      	ldr	r1, [r2, #0]
 8006226:	1855      	adds	r5, r2, r1
 8006228:	42a5      	cmp	r5, r4
 800622a:	d10b      	bne.n	8006244 <_free_r+0x70>
 800622c:	6824      	ldr	r4, [r4, #0]
 800622e:	4421      	add	r1, r4
 8006230:	1854      	adds	r4, r2, r1
 8006232:	42a3      	cmp	r3, r4
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	d1e0      	bne.n	80061fa <_free_r+0x26>
 8006238:	681c      	ldr	r4, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	6053      	str	r3, [r2, #4]
 800623e:	4421      	add	r1, r4
 8006240:	6011      	str	r1, [r2, #0]
 8006242:	e7da      	b.n	80061fa <_free_r+0x26>
 8006244:	d902      	bls.n	800624c <_free_r+0x78>
 8006246:	230c      	movs	r3, #12
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	e7d6      	b.n	80061fa <_free_r+0x26>
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	1961      	adds	r1, r4, r5
 8006250:	428b      	cmp	r3, r1
 8006252:	bf04      	itt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	bf04      	itt	eq
 800625c:	1949      	addeq	r1, r1, r5
 800625e:	6021      	streq	r1, [r4, #0]
 8006260:	6054      	str	r4, [r2, #4]
 8006262:	e7ca      	b.n	80061fa <_free_r+0x26>
 8006264:	b003      	add	sp, #12
 8006266:	bd30      	pop	{r4, r5, pc}
 8006268:	20014488 	.word	0x20014488

0800626c <sbrk_aligned>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4e0e      	ldr	r6, [pc, #56]	; (80062a8 <sbrk_aligned+0x3c>)
 8006270:	460c      	mov	r4, r1
 8006272:	6831      	ldr	r1, [r6, #0]
 8006274:	4605      	mov	r5, r0
 8006276:	b911      	cbnz	r1, 800627e <sbrk_aligned+0x12>
 8006278:	f000 f88c 	bl	8006394 <_sbrk_r>
 800627c:	6030      	str	r0, [r6, #0]
 800627e:	4621      	mov	r1, r4
 8006280:	4628      	mov	r0, r5
 8006282:	f000 f887 	bl	8006394 <_sbrk_r>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	d00a      	beq.n	80062a0 <sbrk_aligned+0x34>
 800628a:	1cc4      	adds	r4, r0, #3
 800628c:	f024 0403 	bic.w	r4, r4, #3
 8006290:	42a0      	cmp	r0, r4
 8006292:	d007      	beq.n	80062a4 <sbrk_aligned+0x38>
 8006294:	1a21      	subs	r1, r4, r0
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f87c 	bl	8006394 <_sbrk_r>
 800629c:	3001      	adds	r0, #1
 800629e:	d101      	bne.n	80062a4 <sbrk_aligned+0x38>
 80062a0:	f04f 34ff 	mov.w	r4, #4294967295
 80062a4:	4620      	mov	r0, r4
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	2001448c 	.word	0x2001448c

080062ac <_malloc_r>:
 80062ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b0:	1ccd      	adds	r5, r1, #3
 80062b2:	f025 0503 	bic.w	r5, r5, #3
 80062b6:	3508      	adds	r5, #8
 80062b8:	2d0c      	cmp	r5, #12
 80062ba:	bf38      	it	cc
 80062bc:	250c      	movcc	r5, #12
 80062be:	2d00      	cmp	r5, #0
 80062c0:	4607      	mov	r7, r0
 80062c2:	db01      	blt.n	80062c8 <_malloc_r+0x1c>
 80062c4:	42a9      	cmp	r1, r5
 80062c6:	d905      	bls.n	80062d4 <_malloc_r+0x28>
 80062c8:	230c      	movs	r3, #12
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	2600      	movs	r6, #0
 80062ce:	4630      	mov	r0, r6
 80062d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d4:	4e2e      	ldr	r6, [pc, #184]	; (8006390 <_malloc_r+0xe4>)
 80062d6:	f000 f907 	bl	80064e8 <__malloc_lock>
 80062da:	6833      	ldr	r3, [r6, #0]
 80062dc:	461c      	mov	r4, r3
 80062de:	bb34      	cbnz	r4, 800632e <_malloc_r+0x82>
 80062e0:	4629      	mov	r1, r5
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7ff ffc2 	bl	800626c <sbrk_aligned>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	4604      	mov	r4, r0
 80062ec:	d14d      	bne.n	800638a <_malloc_r+0xde>
 80062ee:	6834      	ldr	r4, [r6, #0]
 80062f0:	4626      	mov	r6, r4
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	d140      	bne.n	8006378 <_malloc_r+0xcc>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	4631      	mov	r1, r6
 80062fa:	4638      	mov	r0, r7
 80062fc:	eb04 0803 	add.w	r8, r4, r3
 8006300:	f000 f848 	bl	8006394 <_sbrk_r>
 8006304:	4580      	cmp	r8, r0
 8006306:	d13a      	bne.n	800637e <_malloc_r+0xd2>
 8006308:	6821      	ldr	r1, [r4, #0]
 800630a:	3503      	adds	r5, #3
 800630c:	1a6d      	subs	r5, r5, r1
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	4629      	mov	r1, r5
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ffa5 	bl	800626c <sbrk_aligned>
 8006322:	3001      	adds	r0, #1
 8006324:	d02b      	beq.n	800637e <_malloc_r+0xd2>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	442b      	add	r3, r5
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	e00e      	b.n	800634c <_malloc_r+0xa0>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	1b52      	subs	r2, r2, r5
 8006332:	d41e      	bmi.n	8006372 <_malloc_r+0xc6>
 8006334:	2a0b      	cmp	r2, #11
 8006336:	d916      	bls.n	8006366 <_malloc_r+0xba>
 8006338:	1961      	adds	r1, r4, r5
 800633a:	42a3      	cmp	r3, r4
 800633c:	6025      	str	r5, [r4, #0]
 800633e:	bf18      	it	ne
 8006340:	6059      	strne	r1, [r3, #4]
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	bf08      	it	eq
 8006346:	6031      	streq	r1, [r6, #0]
 8006348:	5162      	str	r2, [r4, r5]
 800634a:	604b      	str	r3, [r1, #4]
 800634c:	4638      	mov	r0, r7
 800634e:	f104 060b 	add.w	r6, r4, #11
 8006352:	f000 f8cf 	bl	80064f4 <__malloc_unlock>
 8006356:	f026 0607 	bic.w	r6, r6, #7
 800635a:	1d23      	adds	r3, r4, #4
 800635c:	1af2      	subs	r2, r6, r3
 800635e:	d0b6      	beq.n	80062ce <_malloc_r+0x22>
 8006360:	1b9b      	subs	r3, r3, r6
 8006362:	50a3      	str	r3, [r4, r2]
 8006364:	e7b3      	b.n	80062ce <_malloc_r+0x22>
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	42a3      	cmp	r3, r4
 800636a:	bf0c      	ite	eq
 800636c:	6032      	streq	r2, [r6, #0]
 800636e:	605a      	strne	r2, [r3, #4]
 8006370:	e7ec      	b.n	800634c <_malloc_r+0xa0>
 8006372:	4623      	mov	r3, r4
 8006374:	6864      	ldr	r4, [r4, #4]
 8006376:	e7b2      	b.n	80062de <_malloc_r+0x32>
 8006378:	4634      	mov	r4, r6
 800637a:	6876      	ldr	r6, [r6, #4]
 800637c:	e7b9      	b.n	80062f2 <_malloc_r+0x46>
 800637e:	230c      	movs	r3, #12
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4638      	mov	r0, r7
 8006384:	f000 f8b6 	bl	80064f4 <__malloc_unlock>
 8006388:	e7a1      	b.n	80062ce <_malloc_r+0x22>
 800638a:	6025      	str	r5, [r4, #0]
 800638c:	e7de      	b.n	800634c <_malloc_r+0xa0>
 800638e:	bf00      	nop
 8006390:	20014488 	.word	0x20014488

08006394 <_sbrk_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d06      	ldr	r5, [pc, #24]	; (80063b0 <_sbrk_r+0x1c>)
 8006398:	2300      	movs	r3, #0
 800639a:	4604      	mov	r4, r0
 800639c:	4608      	mov	r0, r1
 800639e:	602b      	str	r3, [r5, #0]
 80063a0:	f000 f8c0 	bl	8006524 <_sbrk>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_sbrk_r+0x1a>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_sbrk_r+0x1a>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20014490 	.word	0x20014490

080063b4 <__sread>:
 80063b4:	b510      	push	{r4, lr}
 80063b6:	460c      	mov	r4, r1
 80063b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063bc:	f000 f8a0 	bl	8006500 <_read_r>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	bfab      	itete	ge
 80063c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063c6:	89a3      	ldrhlt	r3, [r4, #12]
 80063c8:	181b      	addge	r3, r3, r0
 80063ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ce:	bfac      	ite	ge
 80063d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063d2:	81a3      	strhlt	r3, [r4, #12]
 80063d4:	bd10      	pop	{r4, pc}

080063d6 <__swrite>:
 80063d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	461f      	mov	r7, r3
 80063dc:	898b      	ldrh	r3, [r1, #12]
 80063de:	05db      	lsls	r3, r3, #23
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	4616      	mov	r6, r2
 80063e6:	d505      	bpl.n	80063f4 <__swrite+0x1e>
 80063e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ec:	2302      	movs	r3, #2
 80063ee:	2200      	movs	r2, #0
 80063f0:	f000 f868 	bl	80064c4 <_lseek_r>
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	4632      	mov	r2, r6
 8006402:	463b      	mov	r3, r7
 8006404:	4628      	mov	r0, r5
 8006406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800640a:	f000 b817 	b.w	800643c <_write_r>

0800640e <__sseek>:
 800640e:	b510      	push	{r4, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006416:	f000 f855 	bl	80064c4 <_lseek_r>
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	bf15      	itete	ne
 8006420:	6560      	strne	r0, [r4, #84]	; 0x54
 8006422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800642a:	81a3      	strheq	r3, [r4, #12]
 800642c:	bf18      	it	ne
 800642e:	81a3      	strhne	r3, [r4, #12]
 8006430:	bd10      	pop	{r4, pc}

08006432 <__sclose>:
 8006432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006436:	f000 b813 	b.w	8006460 <_close_r>
	...

0800643c <_write_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	; (800645c <_write_r+0x20>)
 8006440:	4604      	mov	r4, r0
 8006442:	4608      	mov	r0, r1
 8006444:	4611      	mov	r1, r2
 8006446:	2200      	movs	r2, #0
 8006448:	602a      	str	r2, [r5, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f7fa fadb 	bl	8000a06 <_write>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_write_r+0x1e>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_write_r+0x1e>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20014490 	.word	0x20014490

08006460 <_close_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	; (800647c <_close_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fa fae7 	bl	8000a3e <_close>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_close_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_close_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20014490 	.word	0x20014490

08006480 <_fstat_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d07      	ldr	r5, [pc, #28]	; (80064a0 <_fstat_r+0x20>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	4611      	mov	r1, r2
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	f7fa fae2 	bl	8000a56 <_fstat>
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d102      	bne.n	800649c <_fstat_r+0x1c>
 8006496:	682b      	ldr	r3, [r5, #0]
 8006498:	b103      	cbz	r3, 800649c <_fstat_r+0x1c>
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	20014490 	.word	0x20014490

080064a4 <_isatty_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4d06      	ldr	r5, [pc, #24]	; (80064c0 <_isatty_r+0x1c>)
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	4608      	mov	r0, r1
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	f7fa fae1 	bl	8000a76 <_isatty>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_isatty_r+0x1a>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_isatty_r+0x1a>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	20014490 	.word	0x20014490

080064c4 <_lseek_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4d07      	ldr	r5, [pc, #28]	; (80064e4 <_lseek_r+0x20>)
 80064c8:	4604      	mov	r4, r0
 80064ca:	4608      	mov	r0, r1
 80064cc:	4611      	mov	r1, r2
 80064ce:	2200      	movs	r2, #0
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fa fada 	bl	8000a8c <_lseek>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_lseek_r+0x1e>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_lseek_r+0x1e>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	20014490 	.word	0x20014490

080064e8 <__malloc_lock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <__malloc_lock+0x8>)
 80064ea:	f7ff be0b 	b.w	8006104 <__retarget_lock_acquire_recursive>
 80064ee:	bf00      	nop
 80064f0:	20014483 	.word	0x20014483

080064f4 <__malloc_unlock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <__malloc_unlock+0x8>)
 80064f6:	f7ff be06 	b.w	8006106 <__retarget_lock_release_recursive>
 80064fa:	bf00      	nop
 80064fc:	20014483 	.word	0x20014483

08006500 <_read_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d07      	ldr	r5, [pc, #28]	; (8006520 <_read_r+0x20>)
 8006504:	4604      	mov	r4, r0
 8006506:	4608      	mov	r0, r1
 8006508:	4611      	mov	r1, r2
 800650a:	2200      	movs	r2, #0
 800650c:	602a      	str	r2, [r5, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	f7fa fa5c 	bl	80009cc <_read>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_read_r+0x1e>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_read_r+0x1e>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	20014490 	.word	0x20014490

08006524 <_sbrk>:
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <_sbrk+0x14>)
 8006526:	6811      	ldr	r1, [r2, #0]
 8006528:	4603      	mov	r3, r0
 800652a:	b909      	cbnz	r1, 8006530 <_sbrk+0xc>
 800652c:	4903      	ldr	r1, [pc, #12]	; (800653c <_sbrk+0x18>)
 800652e:	6011      	str	r1, [r2, #0]
 8006530:	6810      	ldr	r0, [r2, #0]
 8006532:	4403      	add	r3, r0
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4770      	bx	lr
 8006538:	20014494 	.word	0x20014494
 800653c:	20014498 	.word	0x20014498

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
